using System.Data.SQLite;
using AutoMapper;
using Microsoft.Extensions.Logging;
using SERP.Application.Common;
using SERP.Application.Common.Constants;
using SERP.Application.Common.Dto;
using SERP.Application.Common.Exceptions;
using SERP.Application.Common.Services;
using SERP.Application.Masters.BranchPlants.Interfaces;
using SERP.Application.Masters.Items.Interfaces;
using SERP.Application.Masters.Suppliers.Interfaces;
using SERP.Application.Transactions.AdvancedShipmentNotices.DTOs.Base;
using SERP.Application.Transactions.AdvancedShipmentNotices.DTOs.Request;
using SERP.Application.Transactions.AdvancedShipmentNotices.DTOs.Response;
using SERP.Application.Transactions.AdvancedShipmentNotices.Interfaces;
using SERP.Application.Transactions.Containers.Interfaces;
using SERP.Application.Transactions.FilesTracking.Interfaces;
using SERP.Application.Transactions.InboundShipments.DTOs.Response;
using SERP.Application.Transactions.InboundShipments.Interfaces;
using SERP.Application.Transactions.Invoices.DTOs.Request;
using SERP.Application.Transactions.Invoices.Interfaces;
using SERP.Application.Transactions.PackingLists.Interfaces;
using SERP.Application.Transactions.PurchaseOrders.Interfaces;
using SERP.Application.Transactions.SequencesTracking.Interfaces;
using SERP.Domain.Common.Constants;
using SERP.Domain.Common.Model;
using SERP.Domain.Masters.BranchPlants;
using SERP.Domain.Masters.Items;
using SERP.Domain.Masters.Suppliers;
using SERP.Domain.Transactions.AdvancedShipmentNotices;
using SERP.Domain.Transactions.AdvancedShipmentNotices.Model;
using SERP.Domain.Transactions.AdvancedShipmentNotices.Model.Base;
using SERP.Domain.Transactions.Containers;
using SERP.Domain.Transactions.Containers.Model;
using SERP.Domain.Transactions.FilesTracking;
using SERP.Domain.Transactions.InboundShipments;
using SERP.Domain.Transactions.PackingLists;
using SERP.Domain.Transactions.PackingLists.Model;
using SERP.Domain.Transactions.PurchaseOrders;
using static SERP.Domain.Common.Constants.DomainConstant;
using static SERP.Domain.Common.Enums.SERPEnum;
using InvoiceDetail = SERP.Domain.Transactions.Invoice.InvoiceDetail;
using InvoiceHeader = SERP.Domain.Transactions.Invoice.InvoiceHeader;

namespace SERP.Application.Transactions.AdvancedShipmentNotices.Services
{
    internal class AdvancedShipmentNoticeService : IAdvancedShipmentNoticeService
    {
        private readonly IASNHeaderRepository _asnHeaderRepository;
        private readonly IASNDetailRepository _asnDetailRepository;
        private readonly IASNFileRepository _asnFileRepository;
        private readonly IASNPackingDiscrepancyRepository _asnPackingDiscrepancyRepository;
        private readonly IBranchPlantRepository _branchPlantRepository;
        private readonly IContainerRepository _containerRepository;
        private readonly IContainerAsnRepository _containerAsnRepository;
        private readonly IDataRetrievalService _dataRetrievalService;
        private readonly IFileTrackingRepository _fileTrackingRepository;
        private readonly IMapper _mapper;
        private readonly ILogger<AdvancedShipmentNoticeService> _logger;
        private readonly IItemRepository _itemRepository;
        private readonly IInvoiceHeaderRepository _invoiceHeaderRepository;
        private readonly IInvoiceDetailRepository _invoiceDetailRepository;
        private readonly IInboundShipmentRepository _inboundShipmentRepository;
        private readonly IInboundShipmentASNRepository _inboundShipmentAsnRepository;
        private readonly IInboundShipmentBLAWBRepository _inboundShipmentBlAwbRepository;
        private readonly IInboundShipmentRequestRepository _inboundShipmentRequestRepository;
        private readonly IPackingHeaderRepository _packingHeaderRepository;
        private readonly IPackingDetailRepository _packingDetailRepository;
        private readonly IPOHeaderRepository _poHeaderRepository;
        private readonly IPODetailRepository _poDetailRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly ISupplierRepository _supplierRepository;
        private readonly ISequenceTrackingRepository _sequenceTrackingRepository;

        public AdvancedShipmentNoticeService(
            IASNHeaderRepository asnHeaderRepository,
            IASNDetailRepository asnDetailRepository,
            IASNFileRepository asnFileRepository,
            IASNPackingDiscrepancyRepository asnPackingDiscrepancyRepository,
            IBranchPlantRepository branchPlantRepository,
            IContainerRepository containerRepository,
            IContainerAsnRepository containerAsnRepository,
            IDataRetrievalService dataRetrievalService,
            IFileTrackingRepository fileTrackingRepository,
            IMapper mapper,
            ILogger<AdvancedShipmentNoticeService> logger,
            IItemRepository itemRepository,
            IInvoiceHeaderRepository invoiceHeaderRepository,
            IInvoiceDetailRepository invoiceDetailRepository,
            IInboundShipmentRepository inboundShipmentRepository,
            IInboundShipmentASNRepository inboundShipmentASNRepository,
            IInboundShipmentBLAWBRepository inboundShipmentBlAwbRepository,
            IInboundShipmentRequestRepository inboundShipmentRequestRepository,
            IPackingHeaderRepository packingHeaderRepository,
            IPackingDetailRepository packingDetailRepository,
            IPOHeaderRepository poHeaderRepository,
            IPODetailRepository poDetailRepository,
            IUnitOfWork unitOfWork,
            ISupplierRepository supplierRepository,
            ISequenceTrackingRepository sequenceTrackingRepository)
        {
            _asnHeaderRepository = asnHeaderRepository;
            _asnDetailRepository = asnDetailRepository;
            _asnFileRepository = asnFileRepository;
            _asnPackingDiscrepancyRepository = asnPackingDiscrepancyRepository;
            _branchPlantRepository = branchPlantRepository;
            _containerRepository = containerRepository;
            _containerAsnRepository = containerAsnRepository;
            _dataRetrievalService = dataRetrievalService;
            _fileTrackingRepository = fileTrackingRepository;
            _mapper = mapper;
            _logger = logger;
            _itemRepository = itemRepository;
            _invoiceHeaderRepository = invoiceHeaderRepository;
            _invoiceDetailRepository = invoiceDetailRepository;
            _inboundShipmentRepository = inboundShipmentRepository;
            _inboundShipmentAsnRepository = inboundShipmentASNRepository;
            _inboundShipmentBlAwbRepository = inboundShipmentBlAwbRepository;
            _inboundShipmentRequestRepository = inboundShipmentRequestRepository;
            _packingHeaderRepository = packingHeaderRepository;
            _packingDetailRepository = packingDetailRepository;
            _poHeaderRepository = poHeaderRepository;
            _poDetailRepository = poDetailRepository;
            _unitOfWork = unitOfWork;
            _supplierRepository = supplierRepository;
            _sequenceTrackingRepository = sequenceTrackingRepository;
        }

        public async Task<int[]> CreateAsnAsync(string userId, CreateASNRequestDto request)
        {
            await ValidateAsnRequest(request.asns.Select(x => new ValidateASNRequest
            {
                header = _mapper.Map<ASNHeaderViewModel>(x.asn_header),
                container = _mapper.Map<List<ContainerViewModel>>(x.containers)
            }).ToList());

            var asnHeaderToInsert = new List<ASNHeader>();
            var inboundShipmentToInsert = new List<InboundShipment>();
            //var inboundShipmentBlAwbToInsert = new List<InboundShipmentBLAWB>();
            var inboundShipmentRequestToInsert = new List<InboundShipmentRequest>();
            var asnInfos = new List<ASNInfo>();
            //var poDetailIds = request.asns.Where(pkh => pkh.invoices is not null)
            //    .SelectMany(pkh => pkh.invoices!.SelectMany(y => y.invoice_details))
            //    .Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();
            var poDetailIds = request.asns.Where(x => x.asn_details is not null)
                .SelectMany(x => x.asn_details!.Select(y => y.po_detail_id))
                .Distinct().ToList();

            //var containerNOs = request.asns.Where(pkh => pkh.asn_details is not null)
            //    .SelectMany(pkh => pkh.packing_lists!.Select(y => y.container_no))
            //    .Distinct().ToHashSet();
            //var dicContainerIdByContainerNo = await _containerRepository.GetContainerIdByContainerNoAsync(containerNOs);

            var invoiceHeaders = new List<InvoiceHeader>();
            var invoiceHeadersToUpdate = new List<InvoiceHeader>();
            var invoiceDetailsBelongToAsnInvoice = new List<InvoiceDetail>();
            var asnInvoiceId = request.asns.Where(x => x.asn_invoice_id is not null && x.asn_invoice_id.Count > 0)
                .SelectMany(x => x.asn_invoice_id!).ToList();
            if (asnInvoiceId.Count > 0)
            {
                invoiceHeaders = await GetInvoiceHeaderAsync(asnInvoiceId);
                var invalidInvoiceHeaderIds = asnInvoiceId.Except(invoiceHeaders.Select(x => x.id)).ToArray();
                if (invalidInvoiceHeaderIds.Length > 0)
                {
                    throw new NotFoundException(
                        string.Format(ErrorMessages.InvoiceHeaderNotFound, nameof(InvoiceHeader.id), string.Join(",", invalidInvoiceHeaderIds)));
                }

                invoiceDetailsBelongToAsnInvoice = await GetInvoiceDetailAsync(asnInvoiceId);
                if (invoiceDetailsBelongToAsnInvoice.Count > 0)
                {
                    poDetailIds.AddRange(invoiceDetailsBelongToAsnInvoice.Select(x => x.po_detail_id).ToList());
                }
            }

            var containerIds = request.asns.Where(x => x.containers is not null && x.containers.Count > 0)
                .SelectMany(x => x.containers!)
                .Where(x => x.container_id.HasValue)
                .Select(x => x.container_id!.Value).Distinct().ToList();
            var containerList = await _containerRepository.GetContainerByIdsAsync(containerIds);
            var invalidContainerIds = containerIds.Except(containerList.Select(x => x.id)).ToArray();
            if (invalidContainerIds.Length > 0)
            {
                throw new NotFoundException(
                    string.Format(ErrorMessages.ContainerNotFound, nameof(Container.id), string.Join(",", invalidContainerIds)));
            }
            var poDetailList = await GetPoDetailList(poDetailIds.Distinct().ToHashSet());


            foreach (var asn in request.asns)
            {
                var asnHeaderMapped = _mapper.Map<ASNHeader>(asn.asn_header);

                // - Status Flag for both ASN Header and ASN Detail can only be 01:Draft or 02:New

                var seq = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.AdvancedShipmentNotice);
                if (!string.IsNullOrEmpty(asnHeaderMapped.status_flag))
                {
                    asnHeaderMapped.status_flag = request.action == DomainConstant.Action.Submit
                        ? PurchaseOrder.StatusFlag.New
                        : PurchaseOrder.StatusFlag.Draft;
                }

                // - ASN No is formatted as ASNYYMM99999
                asnHeaderMapped.asn_no = $"{SequenceTracking.Type.AdvancedShipmentNotice}{DateTime.Now:yyMM}{seq:00000}";
                asnHeaderMapped.created_by = userId;

                // - estimated_putaway_date: forecast_ex_wh_date + 5
                if (asnHeaderMapped.forecast_ex_wh_date.HasValue)
                {
                    asnHeaderMapped.estimated_putaway_date = asnHeaderMapped.forecast_ex_wh_date.Value.AddDays(5);
                }

                var asnDetailMapped = _mapper.Map<List<ASNDetail>>(asn.asn_details);

                // To indicate if any of the PO Line has Notes to Warehouse
                asnHeaderMapped.notes_to_warehouse_flag = asnDetailMapped.Any(x => !string.IsNullOrEmpty(x.notes_to_warehouse));

                asnHeaderToInsert.Add(asnHeaderMapped);

                #region mapping Invoice
                var invoiceHeaderMapped = new List<InvoiceHeader>();
                if (asn.asn_invoice_id is not null && asn.asn_invoice_id.Count > 0)
                {
                    invoiceHeaderMapped = invoiceHeaders.Where(x => asn.asn_invoice_id.Contains(x.id)).ToList();

                    // invoice's supplier should be the same with asn supplier
                    if (invoiceHeaderMapped.Any(x => x.supplier_id != asnHeaderMapped.supplier_id))
                    {
                        throw new BadRequestException(ErrorMessages.InvoiceSupplierDifferentWithAsn);
                    }

                    var invoiceDetailFromHeader = invoiceDetailsBelongToAsnInvoice
                        .Where(x => asn.asn_invoice_id.Contains(x.invoice_header_id)).ToList();

                    if (invoiceDetailFromHeader.Count > 0)
                    {
                        // Create ASNDetail by grouping invoiceDetail record by po_detail_id and country_of_origin_id. Qty is sum.
                        // TODO: invoice detail to ASN detail
                        var invoiceDetailGrouped = invoiceDetailFromHeader
                            .GroupBy(pkh => new { pkh.po_detail_id, pkh.country_of_origin_id })
                            .Select(pkh => new
                            {
                                pkh.Key.po_detail_id,
                                pkh.Key.country_of_origin_id,
                                qty = pkh.Sum(x => x.qty)
                            }).ToList();

                        foreach (var invoice in invoiceDetailGrouped)
                        {
                            var poDetail = poDetailList.Find(x => x.id == invoice.po_detail_id);

                            if (poDetail is null)
                            {
                                _logger.LogError($"-po_detail_id: {invoice.po_detail_id}, country_of_origin_id: {invoice.country_of_origin_id}");
                                throw new NotFoundException(string.Format(ErrorMessages.PurchaseOrderNotFound, nameof(PODetail.id), invoice.po_detail_id));
                            }

                            var asnDetail = asnDetailMapped.Find(x =>
                                x.po_detail_id == invoice.po_detail_id && x.country_of_origin_id == invoice.country_of_origin_id);

                            if (asnDetail is null)
                            {
                                asnDetailMapped.Add(new ASNDetail
                                {
                                    id = 0,
                                    created_on = DateTime.Now,
                                    created_by = userId,
                                    asn_header_id = 0,
                                    line_no = 0,
                                    po_detail_id = poDetail.po_header_id,
                                    status_flag = DomainConstant.AdvancedShipmentNoticesDetail.StatusFlag.New,
                                    item_id = poDetail.item_id,
                                    qty = invoice.qty,
                                    uom = poDetail.uom,
                                    country_of_origin_id = invoice.country_of_origin_id,
                                    notes_to_warehouse = string.Empty
                                });
                            }
                            else
                            {
                                var asnQtyChanged = asnDetail.qty - invoice.qty;
                                // no change
                                if (asnQtyChanged == 0)
                                {
                                    continue;
                                }

                                asnDetail.qty = invoice.qty;
                            }
                        }
                    }
                }

                #region Removed
                //var asnDetailMappedFromInvoice = new List<ASNDetail>();
                //var invoiceMappings = new List<InvoiceMapping>();
                //if (asn.invoices is not null)
                //{
                //    foreach (var invoiceRequest in asn.invoices)
                //    {
                //        var invoiceHeader = _mapper.Map<InvoiceHeader>(invoiceRequest.invoice_header);
                //        invoiceHeader.created_by = userId;
                //        invoiceHeader.created_on = DateTime.Now;
                //        // total_amt calculated by sum of all line in invoice detail of invoice_detail.qty * invoice_detail.unit_cost
                //        invoiceHeader.total_amt = invoiceRequest.invoice_details?.Sum(pkh => pkh.qty * pkh.unit_cost) ?? 0;

                //        var invoiceDetailsMapped = _mapper.Map<List<InvoiceDetail>>(invoiceRequest.invoice_details);
                //        invoiceDetailsMapped.ForEach(invoiceDetail =>
                //        {
                //            var poDetail = poDetailList.FirstOrDefault(y => y.asnDetailId == invoiceDetail.po_detail_id);
                //            if (poDetail is null)
                //            {
                //                throw new NotFoundException(
                //                    string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.asnDetailId), invoiceDetail.po_detail_id));
                //            }

                //            // - Deduct open_qty of PO Line by invoice Qty
                //            poDetail.open_qty -= invoiceDetail.qty;

                //            // - ASN Qty cannot be more than PO Line open_qty
                //            if (poDetail.open_qty < 0)
                //            {
                //                throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, invoiceDetail.line_no));
                //            }

                //            // - ASN Detail Status Flag will follow PO Header Status Flag
                //            if (string.IsNullOrEmpty(invoiceDetail.status_flag))
                //            {
                //                invoiceDetail.status_flag = asnHeaderMapped.status_flag;
                //            }

                //            // Extended Cost is (unit_cost * qty)
                //            invoiceDetail.extended_cost = (invoiceDetail.unit_cost * invoiceDetail.qty);

                //            invoiceDetail.created_by = userId;
                //            invoiceDetail.created_on = DateTime.Now;
                //        });

                //        var invoiceMapping = new InvoiceMapping()
                //        {
                //            InvoiceHeader = invoiceHeader,
                //            InvoiceDetails = invoiceDetailsMapped
                //        };

                //        invoiceMappings.Add(invoiceMapping);

                //        // Create ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
                //        var lineNo = 0;
                //        asnDetailMappedFromInvoice.AddRange(invoiceDetailsMapped.GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
                //            .Select(pkh => new ASNDetail
                //            {
                //                status_flag = asnHeaderMapped.status_flag,
                //                asn_header_id = asnHeaderMapped.asnDetailId,
                //                item_id = pkh.Key.item_id,
                //                uom = pkh.First().uom,
                //                country_of_origin_id = pkh.Key.country_of_origin_id,
                //                qty = pkh.Sum(y => y.qty),
                //                line_no = ++lineNo,
                //                created_by = userId,
                //                created_on = DateTime.Now
                //            }).ToList());
                //    }
                //} 
                #endregion
                #endregion

                #region Mapping po detail
                var asnPackingDiscrepancy = new List<ASNPackingDiscrepancy>();
                if (asnDetailMapped.Count > 0)
                {
                    var lineNo = 0;
                    foreach (var asnDetail in asnDetailMapped)
                    {
                        var poDetail = poDetailList.Find(y => y.id == asnDetail.po_detail_id);
                        if (poDetail is null)
                        {
                            throw new NotFoundException(
                                string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.id), asnDetail.po_detail_id));
                        }

                        // - Deduct open_qty of PO Line by ASN Qty
                        poDetail.open_qty -= asnDetail.qty;

                        // - ASN Qty cannot be more than PO Line open_qty
                        if (poDetail.open_qty < 0)
                        {
                            throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, asnDetail.line_no));
                        }

                        // - ASN Detail Status Flag will follow PO Header Status Flag
                        if (string.IsNullOrEmpty(asnDetail.status_flag))
                        {
                            asnDetail.status_flag = asnHeaderMapped.status_flag;
                        }
                        asnDetail.line_no = ++lineNo;
                        asnDetail.created_by = userId;
                        asnDetail.created_on = DateTime.Now;
                    }

                    // - Create record in ASNPackingList grouped by item_id and country_of_origin_id for asn_qty. 
                    var asnQty = asnDetailMapped.GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
                        .Select(pkh => new ASNPackingDiscrepancy()
                        {
                            item_id = pkh.Key.item_id,
                            country_of_origin_id = pkh.Key.country_of_origin_id,
                            asn_qty = pkh.Sum(y => y.qty),
                            uom = pkh.FirstOrDefault() != null ? pkh.FirstOrDefault()!.uom : string.Empty,
                            packing_list_qty = 0,
                            created_by = userId,
                            created_on = DateTime.Now,
                        }).ToList();

                    asnPackingDiscrepancy.AddRange(asnQty);
                }
                #endregion

                #region Insert Shipment info
                InboundShipment? inboundShipment = null;
                InboundShipmentRequest? inboundShipmentRequest = null;
                if (asn.shipping_information is not null)
                {
                    #region removed
                    //// - If shipment_arranged_supplier_flag is true, create record in InboundShipment table.
                    //if (asn.asn_header.shipment_arranged_supplier_flag)
                    //{
                    //    var seqIsh = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipment);
                    //    asnInfo.InboundShipment = _mapper.Map<InboundShipment>(asn.shipping_infomation);
                    //    asnInfo.InboundShipment.inbound_shipment_no = $"{SequenceTracking.Type.InboundShipment}{DateTime.Now:yyMM}{seqIsh:00000}";
                    //    asnInfo.InboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.New;
                    //    asnInfo.InboundShipment.created_by = userId;
                    //    asnInfo.InboundShipment.created_on = DateTime.Now;
                    //    inboundShipmentToInsert.Add(asnInfo.InboundShipment);

                    //    // - create record in InboundShipmentBLAWB
                    //    if (!string.IsNullOrEmpty(asn.shipping_infomation.bl_awb_no))
                    //    {
                    //        var inboundShipmentBlAwb = _mapper.Map<InboundShipmentBLAWB>(asn.shipping_infomation);
                    //        inboundShipmentBlAwb.created_by = userId;
                    //        inboundShipmentBlAwb.created_on = DateTime.Now;
                    //        asnInfo.InboundShipmentBlAwb = inboundShipmentBlAwb;
                    //    }
                    //}
                    //// - If shipment_arranged_supplier_flag is false, create record in InboundShipmentRequest table.
                    //else
                    //{
                    //    var seqIsr = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequest);
                    //    asnInfo.InboundShipmentRequest = _mapper.Map<InboundShipmentRequest>(asn.shipping_infomation);
                    //    asnInfo.InboundShipmentRequest.inbound_shipment_request_no = $"{SequenceTracking.Type.InboundShipmentRequest}{DateTime.Now:yyMM}{seqIsr:00000}";
                    //    asnInfo.InboundShipmentRequest.status_flag = InboundShipmentsRequest.StatusFlag.New;
                    //    asnInfo.InboundShipmentRequest.created_by = userId;
                    //    asnInfo.InboundShipmentRequest.created_on = DateTime.Now;

                    //    // - if new_inbound_shipment_group_flag is true then generate a new inbound_shipment_request_group_no in InboundShipmentRequest
                    //    if (asn.asn_header.new_shipment_arranged_supplier_flag)
                    //    {
                    //        var seqIsg =
                    //            await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type
                    //                .InboundShipmentRequestGroup);
                    //        asnInfo.InboundShipmentRequest.inbound_shipment_request_group_no =
                    //            $"{SequenceTracking.Type.InboundShipmentRequestGroup}{DateTime.Now:yyMM}{seqIsg:00000}";
                    //    }
                    //    // - if inbound_shipment_request_group_no is indicated, update inbound_shipment_request_group_no in InboundShipmentRequest 
                    //    else
                    //    {
                    //        asnInfo.InboundShipmentRequest.inbound_shipment_request_group_no = asn.asn_header.inbound_shipment_request_group_no;
                    //    }

                    //    inboundShipmentRequestToInsert.Add(asnInfo.InboundShipmentRequest);
                    //} 
                    #endregion

                    // Shipping Information.
                    switch (asn.shipping_information.bl_awb_provided)
                    {
                        case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.NotAvailable:
                            {
                                // bl_awb_provided: "NA" : asn_header_id.bl_awb_provided: NA
                                asnHeaderMapped.bl_awb_provided = DomainConstant.AdvancedShipmentNotices.BlAwbProvider.NotAvailable;
                                break;
                            }
                        case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.Yes:
                            {
                                // bl_awb_provided: "YES": asn_header_id.bl_awb_provided: Y 
                                asnHeaderMapped.bl_awb_provided = DomainConstant.AdvancedShipmentNotices.BlAwbProvider.Yes;

                                // - Insert into InboundShipment, InboundShipmentASN, InboundShipmentBLAWB
                                var seqIsh = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipment);
                                inboundShipment = _mapper.Map<InboundShipment>(asn.shipping_information);
                                inboundShipment.inbound_shipment_no = $"{SequenceTracking.Type.InboundShipment}{DateTime.Now:yyMM}{seqIsh:00000}";
                                inboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.New;
                                inboundShipment.created_by = userId;
                                inboundShipment.created_on = DateTime.Now;
                                inboundShipmentToInsert.Add(inboundShipment);
                                break;
                            }
                        case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.No:
                            {
                                // bl_awb_provided: "NO":  asn_header_id.bl_awb_provided: N
                                asnHeaderMapped.bl_awb_provided = DomainConstant.AdvancedShipmentNotices.BlAwbProvider.No;

                                // Insert into InboundShipmentRequest
                                var seqIsr = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequest);
                                inboundShipmentRequest = _mapper.Map<InboundShipmentRequest>(asn.shipping_information);
                                inboundShipmentRequest.inbound_shipment_request_no = $"{SequenceTracking.Type.InboundShipmentRequest}{DateTime.Now:yyMM}{seqIsr:00000}";
                                inboundShipmentRequest.status_flag = DomainConstant.InboundShipmentsRequest.StatusFlag.New;
                                inboundShipmentRequest.created_by = userId;
                                inboundShipmentRequest.created_on = DateTime.Now;

                                // - if new_inbound_shipment_group_flag is true then generate a new inbound_shipment_request_group_no in InboundShipmentRequest
                                if (asn.asn_header.new_shipment_arranged_supplier_flag)
                                {
                                    var seqIsg =
                                        await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type
                                            .InboundShipmentRequestGroup);
                                    inboundShipmentRequest.inbound_shipment_request_group_no =
                                        $"{SequenceTracking.Type.InboundShipmentRequestGroup}{DateTime.Now:yyMM}{seqIsg:00000}";
                                }
                                // - if inbound_shipment_request_group_no is indicated, update inbound_shipment_request_group_no in InboundShipmentRequest 
                                else
                                {
                                    inboundShipmentRequest.inbound_shipment_request_group_no = asn.asn_header.inbound_shipment_request_group_no;
                                }

                                inboundShipmentRequestToInsert.Add(inboundShipmentRequest);
                                break;
                            }
                    }
                }
                else
                {
                    asnHeaderMapped.bl_awb_provided = DomainConstant.AdvancedShipmentNotices.BlAwbProvider.NotAvailable;
                }
                #endregion

                var asnInfo = new ASNInfo
                {
                    Header = asnHeaderMapped,
                    Details = asnDetailMapped,
                    ASNPackingLists = asnPackingDiscrepancy,
                    InvoiceHeaders = invoiceHeaderMapped,
                    InboundShipment = inboundShipment,
                    InboundShipmentRequest = inboundShipmentRequest
                };

                #region mapping Container info
                if (asn.containers is not null)
                {
                    asnInfo.Containers = [];
                    asnInfo.ExistingContainers = [];
                    foreach (var container in asn.containers)
                    {
                        if (container.container_id.HasValue)
                        {
                            var existingContainer = containerList.Find(y => y.id == container.container_id.Value);

                            if (existingContainer is null)
                            {
                                throw new NotFoundException(ErrorMessages.ContainerNotFound);
                            }

                            asnInfo.ExistingContainers.Add(existingContainer);
                        }
                        else
                        {
                            // - Container No can be blank if shipment_type is L: Loose
                            if (container.shipment_type != DomainConstant.Containers.ShipmentType.Loose && string.IsNullOrEmpty(container.container_no))
                            {
                                throw new BadRequestException(ErrorMessages.ContainerNoBlank);
                            }

                            asnInfo.Containers.Add(_mapper.Map<Container>(container));
                        }
                    }
                }
                #endregion

                #region Mapping packing list info
                //if (asn.packing_lists is not null)
                //{
                //    asnInfo.PackingListMappings = [];
                //    asnInfo.ASNPackingLists = [];
                //    asnInfo.Details = [];
                //    // - Create record in ASNPackingList grouped by item_id and country_of_origin_id for asn_qty. 
                //    var asnQty = asnDetailMapped.GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
                //        .Select(pkh => new ASNPackingList
                //        {
                //            item_id = pkh.Key.item_id,
                //            country_of_origin_id = pkh.Key.country_of_origin_id,
                //            asn_qty = pkh.Sum(y => y.qty),
                //            packing_list_qty = 0
                //        }).ToList();

                //    // - If there are packing list information, grouped by item_id and country_of_origin_id for packing_list_qty.
                //    var packingListMappings = asn.packing_lists.Select(pkh => new ContainerPackingListMapping
                //    {
                //        container_no = pkh.container_no,
                //        PackingLists = _mapper.Map<List<PackingList>>(pkh.packing_lists)
                //    }).ToList();
                //    asnInfo.PackingListMappings.AddRange(packingListMappings);

                //    var packingLists = packingListMappings.SelectMany(pkh => pkh.PackingLists);

                //    var packingListQty = packingLists.GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
                //        .Select(pkh => new ASNPackingList
                //        {
                //            item_id = pkh.Key.item_id,
                //            country_of_origin_id = pkh.Key.country_of_origin_id,
                //            packing_list_qty = pkh.Sum(y => y.qty),
                //            asn_qty = 0
                //        });

                //    var asnPackingLists = asnQty.Concat(packingListQty)
                //        .GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
                //        .Select(g => new ASNPackingList
                //        {
                //            item_id = g.Key.item_id,
                //            country_of_origin_id = g.Key.country_of_origin_id,
                //            asn_qty = g.Sum(pkh => pkh.asn_qty),
                //            packing_list_qty = g.Sum(pkh => pkh.packing_list_qty),
                //            created_by = userId,
                //            created_on = DateTime.Now
                //        }).ToList();
                //    asnInfo.ASNPackingLists.AddRange(asnPackingLists);

                //    // Update ASNDetail.packing_list_qty based on packing_lists items.
                //    foreach (var asnDetail in asnDetailMapped)
                //    {
                //        var asnPackingList = asnPackingLists.Find(pkh => pkh.item_id == asnDetail.item_id && pkh.country_of_origin_id == asnDetail.country_of_origin_id);
                //        if (asnPackingList is not null)
                //        {
                //            asnDetail.packing_list_qty = asnPackingList.packing_list_qty;
                //        }
                //    }
                //    asnInfo.Details.AddRange(asnDetailMapped);
                //}
                #endregion

                asnInfos.Add(asnInfo);
            }

            try
            {
                var numberOfAsnHeaderToInsert = asnInfos.Select(x => x.Header).Count();
                if (numberOfAsnHeaderToInsert == 0)
                {
                    _logger.LogWarning("No ASN header data to insert");
                    return [];
                }

                _unitOfWork.BeginTransaction();

                if (inboundShipmentToInsert.Count > 0)
                {
                    await _inboundShipmentRepository.CreateRangeAsync(inboundShipmentToInsert);
                    _logger.LogInformation($"Created {inboundShipmentToInsert.Count} InboundShipments");
                }

                if (inboundShipmentRequestToInsert.Count > 0)
                {
                    await _inboundShipmentRequestRepository.CreateRangeAsync(inboundShipmentRequestToInsert);
                    _logger.LogInformation($"Created {inboundShipmentRequestToInsert.Count} InboundShipmentRequests");
                }

                #region - Update inbound_shipment_id OR inbound_shipment_request_id in ASNHeader
                //if (inboundShipmentToInsert.Count > 0 || inboundShipmentRequestToInsert.Count > 0)
                //{
                //    foreach (var asnInfo in asnInfos)
                //    {
                //        // - Update inbound_shipment_id OR inbound_shipment_request_id in ASNHeader
                //        asnInfo.Header.inbound_shipment_id = asnInfo.InboundShipment?.asnDetailId;
                //        asnInfo.Header.inbound_shipment_request_id = asnInfo.InboundShipmentRequest?.asnDetailId;
                //        asnHeaderToInsert.Add(asnInfo.Header);

                //        // - Update inbound_shipment_id in BlAWB
                //        if (asnInfo.InboundShipmentBlAwb is not null && asnInfo.InboundShipment is not null)
                //        {
                //            asnInfo.InboundShipmentBlAwb.inbound_shipment_id = asnInfo.InboundShipment.asnDetailId;
                //            inboundShipmentBlAwbToInsert.Add(asnInfo.InboundShipmentBlAwb);
                //        }
                //    }
                //}

                //if (inboundShipmentBlAwbToInsert.Count > 0)
                //{
                //    await _inboundShipmentBlAwbRepository.CreateRangeAsync(inboundShipmentBlAwbToInsert);
                //} 
                #endregion

                if (asnHeaderToInsert.Count > 0)
                {
                    await _asnHeaderRepository.CreateRangeAsync(asnHeaderToInsert);
                    _logger.LogInformation($"Created {asnHeaderToInsert.Count} ASN headers");
                }

                await _unitOfWork.SaveChangesAsync();

                var asnDetailToInsert = new List<ASNDetail>();
                var containerToInsert = new List<Container>();
                var asnPackingDiscrepancyToInsert = new List<ASNPackingDiscrepancy>();
                var inboundShipmentAsnToInsert = new List<InboundShipmentASN>();
                foreach (var asnInfo in asnInfos)
                {
                    #region Update asn_header_id for asn_detail
                    if (asnInfo.Details is not null)
                    {
                        asnInfo.Details.ForEach(x =>
                        {
                            x.asn_header_id = asnInfo.Header.id;
                        });

                        asnDetailToInsert.AddRange(asnInfo.Details);
                    }
                    #endregion

                    #region update for invoices
                    //if (asnInfo.InvoiceMapping is not null)
                    //{
                    //    asnInfo.InvoiceMapping.ForEach(pkh =>
                    //    {
                    //        pkh.InvoiceHeader.asn_header_id = asnInfo.Header.asnDetailId;
                    //    });

                    //    invoiceHeaderToInsert.AddRange(asnInfo.InvoiceMapping.Select(pkh => pkh.InvoiceHeader));
                    //}
                    if (asnInfo.InvoiceHeaders is not null && asnInfo.InvoiceHeaders.Count > 0)
                    {
                        asnInfo.InvoiceHeaders.ForEach(x =>
                        {
                            x.asn_header_id = asnInfo.Header.id;
                            x.last_modified_by = userId;
                            x.last_modified_on = DateTime.Now;
                        });
                        invoiceHeadersToUpdate.AddRange(asnInfo.InvoiceHeaders);
                    }
                    #endregion

                    #region Update asn_header_id for Container
                    if (asnInfo.Containers is not null)
                    {
                        foreach (var container in asnInfo.Containers)
                        {
                            //containerToDelete.asn_header_id = asnInfo.Header.id;
                            container.created_by = userId;
                            container.created_on = DateTime.Now;
                            container.status_flag = DomainConstant.Containers.StatusFlag.Incoming;

                            containerToInsert.Add(container);
                        }
                    }
                    #endregion

                    #region ASN Packing list
                    // update asn_header_id for AsnPackingList
                    if (asnInfo.ASNPackingLists is not null)
                    {
                        foreach (var asnPackingList in asnInfo.ASNPackingLists)
                        {
                            asnPackingList.asn_header_id = asnInfo.Header.id;
                            asnPackingDiscrepancyToInsert.Add(asnPackingList);
                        }
                    }
                    #endregion

                    #region InboundShipment ASN

                    if (asnInfo.InboundShipment is not null && inboundShipmentToInsert.Count > 0)
                    {
                        inboundShipmentAsnToInsert.Add(new InboundShipmentASN
                        {
                            created_on = DateTime.Now,
                            created_by = userId,
                            inbound_shipment_id = asnInfo.InboundShipment.id,
                            asn_header_id = asnInfo.Header.id
                        });
                    }
                    #endregion
                }

                if (inboundShipmentAsnToInsert.Count > 0)
                {
                    await _inboundShipmentAsnRepository.CreateRangeAsync(inboundShipmentAsnToInsert);
                    _logger.LogInformation($"Created {inboundShipmentAsnToInsert.Count} Inbound shipment ASN");
                }

                if (asnPackingDiscrepancyToInsert.Count > 0)
                {
                    await _asnPackingDiscrepancyRepository.CreateRangeAsync(asnPackingDiscrepancyToInsert);
                    _logger.LogInformation($"Created {asnPackingDiscrepancyToInsert.Count} ASN packing lists");
                }

                if (containerToInsert.Count > 0)
                {
                    await _containerRepository.CreateRangeAsync(containerToInsert);
                    await _unitOfWork.SaveChangesAsync();

                    #region Container ASN
                    var containerAsnToInsert = new List<ContainerASN>();
                    var packingNumber = 0;
                    foreach (var asnInfo in asnInfos)
                    {
                        if (asnInfo.Containers is not null && asnInfo.Containers.Count > 0)
                        {
                            var containerAsn = asnInfo.Containers.Select(x => new ContainerASN
                            {
                                id = 0,
                                created_on = DateTime.Now,
                                created_by = userId,
                                asn_header_id = asnInfo.Header.id,
                                container_id = x.id,
                                packing_list_no = $"PL-{x.container_no}-{++packingNumber:D2}"
                            });
                            containerAsnToInsert.AddRange(containerAsn);
                        }

                        if (asnInfo.ExistingContainers is not null && asnInfo.ExistingContainers.Count > 0)
                        {
                            var containerAsn = asnInfo.ExistingContainers.Select(x => new ContainerASN
                            {
                                id = 0,
                                created_on = DateTime.Now,
                                created_by = userId,
                                asn_header_id = asnInfo.Header.id,
                                container_id = x.id,
                                packing_list_no = $"PL-{x.container_no}-{++packingNumber:D2}"
                            });
                            containerAsnToInsert.AddRange(containerAsn);
                        }
                    }

                    if (containerAsnToInsert.Count > 0)
                    {
                        await _containerAsnRepository.CreateRangeAsync(containerAsnToInsert);
                        _logger.LogInformation($"Created {containerAsnToInsert.Count} Container ASN");

                        var packingHeaderToInsert = containerAsnToInsert.Select(x => new PackingHeader
                        {
                            container_id = x.container_id,
                            asn_header_id = x.asn_header_id,
                            created_by = userId,
                            created_on = DateTime.Now
                        }).ToList();

                        await _packingHeaderRepository.CreateRangeAsync(packingHeaderToInsert);
                        _logger.LogInformation($"Created {packingHeaderToInsert.Count} Packing Header");
                    }
                    #endregion
                }

                #region update container_id for PackingList
                //var packingListDetailToInsert = new List<PackingList>();
                //foreach (var asnInfo in asnInfos)
                //{
                //    if (asnInfo.PackingListMappings is not null)
                //    {
                //        foreach (var packingListMappingItem in asnInfo.PackingListMappings)
                //        {
                //            if (!dicContainerIdByContainerNo.TryGetValue(packingListMappingItem.container_no, out int containerId))
                //            {
                //                containerId = containerToInsert.Find(pkh => pkh.container_no == packingListMappingItem.container_no)?.id ?? 0;
                //            }

                //            if (containerId == 0)
                //            {
                //                _logger.LogError($"Container {packingListMappingItem.container_no} not found");
                //                continue;
                //            }

                //            packingListMappingItem.PackingLists.ForEach(pkh =>
                //            {
                //                pkh.container_id = containerId;
                //                pkh.created_by = userId;
                //                pkh.created_on = DateTime.Now;
                //            });

                //            packingListDetailToInsert.AddRange(packingListMappingItem.PackingLists);
                //        }
                //    }
                //} 
                #endregion

                //if (packingListDetailToInsert.Count > 0)
                //{
                //    await _packingListRepository.CreateRangeAsync(packingListDetailToInsert);
                //    _logger.LogInformation($"Created {packingListDetailToInsert.Count} packing lists");
                //}

                //if (invoiceHeaderToInsert.Count > 0)
                //{
                //    await _invoiceHeaderRepository.CreateRangeAsync(invoiceHeaderToInsert);
                //    await _unitOfWork.SaveChangesAsync();
                //}

                #region - Update invoice_header_id in InvoiceDetail
                //var invoiceDetailsToInsert = new List<InvoiceDetail>();
                //foreach (var asnInfo in asnInfos)
                //{
                //    if (asnInfo.InvoiceMapping == null) continue;
                //    foreach (var invoiceMappingItem in asnInfo.InvoiceMapping)
                //    {
                //        if (invoiceMappingItem.InvoiceDetails is null)
                //        {
                //            continue;
                //        }

                //        foreach (var invoiceDetail in invoiceMappingItem.InvoiceDetails)
                //        {
                //            invoiceDetail.invoice_header_id = invoiceMappingItem.InvoiceHeader.asnDetailId;
                //            invoiceDetail.created_by = userId;
                //            invoiceDetail.created_on = DateTime.Now;
                //        }

                //        invoiceDetailsToInsert.AddRange(invoiceMappingItem.InvoiceDetails);
                //    }
                //} 
                #endregion

                //if (invoiceDetailsToInsert.Count > 0)
                //{
                //    await _invoiceDetailRepository.CreateRangeAsync(invoiceDetailsToInsert);
                //}

                if (asnDetailToInsert.Count > 0)
                {
                    await _asnDetailRepository.CreateRangeAsync(asnDetailToInsert);
                    _logger.LogInformation($"Created {asnDetailToInsert.Count} ASN details");
                }

                if (poDetailList.Count > 0)
                {
                    await _poDetailRepository.UpdateRangeAsync(poDetailList);
                    _logger.LogInformation($"Updated {poDetailList.Count} PO details");
                }

                if (invoiceHeadersToUpdate.Count > 0)
                {
                    await _invoiceHeaderRepository.UpdateRangeAsync(invoiceHeadersToUpdate);
                    _logger.LogInformation($"Updated {invoiceHeadersToUpdate.Count} invoice headers");
                }

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.ToString());
                throw;
            }

            return asnHeaderToInsert.Select(x => x.id).ToArray();
        }

        public async Task UpdateAsnAsync(string userId, UpdateASNRequestDto request)
        {
            await ValidateAsnRequest(request.asns.Select(x => new ValidateASNRequest
            {
                header = _mapper.Map<ASNHeaderViewModel>(x.asn_header),
                details = _mapper.Map<List<ASNDetailViewModel>>(x.asn_details),
            }).ToList());

            var poDetailToUpdate = new List<PODetail>();
            var asnHeaderToUpdate = new List<ASNHeader>();
            var asnDetailToInsert = new List<ASNDetail>();
            var asnDetailToUpdate = new List<ASNDetail>();
            var asnDetailToDelete = new List<ASNDetail>();
            var asnPackingListToInsert = new List<ASNPackingDiscrepancy>();
            var asnPackingListToUpdate = new List<ASNPackingDiscrepancy>();
            var asnPackingListToDelete = new List<ASNPackingDiscrepancy>();
            //var inboundShipmentToInsert = new List<InboundShipment>();
            //var inboundShipmentToUpdate = new List<InboundShipment>();
            //var inboundShipmentBlAwbToInsert = new List<InboundShipmentBLAWB>();
            //var inboundShipmentBlAwbToUpdate = new List<InboundShipmentBLAWB>();

            //var inboundShipmentRequestToInsert = new List<InboundShipmentRequest>();
            //var inboundShipmentRequestToUpdate = new List<InboundShipmentRequest>();

            //var asnInfos = new List<ASNInfo>();

            var asnHeaderIds = request.asns.Select(x => x.asn_header.id).Distinct().ToHashSet();
            var dicAsnHeader = new Dictionary<int, ASNHeader>();
            if (asnHeaderIds.Count > 0)
            {
                dicAsnHeader = await _asnHeaderRepository.GetDictionaryAsync(x => asnHeaderIds.Contains(x.id));
            }

            var dicAsnHeaderHasAttachmentCheck = await _asnFileRepository.HasAttachmentCheck(asnHeaderIds);
            var asnDetailIds = request.asns.SelectMany(x => x.asn_details).Select(x => x.id).ToList();
            var deleteDetailId = request.asns.Where(x => x.delete_detail_id is not null)
                .SelectMany(x => x.delete_detail_id!).ToList();
            if (deleteDetailId.Count > 0)
            {
                asnDetailIds.AddRange(deleteDetailId);
            }
            var poDetailIds = request.asns.SelectMany(x => x.asn_details!)
                .Select(x => x.po_detail_id).ToList();
            var dicAsnDetail = new Dictionary<int, ASNDetail>();
            var lineNo = 0;
            if (asnDetailIds.Count > 0)
            {
                dicAsnDetail = await _asnDetailRepository.GetDictionaryAsync(x => asnDetailIds.Contains(x.id));
                if (dicAsnDetail.Values.Count > 0)
                {
                    lineNo = dicAsnDetail.Values.Max(x => x.line_no);
                    poDetailIds.AddRange(dicAsnDetail.Values.Select(x => x.po_detail_id).ToList());
                }
            }

            //foreach (var detailId in deleteDetailId)
            //{
            //    if (!dicAsnDetail.TryGetValue(detailId, out var invoiceDetail))
            //    {
            //        throw new NotFoundException(string.Format(ErrorMessages.InvoiceDetailNotFound, nameof(detailId), detailId));
            //    }

            //    asnDetailToDelete.Add(invoiceDetail);
            //}

            var poDetailList = await GetPoDetailList(poDetailIds.Distinct().ToHashSet());

            //var inboundShipmentIds = request.asns.Select(pkh => pkh.asn_header.inbound_shipment_id).Distinct().ToHashSet();
            //var inboundShipmentList = await GetInboundShipment(inboundShipmentIds);
            //var inboundShipmentBlAwbList = await GetInboundShipmentBlAwbList(inboundShipmentIds);

            //var inboundShipmentRequestIds = request.asns.Select(pkh => pkh.asn_header.inbound_shipment_request_id).Distinct().ToHashSet();
            //var inboundShipmentRequestList = await GetInboundShipmentRequest(inboundShipmentRequestIds);

            var asnPackingDiscrepancies = await _asnPackingDiscrepancyRepository.GetAsnPackingDiscrepancytByAsnHeaderIdsAsync(asnHeaderIds);

            foreach (var asnInfoUpdateRequest in request.asns)
            {
                dicAsnHeader.TryGetValue(asnInfoUpdateRequest.asn_header.id, out var asnHeader);
                if (asnHeader is null)
                {
                    throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
                        string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id),
                            asnInfoUpdateRequest.asn_header.id));
                }

                _mapper.Map(asnInfoUpdateRequest.asn_header, asnHeader);
                UpdateAsnHeader(asnHeader, asnInfoUpdateRequest);
                asnHeader.last_modified_by = userId;
                asnHeader.last_modified_on = DateTime.Now;

                //var asnInfo = new ASNInfo
                //{
                //    Header = asnHeader
                //};

                #region Update shipment info
                //if (asnInfoUpdateRequest.shipment_info is not null)
                //{
                //    // - If shipment_arranged_supplier_flag is true
                //    if (asnInfoUpdateRequest.asn_header.shipment_arranged_supplier_flag)
                //    {
                //        // - if ASNHeader.inbound_shipment_id is blank, create record in InboundShipment table
                //        if (asnHeader.inbound_shipment_id.HasValue == false || asnHeader.inbound_shipment_id == 0)
                //        {
                //            var inboundShipment = _mapper.Map<InboundShipment>(asnInfoUpdateRequest.shipment_info);
                //            var seq = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipment);
                //            // - inbound Shipment Request No is formatted as ISHYYMM99999
                //            // - Status Flag will be 0:New 
                //            inboundShipment.inbound_shipment_no = $"{SequenceTracking.Type.InboundShipment}{DateTime.Now:yyMM}{seq:00000}";
                //            inboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.New;
                //            //inboundShipment.branch_plant_id = asnInfoUpdateRequest.asn_header.branch_plant_id;
                //            inboundShipment.created_by = userId;
                //            inboundShipment.created_on = DateTime.Now;

                //            inboundShipmentToInsert.Add(inboundShipment);
                //            asnInfo.InboundShipment = inboundShipment;

                //            // - create record in InboundShipmentBLAWB
                //            if (!string.IsNullOrEmpty(asnInfoUpdateRequest.shipment_info.bl_awb_no))
                //            {
                //                var inboundShipmentBlAwb = _mapper.Map<InboundShipmentBLAWB>(asnInfoUpdateRequest.shipment_info);
                //                inboundShipmentBlAwb.created_by = userId;
                //                inboundShipmentBlAwb.created_on = DateTime.Now;
                //                asnInfo.InboundShipmentBlAwb = inboundShipmentBlAwb;
                //            }
                //        }
                //        // - if ASNHeader.inbound_shipment_id is not blank, update record in InboundShipment to status 0:New
                //        else
                //        {
                //            var existedInboundShipment = inboundShipmentList.Find(pkh => pkh.asnDetailId == asnHeader.inbound_shipment_id.Value);

                //            if (existedInboundShipment is not null)
                //            {
                //                _mapper.Map(asnInfoUpdateRequest.shipment_info, existedInboundShipment);
                //                existedInboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.New;
                //                existedInboundShipment.last_modified_by = userId;
                //                existedInboundShipment.last_modified_on = DateTime.Now;

                //                inboundShipmentToUpdate.Add(existedInboundShipment);

                //                // update or create InboundShipmentBlAwb
                //                // [SE-101]: Save the data for BL/AWB No. and Vessel / Voyage / Flight No
                //                // For update, if the field is blank, we must update blank to backend. 
                //                if (!string.IsNullOrEmpty(asnInfoUpdateRequest.shipment_info.bl_awb_no))
                //                {
                //                    var existedInboundShipmentBlAwb = inboundShipmentBlAwbList.Find(pkh => pkh.inbound_shipment_id == asnHeader.inbound_shipment_id.Value);
                //                    if (existedInboundShipmentBlAwb is not null)
                //                    {
                //                        _mapper.Map(asnInfoUpdateRequest.shipment_info, existedInboundShipmentBlAwb);
                //                        existedInboundShipmentBlAwb.last_modified_by = userId;
                //                        existedInboundShipmentBlAwb.last_modified_on = DateTime.Now;
                //                        inboundShipmentBlAwbToUpdate.Add(existedInboundShipmentBlAwb);
                //                    }
                //                    else
                //                    {
                //                        existedInboundShipmentBlAwb = _mapper.Map<InboundShipmentBLAWB>(asnInfoUpdateRequest.shipment_info);
                //                        existedInboundShipmentBlAwb.inbound_shipment_id = asnHeader.inbound_shipment_id.Value;
                //                        existedInboundShipmentBlAwb.created_by = userId;
                //                        existedInboundShipmentBlAwb.created_on = DateTime.Now;
                //                        inboundShipmentBlAwbToInsert.Add(existedInboundShipmentBlAwb);
                //                        asnInfo.InboundShipmentBlAwb = existedInboundShipmentBlAwb;
                //                    }
                //                }
                //            }
                //        }

                //        // - If ASNHeader.inbound_shipment_request_id is not blank, update InboundShipmentRequest record  to status 90:Cancelled
                //        if (asnHeader.inbound_shipment_request_id.HasValue)
                //        {
                //            var existedInboundShipmentRequest = inboundShipmentRequestList.FirstOrDefault(pkh => pkh.asnDetailId == asnHeader.inbound_shipment_request_id.Value);
                //            if (existedInboundShipmentRequest is not null)
                //            {
                //                existedInboundShipmentRequest.status_flag = DomainConstant.InboundShipments.StatusFlag.Cancelled;
                //                existedInboundShipmentRequest.last_modified_by = userId;
                //                existedInboundShipmentRequest.last_modified_on = DateTime.Now;

                //                inboundShipmentRequestToUpdate.Add(existedInboundShipmentRequest);
                //            }
                //        }
                //    }
                //    // - If shipment_arranged_supplier_flag is false
                //    else
                //    {
                //        // - if ASNHeader.inbound_shipment_request_id is blank, create record in InboundShipmentRequest table
                //        if (asnHeader.inbound_shipment_request_id.HasValue == false || asnHeader.inbound_shipment_request_id == 0)
                //        {
                //            var inboundShipmentRequest = _mapper.Map<InboundShipmentRequest>(asnInfoUpdateRequest.shipment_info);
                //            var seq = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequest);
                //            // - inbound Shipment Request No is formatted as ISRYYMM99999
                //            // - Status Flag will be 0:New 
                //            inboundShipmentRequest.inbound_shipment_request_no = $"{SequenceTracking.Type.InboundShipmentRequest}{DateTime.Now:yyMM}{seq:00000}";
                //            inboundShipmentRequest.status_flag = InboundShipmentsRequest.StatusFlag.New;
                //            //inboundShipmentRequest.branch_plant_id = asnInfoUpdateRequest.asn_header.branch_plant_id;
                //            inboundShipmentRequest.created_by = userId;
                //            inboundShipmentRequest.created_on = DateTime.Now;

                //            // - if new_inbound_shipment_group_flag is true then generate a new inbound_shipment_request_group_no in InboundShipmentRequest
                //            if (asnInfoUpdateRequest.asn_header.new_shipment_arranged_supplier_flag)
                //            {
                //                var seqIsg =
                //                    await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequestGroup);
                //                inboundShipmentRequest.inbound_shipment_request_group_no =
                //                    $"{SequenceTracking.Type.InboundShipmentRequestGroup}{DateTime.Now:yyMM}{seqIsg:00000}";
                //            }
                //            // - if inbound_shipment_request_group_no is indicated, update inbound_shipment_request_group_no in InboundShipmentRequest 
                //            else
                //            {
                //                inboundShipmentRequest.inbound_shipment_request_group_no = asnInfoUpdateRequest.asn_header.inbound_shipment_request_group_no;
                //            }

                //            inboundShipmentRequestToInsert.Add(inboundShipmentRequest);
                //            asnInfo.InboundShipmentRequest = inboundShipmentRequest;
                //        }
                //        // - if ASNHeader.inbound_shipment_request_id is not blank, update record in InboundShipmentRequest to status 0:New
                //        else
                //        {
                //            var existedInboundShipmentRequest = inboundShipmentRequestList.FirstOrDefault(pkh => pkh.asnDetailId == asnHeader.inbound_shipment_request_id.Value);

                //            if (existedInboundShipmentRequest is not null)
                //            {
                //                _mapper.Map(asnInfoUpdateRequest.shipment_info, existedInboundShipmentRequest);
                //                existedInboundShipmentRequest.status_flag = InboundShipmentsRequest.StatusFlag.New;
                //                existedInboundShipmentRequest.last_modified_by = userId;
                //                existedInboundShipmentRequest.last_modified_on = DateTime.Now;

                //                // - if new_inbound_shipment_group_flag is true then generate a new inbound_shipment_request_group_no in InboundShipmentRequest
                //                if (asnInfoUpdateRequest.asn_header.new_shipment_arranged_supplier_flag)
                //                {
                //                    var seqIsg =
                //                        await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequestGroup);
                //                    existedInboundShipmentRequest.inbound_shipment_request_group_no =
                //                        $"{SequenceTracking.Type.InboundShipmentRequestGroup}{DateTime.Now:yyMM}{seqIsg:00000}";
                //                }
                //                // - if inbound_shipment_request_group_no is indicated, update inbound_shipment_request_group_no in InboundShipmentRequest 
                //                else
                //                {
                //                    existedInboundShipmentRequest.inbound_shipment_request_group_no = asnInfoUpdateRequest.asn_header.inbound_shipment_request_group_no;
                //                }
                //                inboundShipmentRequestToUpdate.Add(existedInboundShipmentRequest);
                //            }
                //        }

                //        // - If ASNHeader.inbound_shipment_id is not blank, update InboundShipment record  to status 90:Cancelled
                //        if (asnHeader.inbound_shipment_id.HasValue)
                //        {
                //            var existedInboundShipment = inboundShipmentList.FirstOrDefault(pkh => pkh.asnDetailId == asnHeader.inbound_shipment_id.Value);
                //            if (existedInboundShipment is not null)
                //            {
                //                existedInboundShipment.status_flag = InboundShipmentsRequest.StatusFlag.Cancelled;
                //                existedInboundShipment.last_modified_by = userId;
                //                existedInboundShipment.last_modified_on = DateTime.Now;

                //                inboundShipmentToUpdate.Add(existedInboundShipment);
                //            }
                //        }
                //    }
                //}
                #endregion

                //asnInfos.Add(asnInfo);
                var asnDetailRecordToInsert = new List<ASNDetail>();
                var asnDetailRecordToUpdate = new List<ASNDetail>();
                var asnPackingDiscrepancyBelongToAsnHeader = asnPackingDiscrepancies.Where(x => x.asn_header_id == asnInfoUpdateRequest.asn_header.id).ToList();
                foreach (var asnDetailUpdateRequest in asnInfoUpdateRequest.asn_details)
                {
                    var mode = Mode.Update;
                    dicAsnDetail.TryGetValue(asnDetailUpdateRequest.id, out var asnDetail);

                    if (asnDetail is null)
                    {
                        mode = Mode.Insert;
                        asnDetail = new ASNDetail();
                    }

                    _mapper.Map(asnDetailUpdateRequest, asnDetail);

                    var poDetail = poDetailList.Find(y => y.id == asnDetail.po_detail_id);
                    if (poDetail is null)
                    {
                        throw new NotFoundException(
                            string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.id), asnDetail.po_detail_id));
                    }

                    switch (mode)
                    {
                        case Mode.Insert:
                            {
                                asnDetail.qty = asnDetailUpdateRequest.qty;
                                // - Deduct open_qty of PO Line by ASN Qty
                                poDetail.open_qty -= asnDetail.qty;

                                // - ASN Qty cannot be more than PO Line open_qty
                                if (poDetail.open_qty < 0)
                                {
                                    throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds,
                                        asnDetail.line_no));
                                }

                                poDetail.last_modified_by = userId;
                                poDetail.last_modified_on = DateTime.Now;
                                poDetailToUpdate.Add(poDetail);

                                asnDetail.line_no = ++lineNo;
                                asnDetail.created_by = userId;
                                asnDetail.asn_header_id = asnHeader.id;
                                asnDetailRecordToInsert.Add(asnDetail);
                                break;
                            }
                        case Mode.Update:
                            {
                                // If ASN Detail qty is modified, get the difference from the previous qty and add back to PO Line open_qty.
                                // Example change qty from 6 to 5. Change is -1. Add this back to open_qty which is -1 in this case.
                                // OR change qty from 6 to 7, Add this back to open_qty which is 1.

                                /* Test cases
                                 * Qty: 6, change Qty: 6 -> 0
                                 * not changed

                                 *when modified:
                                   const X = Old ASN - New ASN
                                   new open_qty = old open_qty + X
                                   Old - New
                                 */
                                var asnQtyChanged = asnDetail.qty - asnDetailUpdateRequest.qty;

                                if (asnQtyChanged != 0)
                                {
                                    poDetail.open_qty += asnQtyChanged;
                                    asnDetail.qty = asnDetailUpdateRequest.qty;
                                }

                                asnDetail.last_modified_by = userId;
                                asnDetail.last_modified_on = DateTime.Now;
                                asnDetailRecordToUpdate.Add(asnDetail);

                                // - ASN Qty cannot be more than PO Line open_qty
                                if (poDetail.open_qty < 0)
                                {
                                    throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, asnDetail.line_no));
                                }
                                poDetail.last_modified_by = userId;
                                poDetail.last_modified_on = DateTime.Now;
                                poDetailToUpdate.Add(poDetail);
                                break;
                            }
                    }// End of switch mode
                }// End of foreach ASN Detail

                HandleUpdateAsnQtyForAsnPackingList(
                    userId: userId,
                    asnHeaderId: asnHeader.id,
                    packingListBelongToAsnHeader: asnPackingDiscrepancyBelongToAsnHeader,
                    asnDetailRecordToInsert: asnDetailRecordToInsert,
                    asnDetailRecordToUpdate: asnDetailRecordToUpdate,
                    asnDetailRecordToDelete: null,
                    ref asnPackingListToInsert,
                    ref asnPackingListToUpdate,
                    ref asnPackingListToDelete
                );


                // To indicate if PO has attachment
                if (!dicAsnHeaderHasAttachmentCheck.TryGetValue(asnHeader.id, out var hasAttachment))
                {
                    hasAttachment = false;
                }
                asnHeader.attachment_flag = hasAttachment;
                // To indicate if any of the PO Line has Notes to Warehouse
                var asnDetails = asnDetailRecordToInsert.Concat(asnDetailRecordToUpdate).ToList();
                asnHeader.notes_to_warehouse_flag = asnDetails.Any(x => !string.IsNullOrEmpty(x.notes_to_warehouse));
                asnHeaderToUpdate.Add(asnHeader);
                asnDetailToInsert.AddRange(asnDetailRecordToInsert);
                asnDetailToUpdate.AddRange(asnDetailRecordToUpdate);

                // Handle delete asn detail
                if (asnInfoUpdateRequest.delete_detail_id is not null && asnInfoUpdateRequest.delete_detail_id.Count > 0)
                {
                    var asnDetailRecordWasAffected = new List<ASNDetail>();
                    foreach (var asnDetailId in asnInfoUpdateRequest.delete_detail_id)
                    {
                        // TODO: Check delete_detail_id was included in update list
                        dicAsnDetail.TryGetValue(asnDetailId, out var asnDetail);
                        if (asnDetail is null)
                        {
                            throw new BadRequestException(ErrorCodes.ASNDetailNotFound, string.Format(ErrorMessages.ASNDetailCanNotDelete, asnDetailId));
                        }

                        // - Add open_qty of PO Line by ASN Qty
                        var poDetail = poDetailList.Find(y => y.id == asnDetail.po_detail_id);
                        if (poDetail is null)
                        {
                            throw new NotFoundException(string.Format(ErrorMessages.PODetailNotFound));
                        }
                        poDetail.open_qty += asnDetail.qty;
                        poDetail.last_modified_by = userId;
                        poDetail.last_modified_on = DateTime.Now;
                        poDetailToUpdate.Add(poDetail);

                        switch (asnDetail.status_flag)
                        {
                            case DomainConstant.AdvancedShipmentNotices.StatusFlag.New:
                                {
                                    // - Update ASN Detail to status 90: Cancelled if status is 02: New
                                    asnDetail.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
                                    asnDetail.last_modified_by = userId;
                                    asnDetail.last_modified_on = DateTime.Now;
                                    asnDetailToUpdate.Add(asnDetail);
                                    break;
                                }
                            case DomainConstant.AdvancedShipmentNotices.StatusFlag.Draft:
                                {
                                    // - Delete ASN Detail if status is 01: Draft
                                    asnDetailToDelete.Add(asnDetail);
                                    break;
                                }
                        }

                        asnDetailRecordWasAffected.Add(asnDetail);
                    }

                    HandleUpdateAsnQtyForAsnPackingList(
                        userId: userId,
                        asnHeaderId: asnHeader.id,
                        packingListBelongToAsnHeader: asnPackingDiscrepancyBelongToAsnHeader,
                        asnDetailRecordToInsert: null,
                        asnDetailRecordToUpdate: null,
                        asnDetailRecordToDelete: asnDetailRecordWasAffected,
                        ref asnPackingListToInsert,
                        ref asnPackingListToUpdate,
                        ref asnPackingListToDelete
                    );
                }// End of Handle delete asn detail
            }// End of foreach ASN Info

            try
            {
                _unitOfWork.BeginTransaction();
                //if (inboundShipmentRequestToInsert.Count > 0)
                //{
                //    await _inboundShipmentRequestRepository.CreateRangeAsync(inboundShipmentRequestToInsert);
                //    await _unitOfWork.SaveChangesAsync();
                //}

                //if (inboundShipmentRequestToUpdate.Count > 0)
                //{
                //    await _inboundShipmentRequestRepository.UpdateRangeAsync(inboundShipmentRequestToUpdate);
                //}

                //if (inboundShipmentToInsert.Count > 0)
                //{
                //    await _inboundShipmentRepository.CreateRangeAsync(inboundShipmentToInsert);
                //    await _unitOfWork.SaveChangesAsync();
                //}

                //if (inboundShipmentToUpdate.Count > 0)
                //{
                //    await _inboundShipmentRepository.UpdateRangeAsync(inboundShipmentToUpdate);
                //}

                // Update inbound_shipment_id OR inbound_shipment_request_id in ASNHeader
                //if (inboundShipmentToInsert.Count > 0 || inboundShipmentRequestToInsert.Count > 0)
                //{
                //    foreach (var asnInfo in asnInfos)
                //    {
                //        var asnHeader = asnHeaderToUpdate.FirstOrDefault(pkh => pkh.asnDetailId == asnInfo.Header.asnDetailId);
                //        if (asnHeader is null) continue;

                //        if (asnInfo.InboundShipment is not null)
                //        {
                //            asnHeader.inbound_shipment_id = asnInfo.InboundShipment.asnDetailId;

                //            if (asnInfo.InboundShipmentBlAwb is not null)
                //            {
                //                asnInfo.InboundShipmentBlAwb.inbound_shipment_id = asnInfo.InboundShipment.asnDetailId;
                //                inboundShipmentBlAwbToInsert.Add(asnInfo.InboundShipmentBlAwb);
                //            }
                //        }

                //        if (asnInfo.InboundShipmentRequest is not null)
                //        {
                //            asnHeader.inbound_shipment_request_id = asnInfo.InboundShipmentRequest.asnDetailId;
                //        }
                //    }
                //}

                if (asnHeaderToUpdate.Count > 0)
                {
                    await _asnHeaderRepository.UpdateRangeAsync(asnHeaderToUpdate);
                }

                if (poDetailToUpdate.Count > 0)
                {
                    await _poDetailRepository.UpdateRangeAsync(poDetailList);
                }

                if (asnDetailToInsert.Count > 0)
                {
                    await _asnDetailRepository.CreateRangeAsync(asnDetailToInsert);
                }

                if (asnDetailToUpdate.Count > 0)
                {
                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
                }

                if (asnDetailToDelete.Count > 0)
                {
                    await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
                }

                //if (inboundShipmentBlAwbToInsert.Count > 0)
                //{
                //    await _inboundShipmentBlAwbRepository.CreateRangeAsync(inboundShipmentBlAwbToInsert);
                //}

                //if (inboundShipmentBlAwbToUpdate.Count > 0)
                //{
                //    await _inboundShipmentBlAwbRepository.UpdateRangeAsync(inboundShipmentBlAwbToUpdate);
                //}
                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception ex)
            {
                _unitOfWork.Rollback();
                _logger.LogError(ex, ex.Message);
                throw;
            }

        }

        public async Task<AsnDetailResponseDto?> GetByIdAsync(int id)
        {
            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.id == id);

            if (asnHeader is null)
            {
                throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id), id));
            }

            var result = await GetAdvanceShipmentNoticeInfo(asnHeader);

            return result;
        }

        public async Task<AsnDetailResponseDto?> GetByAsnNoAsync(string asnNo)
        {
            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.asn_no == asnNo);

            if (asnHeader is null)
            {
                throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.asn_no), asnNo));
            }

            var result = await GetAdvanceShipmentNoticeInfo(asnHeader);

            return result;
        }

        public async Task DeleteAsnLineAsync(string userId, DeleteAsnLineRequestDto request)
        {
            //var asnDetails = await GetAsnDetail(request);


            //if (asnDetails.Count == 0)
            //{
            //    return;
            //}

            //var poDetailIds = asnDetails
            //    .Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();
            //var poDetailList = await GetPoDetailList(poDetailIds);

            //var invoiceDetailToUpdate = new List<ASNDetail>();
            //var invoiceDetailToDelete = new List<ASNDetail>();
            //foreach (var invoiceDetail in asnDetails)
            //{
            //    switch (invoiceDetail.status_flag)
            //    {
            //        // - Update ASN Detail to status 90: Cancelled if status is 02: New
            //        case DomainConstant.AdvancedShipmentNotices.StatusFlag.New:
            //            {
            //                invoiceDetail.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
            //                invoiceDetail.last_modified_by = userId;
            //                invoiceDetail.last_modified_on = DateTime.Now;
            //                invoiceDetailToUpdate.Add(invoiceDetail);
            //                break;
            //            }
            //        // - Delete ASN Detail if status is 01: Draft
            //        case DomainConstant.AdvancedShipmentNotices.StatusFlag.Draft:
            //            {
            //                invoiceDetailToDelete.Add(invoiceDetail);
            //                break;
            //            }
            //    }

            //    var poDetail = poDetailList.FirstOrDefault(y => y.asnDetailId == invoiceDetail.po_detail_id);
            //    if (poDetail is null)
            //    {
            //        throw new NotFoundException(
            //            string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.asnDetailId), invoiceDetail.po_detail_id));
            //    }

            //    // - Add open_qty of PO Line by ASN Qty
            //    poDetail.open_qty += invoiceDetail.qty;
            //}

            //try
            //{
            //    _unitOfWork.BeginTransaction();
            //    if (invoiceDetailToUpdate.Count > 0)
            //    {
            //        await _asnDetailRepository.UpdateRangeAsync(invoiceDetailToUpdate);

            //        //- If after updating to cancelled, check all PO Detail in PO Header ID. If all is cancelled, update PO Header status_flag to 90:Cancelled.
            //        if (invoiceDetailToUpdate.All(pkh => pkh.status_flag == DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled))
            //        {
            //            // Update PO Header
            //            var asnHeader = await _asnHeaderRepository.GetByIdAsync(pkh => pkh.asnDetailId == request.AsnHeaderId);
            //            if (asnHeader is null)
            //            {
            //                throw new NotFoundException(ErrorCodes.PurchaseOrderNotFound,
            //                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.asnDetailId),
            //                        request.AsnHeaderId));
            //            }

            //            asnHeader.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
            //            asnHeader.last_modified_by = userId;
            //            asnHeader.last_modified_on = DateTime.Now;
            //            await _asnHeaderRepository.UpdateAsync(asnHeader);
            //        }
            //    }

            //    if (invoiceDetailToDelete.Count > 0)
            //    {
            //        await _asnDetailRepository.DeleteRangeAsync(invoiceDetailToDelete);
            //    }

            //    if (poDetailList.Count > 0)
            //    {
            //        await _poDetailRepository.UpdateRangeAsync(poDetailList);
            //    }
            //    _unitOfWork.Commit();
            //}
            //catch (Exception ex)
            //{
            //    _unitOfWork.Rollback();
            //    _logger.LogError(ex, ex.Message);
            //    throw;
            //}

            //await _unitOfWork.SaveChangesAsync();
        }

        public async Task<int[]> UploadFileAsync(string userId, UploadAsnFileRequestDto request)
        {
            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.id == request.asn_header_id);

            if (asnHeader is null)
            {
                throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id),
                        request.asn_header_id));
            }

            // SE-205: Allow duplicate file name for the system.
            //var fileNames = request.files.Select(pkh => pkh.file.FileName).ToArray();
            //await ValidateFileUpload(fileNames);

            var fileTrackingToInsert = new List<FileTracking>();

            foreach (var item in request.files)
            {
                var fileTracking = new FileTracking
                {
                    created_by = userId,
                    file_type = item.file.ContentType,
                    file_name = item.file.FileName,
                    upload_source = request.upload_source,
                    document_type = item.document_type,
                    url_path = item.url_path,
                    file_size = Utilities.ConvertFileLengthToMegabytes(item.file.Length),
                };

                fileTrackingToInsert.Add(fileTracking);
            }

            if (fileTrackingToInsert.Count == 0)
            {
                return [];
            }

            // Update attachment_flag to true if there are attachment.
            asnHeader.attachment_flag = true;
            int[] poFileIDs;
            try
            {
                _unitOfWork.BeginTransaction();
                await _fileTrackingRepository.CreateRangeAsync(fileTrackingToInsert);
                await _unitOfWork.SaveChangesAsync();

                var poFileToInsert = fileTrackingToInsert.Select(x => new ASNFile
                {
                    created_by = userId,
                    asn_header_id = request.asn_header_id,
                    file_id = x.id,
                }).ToList();

                if (poFileToInsert.Count > 0)
                {
                    await _asnFileRepository.CreateRangeAsync(poFileToInsert);
                }
                await _asnHeaderRepository.UpdateAsync(asnHeader);
                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
                poFileIDs = poFileToInsert.Select(x => x.id).ToArray();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                throw;
            }

            return poFileIDs;
        }

        public async Task<List<string>> RemoveFileAsync(int asnHeaderId, List<int> asnFileIDs)
        {
            var asnFile = await GetAsnFileByAsnHeaderId(asnHeaderId, asnFileIDs);

            if (asnFile is null)
            {
                throw new NotFoundException(ErrorCodes.POFileNotFound,
                    string.Format(ErrorMessages.ASNFileNotFound, asnFileIDs));
            }

            var listFileTrackingIDs = asnFile.Select(x => x.file_id).Distinct().ToHashSet();
            var fileTracking = await _fileTrackingRepository.GetFileTrackingByIds(listFileTrackingIDs);

            if (fileTracking is null)
            {
                throw new NotFoundException(ErrorCodes.FileTrackingNotFound,
                    string.Format(ErrorMessages.FileTrackingNotFound, asnFileIDs));
            }

            var filePath = fileTracking.Select(x => x.url_path).ToList();
            try
            {
                _unitOfWork.BeginTransaction();

                await _asnFileRepository.DeleteRangeAsync(asnFile);
                await _fileTrackingRepository.DeleteRangeAsync(fileTracking);

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.Message);
                throw;
            }

            return filePath;
        }

        public PagedResponse<PagedAsnResponseDto> PagedFilterAsnAsync(SearchPagedRequestDto request, AsnFilterRequestDto filter)
        {
            var pageable = PagingUtilities.GetPageable(request.Page, request.PageSize);
            var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);

            if (filter.BranchPlants is null || filter.BranchPlants.Count == 0)
            {
                return new PagedResponse<PagedAsnResponseDto>();
            }

            var query = _asnDetailRepository.BuildFilterAsnQuery(new PagedFilterAsnRequestModel
            {
                Keyword = request.Keyword,
                suppliers = filter.Suppliers,
                Statuses = filter.Statuses,
                shipment_type = filter.shipment_type,
                Items = filter.Items,
                BranchPlants = filter.BranchPlants,
                create_date_from = filter.create_date_from,
                create_date_to = filter.create_date_to
            }, out var totalRows);

            var listSort = new List<Sortable>
            {
                new()
                {
                    FieldName = request.SortBy ?? DefaultSortField.ASN,
                    IsAscending = request.SortAscending
                }
            };

            var orderBy = ApplySort.GetOrderByFunction<PageAsnResponseDetail>(listSort);

            if (totalRows == 0)
            {
                return new PagedResponse<PagedAsnResponseDto>();
            }

            var totalPage = (int)Math.Ceiling(totalRows / (request.PageSize * 1.0));
            var pagedResponse = orderBy(query).Skip(skipRow).Take(pageable.Size).ToList();

            //var result = await GetDataForFilterAsn(pagedResponse);
            return new PagedResponse<PagedAsnResponseDto>
            {
                Items = _mapper.Map<List<PagedAsnResponseDto>>(pagedResponse),
                TotalItems = totalRows,
                TotalPage = totalPage,
                Page = pageable.Page,
                PageSize = pageable.Size
            };
        }

        public PagedResponse<PageAsnDetailResponseDto> SearchDetailAsync(SearchPagedRequestDto request, FilterAsnDetailRequestDto filter)
        {
            var query = _asnDetailRepository.BuildAsnDetailQuery(new PagedFilterAsnDetailRequestModel()
            {
                Keyword = request.Keyword,
                create_date_from = filter.create_date_from,
                create_date_to = filter.create_date_to,
                asn_header_id = filter.asn_header_id,
                po_header_id = filter.po_header_id,
                statuses = filter.status
            });

            var listSort = new List<Sortable>
            {
                new()
                {
                    FieldName = request.SortBy ?? DefaultSortField.ASNDetail,
                    IsAscending = request.SortAscending
                }
            };

            var orderBy = ApplySort.GetOrderByFunction<PageAsnDetailResponseDetail>(listSort);

            var totalRows = query.Count();

            if (totalRows == 0)
            {
                return new PagedResponse<PageAsnDetailResponseDto>();
            }

            var pageable = PagingUtilities.GetPageable(request.Page, request.PageSize);
            var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);
            var totalPage = (int)Math.Ceiling(totalRows / (double)pageable.Size);

            var pagedResponse = orderBy(query)
                .Skip(skipRow)
                .Take(pageable.Size)
                .ToList();

            var result = _mapper.Map<List<PageAsnDetailResponseDto>>(pagedResponse);

            return new PagedResponse<PageAsnDetailResponseDto>
            {
                Items = result,
                TotalItems = totalRows,
                TotalPage = totalPage,
                Page = pageable.Page,
                PageSize = pageable.Size
            };
        }

        public async Task DeleteAsnAsync(string userId, int asnHeaderId)
        {
            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.id == asnHeaderId);

            if (asnHeader is null)
            {
                throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id), asnHeaderId));
            }

            var asnDetails = await GetAsnDetailByAsnHeaderId(asnHeaderId);
            var invoiceHeaders = await GetInvoiceHeaderByAsnHeaderId(asnHeaderId);
            var invoiceDetails = await GetInvoiceDetailListByInvoiceHeaderId(invoiceHeaders.Select(x => x.id).ToList());
            var poDetailIds = invoiceDetails
                .Select(x => x.po_detail_id).Distinct().ToHashSet();
            var poDetailList = await GetPoDetailList(poDetailIds);

            var containerASNs = await _containerAsnRepository.GetContainerAsnByConditionAsync(x => x.asn_header_id == asnHeaderId);
            var containerToDelete = new List<Container>();
            if (containerASNs.Count > 0)
            {
                containerToDelete = await _containerRepository.GetContainerByIdsAsync(containerASNs.Select(x => x.container_id).ToList());
            }

            var packingHeaderToDelete = new List<PackingHeader>();
            if (containerToDelete.Count > 0)
            {
                var containerIds = containerToDelete.Select(x => x.id).ToList();
                packingHeaderToDelete = await _packingHeaderRepository.GetPackingListHeaderByConditionAsync(x => containerIds.Contains(x.container_id));
            }

            var packingDetailToDelete = new List<PackingDetail>();
            if (packingHeaderToDelete.Count > 0)
            {
                packingDetailToDelete = await _packingDetailRepository.GetPackingListDetailByConditionAsync(x => packingHeaderToDelete.Select(pkh => pkh.id).Contains(x.packing_header_id));
            }


            switch (asnHeader.status_flag)
            {
                case DomainConstant.AdvancedShipmentNotices.StatusFlag.Draft:
                    {
                        // - If ASN Header Status is 01: Draft. All ASN Details status should be 01: Draft 
                        if (asnHeader.status_flag.Equals(DomainConstant.AdvancedShipmentNotices.StatusFlag.Draft) &&
                            asnDetails.Any(x => x.status_flag != DomainConstant.AdvancedShipmentNotices.StatusFlag.Draft))
                        {
                            throw new BadRequestException(ErrorCodes.ValidationError,
                                ErrorMessages.CannotDeleteAsnStatusDraft);
                        }

                        // - Add ASN Detail Qty back to PO Line No Open Qty.
                        foreach (var invoiceDetail in invoiceDetails)
                        {
                            GiveBackQtyToPoDetail(userId, invoiceDetail, poDetailList);
                        }

                        var asnPackingDiscrepancyToDelete = await _asnPackingDiscrepancyRepository.GetAsnPackingDiscrepancytByAsnHeaderIdsAsync([asnHeaderId]);

                        try
                        {
                            // - Delete ASN Header and Detail if status is 01: Draft
                            _unitOfWork.BeginTransaction();
                            await _asnHeaderRepository.DeleteAsync(asnHeader);
                            _logger.LogInformation("Deleted ASN Header");
                            if (asnDetails.Count > 0)
                            {
                                await _asnDetailRepository.DeleteRangeAsync(asnDetails);
                                _logger.LogInformation("Deleted {Count} ASN Details", asnDetails.Count);
                            }

                            if (poDetailList.Count > 0)
                            {
                                await _poDetailRepository.UpdateRangeAsync(poDetailList);
                                _logger.LogInformation("Updated {Count} PO Details", poDetailList.Count);
                            }
                            // Delete/Update related InvoiceHeader and InvoiceDetail records
                            if (invoiceHeaders.Count > 0)
                            {
                                await _invoiceHeaderRepository.DeleteRangeAsync(invoiceHeaders);
                                _logger.LogInformation("Deleted {Count} Invoice Headers", invoiceHeaders.Count);
                            }

                            if (invoiceDetails.Count > 0)
                            {
                                await _invoiceDetailRepository.DeleteRangeAsync(invoiceDetails);
                                _logger.LogInformation("Deleted {Count} Invoice Details", invoiceDetails.Count);
                            }

                            // - Delete all records in ASNPackingList by asn_header_id if status is 01: Draft.
                            if (asnPackingDiscrepancyToDelete.Count > 0)
                            {
                                await _asnPackingDiscrepancyRepository.DeleteRangeAsync(asnPackingDiscrepancyToDelete);
                                _logger.LogInformation("Deleted {Count} ASN Packing discrepancy", asnPackingDiscrepancyToDelete.Count);
                            }

                            // - Delete Container records associated with ASN Header ID if ASN Header is deleted.
                            if (containerToDelete.Count > 0)
                            {
                                await _containerRepository.DeleteRangeAsync(containerToDelete);
                                _logger.LogInformation("Deleted {Count} Container", containerToDelete.Count);
                            }

                            // - Delete PackingHeader, PackingDetail and ContainerASN records associated with Container that is deleted.
                            if (packingHeaderToDelete.Count > 0)
                            {
                                await _packingHeaderRepository.DeleteRangeAsync(packingHeaderToDelete);
                                _logger.LogInformation("Deleted {Count} Packing Header", packingHeaderToDelete.Count);
                            }

                            if (packingDetailToDelete.Count > 0)
                            {
                                await _packingDetailRepository.DeleteRangeAsync(packingDetailToDelete);
                                _logger.LogInformation("Deleted {Count} Packing Detail", packingDetailToDelete.Count);
                            }

                            if (containerASNs.Count > 0)
                            {
                                await _containerAsnRepository.DeleteRangeAsync(containerASNs);
                                _logger.LogInformation("Deleted {Count} Container ASN", containerASNs.Count);
                            }

                            await _unitOfWork.SaveChangesAsync();
                            _unitOfWork.Commit();
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, ex.Message);
                            _unitOfWork.Rollback();
                            throw;
                        }
                        break;
                    }
                case DomainConstant.AdvancedShipmentNotices.StatusFlag.New:
                    {
                        // - If ASN Header Status is 02: New. All Details status should be 02:New or 90:Cancelled
                        if (asnDetails.Any(x => x.status_flag != DomainConstant.AdvancedShipmentNotices.StatusFlag.New &&
                                                x.status_flag != DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled))
                        {
                            throw new BadRequestException(ErrorCodes.ValidationError,
                                ErrorMessages.CannotDeleteAsnStatusNew);
                        }

                        // - Update ASN Header and Detail to status 90: Cancelled if status is 02: New
                        asnHeader.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
                        asnHeader.last_modified_by = userId;
                        asnHeader.last_modified_on = DateTime.Now;

                        foreach (var asnDetail in asnDetails)
                        {
                            asnDetail.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
                            asnDetail.last_modified_by = userId;
                            asnDetail.last_modified_on = DateTime.Now;
                        }

                        foreach (var invoiceDetail in invoiceDetails)
                        {
                            //invoiceDetail.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.Cancelled;
                            invoiceDetail.last_modified_by = userId;
                            invoiceDetail.last_modified_on = DateTime.Now;

                            // - Add ASN Detail Qty back to PO Line No Open Qty.
                            GiveBackQtyToPoDetail(userId, invoiceDetail, poDetailList);
                        }

                        try
                        {
                            _unitOfWork.BeginTransaction();
                            await _asnHeaderRepository.UpdateAsync(asnHeader);
                            await _asnDetailRepository.UpdateRangeAsync(asnDetails);
                            await _poDetailRepository.UpdateRangeAsync(poDetailList);
                            // Delete/Update related InvoiceHeader and InvoiceDetail records
                            await _invoiceHeaderRepository.UpdateRangeAsync(invoiceHeaders);
                            await _invoiceDetailRepository.UpdateRangeAsync(invoiceDetails);
                            await _unitOfWork.SaveChangesAsync();

                            // - Delete Container records associated with ASN Header ID if ASN Header is deleted.
                            if (containerToDelete.Count > 0)
                            {
                                await _containerRepository.DeleteRangeAsync(containerToDelete);
                                _logger.LogInformation("Deleted {Count} Container", containerToDelete.Count);
                            }

                            // - Delete PackingHeader, PackingDetail and ContainerASN records associated with Container that is deleted.
                            if (packingHeaderToDelete.Count > 0)
                            {
                                await _packingHeaderRepository.DeleteRangeAsync(packingHeaderToDelete);
                                _logger.LogInformation("Deleted {Count} Packing Header", packingHeaderToDelete.Count);
                            }

                            if (packingDetailToDelete.Count > 0)
                            {
                                await _packingDetailRepository.DeleteRangeAsync(packingDetailToDelete);
                                _logger.LogInformation("Deleted {Count} Packing Detail", packingDetailToDelete.Count);
                            }

                            if (containerASNs.Count > 0)
                            {
                                await _containerAsnRepository.DeleteRangeAsync(containerASNs);
                                _logger.LogInformation("Deleted {Count} Container ASN", containerASNs.Count);
                            }
                            _unitOfWork.Commit();

                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, ex.Message);
                            _unitOfWork.Rollback();
                            throw;
                        }
                        break;
                    }
            }
        }

        public async Task UpdateAsnHeaderStatusToNewByAsnDetailStatus(string userId, IUnitOfWork unitOfWork, int asnHeaderId)
        {
            var anyDetailWithStatusNotNew = await _poDetailRepository.IsPoDetailWithStatusNotNew(asnHeaderId);
            if (!anyDetailWithStatusNotNew)
            {
                var poHeader = await _poHeaderRepository.GetByIdAsync(x => x.id == asnHeaderId);
                poHeader.status_flag = PurchaseOrder.StatusFlag.New;
                poHeader.last_modified_by = userId;
                poHeader.last_modified_on = DateTime.Now;
                await _poHeaderRepository.UpdateAsync(poHeader);
                await unitOfWork.SaveChangesAsync();
            }
        }

        #region Removed API invoice
        //public async Task AddInvoiceAsync(string userId, CreateInvoiceRequestDto request)
        //{
        //    //var asnHeader = await _asnHeaderRepository.GetByIdAsync(pkh => pkh.id == request.asn_header_id);
        //    //if (asnHeader is null)
        //    //{
        //    //    throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
        //    //        string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id), request.asn_header_id));
        //    //}
        //    //var asnDetails = await GetAsnDetailByAsnHeaderId(request.asn_header_id);

        //    //var poDetailList = new List<PODetail>();
        //    //var asnDetailToInsert = new List<ASNDetail>();
        //    //var asnDetailToUpdate = new List<ASNDetail>();
        //    //var invoiceHeaderToInsert = new List<InvoiceHeader>();
        //    //var invoiceDetailToInsert = new List<InvoiceDetail>();
        //    //var invoiceMappings = new List<InvoiceMapping>();
        //    //if (request.invoices is not null)
        //    //{
        //    //    var poDetailIds = request.invoices
        //    //        .Where(pkh => pkh.invoice_details is not null)
        //    //        .SelectMany(y => y.invoice_details!)
        //    //        .Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();
        //    //    poDetailList = await GetPoDetailList(poDetailIds);
        //    //    foreach (var createInvoiceInfo in request.invoices)
        //    //    {
        //    //        var invoiceHeader = _mapper.Map<InvoiceHeader>(createInvoiceInfo.invoice_header);
        //    //        invoiceHeader.asn_header_id = request.asn_header_id;
        //    //        invoiceHeader.created_by = userId;
        //    //        invoiceHeader.created_on = DateTime.Now;

        //    //        var invoiceDetailsMapped = _mapper.Map<List<InvoiceDetail>>(createInvoiceInfo.invoice_details);
        //    //        invoiceDetailsMapped.ForEach(invoiceDetail =>
        //    //        {
        //    //            var poDetail = poDetailList.FirstOrDefault(y => y.id == invoiceDetail.po_detail_id);
        //    //            if (poDetail is null)
        //    //            {
        //    //                throw new NotFoundException(
        //    //                    string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.id), invoiceDetail.po_detail_id));
        //    //            }

        //    //            // - Deduct open_qty of PO Line by invoice Qty
        //    //            poDetail.open_qty -= invoiceDetail.qty;

        //    //            // - invoice Qty cannot be more than PO Line open_qty
        //    //            if (poDetail.open_qty < 0)
        //    //            {
        //    //                throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, invoiceDetail.line_no));
        //    //            }

        //    //            // - invoice Detail Status Flag will follow PO Header Status Flag
        //    //            if (string.IsNullOrEmpty(invoiceDetail.status_flag))
        //    //            {
        //    //                invoiceDetail.status_flag = invoiceHeader.status_flag;
        //    //            }

        //    //            // Extended Cost is (unit_cost * qty)
        //    //            invoiceDetail.extended_cost = (invoiceDetail.unit_cost * invoiceDetail.qty);

        //    //            invoiceDetail.created_by = userId;
        //    //            invoiceDetail.created_on = DateTime.Now;
        //    //        });

        //    //        var invoiceMapping = new InvoiceMapping()
        //    //        {
        //    //            InvoiceHeader = invoiceHeader,
        //    //            InvoiceDetails = invoiceDetailsMapped
        //    //        };
        //    //        invoiceHeaderToInsert.Add(invoiceHeader);
        //    //        invoiceMappings.Add(invoiceMapping);
        //    //    }
        //    //}

        //    //#region Create/Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
        //    //var maxLineNo = asnDetails.Max(pkh => pkh.line_no);
        //    //var asnDetailMappedFromInvoice = invoiceMappings
        //    //    .Where(pkh => pkh.InvoiceDetails is not null)
        //    //    .SelectMany(pkh => pkh.InvoiceDetails!)
        //    //    .GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
        //    //    .Select(pkh => new ASNDetail
        //    //    {
        //    //        asn_header_id = request.asn_header_id,
        //    //        item_id = pkh.Key.item_id,
        //    //        uom = pkh.First().uom,
        //    //        country_of_origin_id = pkh.Key.country_of_origin_id,
        //    //        qty = pkh.Sum(y => y.qty),
        //    //        created_by = userId,
        //    //        created_on = DateTime.Now
        //    //    }).ToList();

        //    //foreach (var asnDetailFromInvoice in asnDetailMappedFromInvoice)
        //    //{
        //    //    var asnDetailFromDb = asnDetails.Find(y => y.item_id == asnDetailFromInvoice.item_id && y.country_of_origin_id == asnDetailFromInvoice.country_of_origin_id);
        //    //    if (asnDetailFromDb is not null)
        //    //    {
        //    //        asnDetailFromDb.qty += asnDetailFromInvoice.qty;
        //    //        asnDetailFromDb.country_of_origin_id = asnDetailFromInvoice.country_of_origin_id;
        //    //        asnDetailFromDb.uom = asnDetailFromInvoice.uom;
        //    //        asnDetailFromDb.notes_to_warehouse = asnDetailFromInvoice.notes_to_warehouse;
        //    //        asnDetailFromDb.last_modified_by = userId;
        //    //        asnDetailFromDb.last_modified_on = DateTime.Now;
        //    //        asnDetailToUpdate.Add(asnDetailFromDb);
        //    //    }
        //    //    else
        //    //    {
        //    //        asnDetailFromInvoice.line_no = ++maxLineNo;
        //    //        asnDetailFromInvoice.status_flag = DomainConstant.AdvancedShipmentNotices.StatusFlag.New;
        //    //        asnDetailToInsert.Add(asnDetailFromInvoice);
        //    //    }
        //    //}
        //    //#endregion

        //    //try
        //    //{
        //    //    _unitOfWork.BeginTransaction();
        //    //    if (invoiceHeaderToInsert.Count > 0)
        //    //    {
        //    //        await _invoiceHeaderRepository.CreateRangeAsync(invoiceHeaderToInsert);
        //    //        await _unitOfWork.SaveChangesAsync();
        //    //        _logger.LogInformation($"Inserted invoice header count: {invoiceHeaderToInsert.Count}");
        //    //    }

        //    //    foreach (var invoiceMapping in invoiceMappings)
        //    //    {
        //    //        if (invoiceMapping.InvoiceDetails is null) continue;

        //    //        foreach (var invoiceDetail in invoiceMapping.InvoiceDetails)
        //    //        {
        //    //            invoiceDetail.invoice_header_id = invoiceMapping.InvoiceHeader.id;
        //    //            invoiceDetail.created_by = userId;
        //    //            invoiceDetail.created_on = DateTime.Now;
        //    //            invoiceDetailToInsert.Add(invoiceDetail);
        //    //        }
        //    //    }

        //    //    if (invoiceDetailToInsert.Count > 0)
        //    //    {
        //    //        await _invoiceDetailRepository.CreateRangeAsync(invoiceDetailToInsert);
        //    //        _logger.LogInformation($"Inserted invoice detail count: {invoiceDetailToInsert.Count}");
        //    //    }

        //    //    if (poDetailList.Count > 0)
        //    //    {
        //    //        await _poDetailRepository.UpdateRangeAsync(poDetailList);
        //    //        _logger.LogInformation($"Updated po detail count: {poDetailList.Count}");
        //    //    }

        //    //    if (asnDetailToInsert.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.CreateRangeAsync(asnDetailToInsert);
        //    //        _logger.LogInformation($"Inserted asn detail count: {asnDetailToInsert.Count}");
        //    //    }

        //    //    if (asnDetailToUpdate.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //    //        _logger.LogInformation($"Updated asn detail count: {asnDetailToUpdate.Count}");
        //    //    }

        //    //    await _unitOfWork.SaveChangesAsync();
        //    //    _unitOfWork.Commit();
        //    //}
        //    //catch (Exception e)
        //    //{
        //    //    _logger.LogError(e, e.Message);
        //    //    throw;
        //    //}
        //}

        //public async Task UpdateInvoiceAsync(string userId, UpdateInvoiceRequestDto request)
        //{
        //    //if (request.invoices is null)
        //    //{
        //    //    return;
        //    //}

        //    //var asnHeader = await _asnHeaderRepository.GetByIdAsync(pkh => pkh.id == request.asn_header_id);
        //    //if (asnHeader is null)
        //    //{
        //    //    throw new NotFoundException(ErrorCodes.AdvancedShipmentNoticeNotFound,
        //    //        string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(ASNHeader.id), request.asn_header_id));
        //    //}
        //    //var asnDetails = await GetAsnDetailByAsnHeaderId(request.asn_header_id);

        //    //var listInvoiceHeaderId = request.invoices.Select(pkh => pkh.invoice_header.id).Distinct().ToList();
        //    //var existedInvoiceHeader = await GetInvoiceHeaderList(listInvoiceHeaderId);
        //    //var existedInvoiceDetail = await GetInvoiceDetailListByInvoiceHeaderId(listInvoiceHeaderId);

        //    //var poDetailIds = request.invoices
        //    //    .Where(pkh => pkh.invoice_details is not null)
        //    //    .SelectMany(y => y.invoice_details!)
        //    //    .Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();
        //    //var poDetailList = await GetPoDetailList(poDetailIds);

        //    //var asnDetailToInsert = new List<ASNDetail>();
        //    //var asnDetailToUpdate = new List<ASNDetail>();
        //    //var asnDetailToDelete = new List<ASNDetail>();
        //    //var invoiceHeaderToUpdate = new List<InvoiceHeader>();
        //    //var invoiceDetailToInsert = new List<InvoiceDetail>();
        //    //var invoiceDetailToUpdate = new List<InvoiceDetail>();
        //    //foreach (var requestUpdate in request.invoices)
        //    //{
        //    //    var invoiceHeader = existedInvoiceHeader.Find(pkh => pkh.id == requestUpdate.invoice_header.id);
        //    //    if (invoiceHeader is null)
        //    //    {
        //    //        throw new NotFoundException(string.Format(ErrorMessages.InvoiceHeaderNotFound, nameof(InvoiceHeader.id), requestUpdate.invoice_header.id));
        //    //    }
        //    //    _mapper.Map(requestUpdate.invoice_header, invoiceHeader);
        //    //    invoiceHeader.last_modified_by = userId;
        //    //    invoiceHeader.last_modified_on = DateTime.Now;
        //    //    invoiceHeaderToUpdate.Add(invoiceHeader);

        //    //    var invoiceDetailsRequest = requestUpdate.invoice_details;
        //    //    if (invoiceDetailsRequest is not null)
        //    //    {
        //    //        foreach (var invoiceDetailUpdateRequest in invoiceDetailsRequest)
        //    //        {
        //    //            var poDetail = poDetailList.Find(y => y.id == invoiceDetailUpdateRequest.po_detail_id);
        //    //            if (poDetail is null)
        //    //            {
        //    //                throw new NotFoundException(
        //    //                    string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.id), invoiceDetailUpdateRequest.po_detail_id));
        //    //            }

        //    //            var mode = Mode.Update;
        //    //            var invoiceDetail = existedInvoiceDetail.Find(pkh => pkh.id == invoiceDetailUpdateRequest.id);

        //    //            if (invoiceDetail is null)
        //    //            {
        //    //                mode = Mode.Insert;
        //    //                invoiceDetail = new InvoiceDetail();
        //    //            }

        //    //            _mapper.Map(invoiceDetailUpdateRequest, invoiceDetail);

        //    //            switch (mode)
        //    //            {
        //    //                case Mode.Insert:
        //    //                    {
        //    //                        invoiceDetail.qty = invoiceDetailUpdateRequest.qty;
        //    //                        // - Deduct open_qty of PO Line by invoice Qty
        //    //                        poDetail.open_qty -= invoiceDetail.qty;

        //    //                        // - ASN Qty cannot be more than PO Line open_qty
        //    //                        if (poDetail.open_qty < 0)
        //    //                        {
        //    //                            throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, invoiceDetail.line_no));
        //    //                        }

        //    //                        invoiceDetail.created_by = userId;
        //    //                        invoiceDetail.invoice_header_id = invoiceHeader.id;
        //    //                        invoiceDetailToInsert.Add(invoiceDetail);
        //    //                        break;
        //    //                    }
        //    //                case Mode.Update:
        //    //                    {
        //    //                        // If ASN Detail qty is modified, get the difference from the previous qty and add back to PO Line open_qty.
        //    //                        // Example change qty from 6 to 5. Change is -1. Add this back to open_qty which is -1 in this case.
        //    //                        // OR change qty from 6 to 7, Add this back to open_qty which is 1.

        //    //                        /* Test cases
        //    //                         * Qty: 6, change Qty: 6 -> 0
        //    //                         * not changed

        //    //                         *when modified:
        //    //                           const X = Old ASN - New ASN
        //    //                           new open_qty = old open_qty + X
        //    //                           Old - New
        //    //                         */

        //    //                        var asnQtyChanged = invoiceDetail.qty - invoiceDetailUpdateRequest.qty;

        //    //                        if (asnQtyChanged != 0)
        //    //                        {
        //    //                            poDetail.open_qty += asnQtyChanged;
        //    //                            invoiceDetail.qty = invoiceDetailUpdateRequest.qty;
        //    //                        }

        //    //                        // - ASN Qty cannot be more than PO Line open_qty
        //    //                        if (poDetail.open_qty < 0)
        //    //                        {
        //    //                            throw new BadRequestException(string.Format(ErrorMessages.AsnQtyExceeds, invoiceDetail.line_no));
        //    //                        }

        //    //                        invoiceDetail.last_modified_by = userId;
        //    //                        invoiceDetail.last_modified_on = DateTime.Now;
        //    //                        invoiceDetailToUpdate.Add(invoiceDetail);
        //    //                        break;
        //    //                    }
        //    //            }
        //    //        }
        //    //    }
        //    //}

        //    //#region Create/Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
        //    //var maxLineNo = asnDetails.Count > 0 ? asnDetails.Max(pkh => pkh.line_no) : 0;
        //    //var modifiedInvoiceDetail = invoiceDetailToInsert.Concat(existedInvoiceDetail)
        //    //        .GroupBy(pkh => new { pkh.item_id, pkh.country_of_origin_id })
        //    //        .Select(pkh => new ASNDetail
        //    //        {
        //    //            asn_header_id = request.asn_header_id,
        //    //            item_id = pkh.Key.item_id,
        //    //            uom = pkh.First().uom,
        //    //            country_of_origin_id = pkh.Key.country_of_origin_id,
        //    //            qty = pkh.Sum(y => y.qty),
        //    //            created_by = userId,
        //    //            created_on = DateTime.Now
        //    //        }).ToList();

        //    //// calculate for all asn detail belong to asn_header_id
        //    //foreach (var asnDetailFromInvoice in modifiedInvoiceDetail)
        //    //{
        //    //    var asnDetailFromDb = asnDetails.Find(y => y.item_id == asnDetailFromInvoice.item_id &&
        //    //                                               y.country_of_origin_id == asnDetailFromInvoice.country_of_origin_id);
        //    //    // replace old value
        //    //    if (asnDetailFromDb is not null)
        //    //    {
        //    //        asnDetailFromDb.qty = asnDetailFromInvoice.qty;
        //    //        asnDetailFromDb.country_of_origin_id = asnDetailFromInvoice.country_of_origin_id;
        //    //        asnDetailFromDb.uom = asnDetailFromInvoice.uom;
        //    //        asnDetailFromDb.notes_to_warehouse = asnDetailFromInvoice.notes_to_warehouse;
        //    //        asnDetailFromDb.last_modified_by = userId;
        //    //        asnDetailFromDb.last_modified_on = DateTime.Now;
        //    //        asnDetailToUpdate.Add(asnDetailFromDb);
        //    //    }
        //    //    else
        //    //    {
        //    //        asnDetailFromInvoice.line_no = ++maxLineNo;
        //    //        asnDetailFromInvoice.status_flag = AdvancedShipmentNoticesDetail.StatusFlag.New;
        //    //        asnDetailToInsert.Add(asnDetailFromInvoice);
        //    //    }
        //    //}

        //    //// delete asn detail not in invoice detail
        //    //asnDetailToDelete.AddRange(asnDetails.Where(pkh =>
        //    //    !modifiedInvoiceDetail.Any(y => y.item_id == pkh.item_id && y.country_of_origin_id == pkh.country_of_origin_id)).ToList());
        //    //#endregion

        //    //try
        //    //{
        //    //    _unitOfWork.BeginTransaction();
        //    //    if (invoiceHeaderToUpdate.Count > 0)
        //    //    {
        //    //        await _invoiceHeaderRepository.UpdateRangeAsync(invoiceHeaderToUpdate);
        //    //    }

        //    //    if (invoiceDetailToInsert.Count > 0)
        //    //    {
        //    //        await _invoiceDetailRepository.CreateRangeAsync(invoiceDetailToInsert);
        //    //    }

        //    //    if (invoiceDetailToUpdate.Count > 0)
        //    //    {
        //    //        await _invoiceDetailRepository.UpdateRangeAsync(invoiceDetailToUpdate);
        //    //    }

        //    //    if (asnDetailToUpdate.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //    //    }

        //    //    if (asnDetailToInsert.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.CreateRangeAsync(asnDetailToInsert);
        //    //    }

        //    //    if (asnDetailToDelete.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
        //    //    }

        //    //    if (poDetailList.Count > 0)
        //    //    {
        //    //        await _poDetailRepository.UpdateRangeAsync(poDetailList);
        //    //    }
        //    //    await _unitOfWork.SaveChangesAsync();
        //    //    _unitOfWork.Commit();
        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    _unitOfWork.Rollback();
        //    //    _logger.LogError(ex, ex.Message);
        //    //    throw;
        //    //}
        //}

        //public async Task DeleteInvoiceAsync(string userId, int invoiceHeaderId)
        //{
        //    //var invoiceHeaderToDelete = await _invoiceHeaderRepository.GetByIdAsync(pkh => pkh.id == invoiceHeaderId);
        //    //if (invoiceHeaderToDelete is null)
        //    //{
        //    //    throw new NotFoundException(string.Format(ErrorMessages.InvoiceHeaderNotFound, nameof(InvoiceHeader.id), invoiceHeaderId));
        //    //}

        //    //var invoiceDetailsToDelete = await GetInvoiceDetailListByInvoiceHeaderId([invoiceHeaderId]);
        //    //var poDetailsToUpdate = await GetPoDetailList(invoiceDetailsToDelete.Select(pkh => pkh.po_detail_id).Distinct().ToHashSet());
        //    //var asnDetails = await GetAsnDetailByAsnHeaderId(invoiceHeaderToDelete.asn_header_id);
        //    //var asnDetailToUpdate = new List<ASNDetail>();
        //    //var asnDetailToDelete = new List<ASNDetail>();
        //    //switch (invoiceHeaderToDelete.status_flag)
        //    //{
        //    //    // - Delete Invoice Header and Detail if status is 01: Draft
        //    //    case DomainConstant.InvoiceHeader.StatusFlag.Draft:
        //    //        {
        //    //            // Add invoice Detail Qty back to PO Line No Open Qty.
        //    //            foreach (var invoiceDetail in invoiceDetailsToDelete)
        //    //            {
        //    //                GiveBackQtyToPoDetail(userId, invoiceDetail, poDetailsToUpdate);
        //    //            }

        //    //            // - Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
        //    //            DeductQtyAndRemoveAsnDetail(userId, invoiceDetailsToDelete, asnDetails, asnDetailToDelete, asnDetailToUpdate);

        //    //            try
        //    //            {
        //    //                _unitOfWork.BeginTransaction();
        //    //                await _invoiceHeaderRepository.DeleteAsync(invoiceHeaderToDelete);
        //    //                await _invoiceDetailRepository.DeleteRangeAsync(invoiceDetailsToDelete);
        //    //                if (asnDetailToUpdate.Count > 0)
        //    //                {
        //    //                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //    //                }

        //    //                if (asnDetailToDelete.Count > 0)
        //    //                {
        //    //                    await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
        //    //                }

        //    //                if (poDetailsToUpdate.Count > 0)
        //    //                {
        //    //                    await _poDetailRepository.UpdateRangeAsync(poDetailsToUpdate);
        //    //                }

        //    //                await _unitOfWork.SaveChangesAsync();
        //    //                _unitOfWork.Commit();
        //    //            }
        //    //            catch (Exception e)
        //    //            {
        //    //                _unitOfWork.Rollback();
        //    //                _logger.LogError(e, e.Message);
        //    //                throw;
        //    //            }

        //    //            break;
        //    //        }
        //    //    // - Update Invoice Header and Detail to status 90: Cancelled if status is 02: New
        //    //    case DomainConstant.InvoiceHeader.StatusFlag.New:
        //    //        {
        //    //            invoiceHeaderToDelete.status_flag = DomainConstant.InvoiceHeader.StatusFlag.Cancelled;
        //    //            invoiceHeaderToDelete.last_modified_by = userId;
        //    //            invoiceHeaderToDelete.last_modified_on = DateTime.Now;
        //    //            invoiceDetailsToDelete.ForEach(pkh =>
        //    //            {
        //    //                pkh.status_flag = DomainConstant.InvoiceDetail.StatusFlag.Cancelled;
        //    //                pkh.last_modified_by = userId;
        //    //                pkh.last_modified_on = DateTime.Now;
        //    //            });

        //    //            // Add invoice Detail Qty back to PO Line No Open Qty.
        //    //            foreach (var invoiceDetail in invoiceDetailsToDelete)
        //    //            {
        //    //                GiveBackQtyToPoDetail(userId, invoiceDetail, poDetailsToUpdate);
        //    //            }

        //    //            // Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
        //    //            DeductQtyAndRemoveAsnDetail(userId, invoiceDetailsToDelete, asnDetails, asnDetailToDelete, asnDetailToUpdate);

        //    //            try
        //    //            {
        //    //                _unitOfWork.BeginTransaction();
        //    //                await _invoiceHeaderRepository.UpdateAsync(invoiceHeaderToDelete);
        //    //                await _invoiceDetailRepository.UpdateRangeAsync(invoiceDetailsToDelete);

        //    //                if (asnDetailToDelete.Count > 0)
        //    //                {
        //    //                    await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
        //    //                }

        //    //                if (asnDetailToUpdate.Count > 0)
        //    //                {
        //    //                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //    //                }

        //    //                if (poDetailsToUpdate.Count > 0)
        //    //                {
        //    //                    await _poDetailRepository.UpdateRangeAsync(poDetailsToUpdate);
        //    //                }

        //    //                await _unitOfWork.SaveChangesAsync();
        //    //                _unitOfWork.Commit();
        //    //            }
        //    //            catch (Exception e)
        //    //            {
        //    //                _unitOfWork.Rollback();
        //    //                _logger.LogError(e, e.Message);
        //    //                throw;
        //    //            }

        //    //            break;
        //    //        }
        //    //}
        //}

        //public async Task DeleteInvoiceLineAsync(string userId, List<int> invoiceDetailId)
        //{
        //    //var invoiceDetails = await GetInvoiceDetailList(invoiceDetailId);

        //    //if (invoiceDetails.Count == 0)
        //    //{
        //    //    return;
        //    //}

        //    //var asnDetails = await _asnHeaderRepository.GetAsnOfInvoiceDetail(invoiceDetailId);
        //    //var poDetailIds = invoiceDetails
        //    //    .Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();
        //    //var poDetailList = await GetPoDetailList(poDetailIds);

        //    //var invoiceDetailToUpdate = new List<InvoiceDetail>();
        //    //var invoiceDetailToDelete = new List<InvoiceDetail>();
        //    //var asnDetailToUpdate = new List<ASNDetail>();
        //    //var asnDetailToDelete = new List<ASNDetail>();
        //    //foreach (var invoiceDetail in invoiceDetails)
        //    //{
        //    //    switch (invoiceDetail.status_flag)
        //    //    {
        //    //        // - Update ASN Detail to status 90: Cancelled if status is 02: New
        //    //        case DomainConstant.InvoiceDetail.StatusFlag.New:
        //    //            {
        //    //                invoiceDetail.status_flag = DomainConstant.InvoiceDetail.StatusFlag.Cancelled;
        //    //                invoiceDetail.last_modified_by = userId;
        //    //                invoiceDetail.last_modified_on = DateTime.Now;
        //    //                invoiceDetailToUpdate.Add(invoiceDetail);
        //    //                break;
        //    //            }
        //    //        // - Delete ASN Detail if status is 01: Draft
        //    //        case DomainConstant.InvoiceDetail.StatusFlag.Draft:
        //    //            {
        //    //                invoiceDetailToDelete.Add(invoiceDetail);
        //    //                break;
        //    //            }
        //    //    }

        //    //    var poDetail = poDetailList.Find(y => y.id == invoiceDetail.po_detail_id);
        //    //    if (poDetail is null)
        //    //    {
        //    //        throw new NotFoundException(
        //    //            string.Format(ErrorMessages.POLineNotFound, nameof(PODetail.id), invoiceDetail.po_detail_id));
        //    //    }

        //    //    // - Add open_qty of PO Line by ASN Qty
        //    //    poDetail.open_qty += invoiceDetail.qty;
        //    //}

        //    //// - Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
        //    //DeductQtyAndRemoveAsnDetail(userId, invoiceDetails, asnDetails, asnDetailToDelete, asnDetailToUpdate);

        //    //try
        //    //{
        //    //    _unitOfWork.BeginTransaction();

        //    //    if (invoiceDetailToUpdate.Count > 0)
        //    //    {
        //    //        await _invoiceDetailRepository.UpdateRangeAsync(invoiceDetailToUpdate);
        //    //    }

        //    //    if (invoiceDetailToDelete.Count > 0)
        //    //    {
        //    //        await _invoiceDetailRepository.DeleteRangeAsync(invoiceDetailToDelete);
        //    //    }

        //    //    if (asnDetailToDelete.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
        //    //    }

        //    //    if (asnDetailToUpdate.Count > 0)
        //    //    {
        //    //        await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //    //    }

        //    //    if (poDetailList.Count > 0)
        //    //    {
        //    //        await _poDetailRepository.UpdateRangeAsync(poDetailList);
        //    //    }
        //    //    await _unitOfWork.SaveChangesAsync();
        //    //    _unitOfWork.Commit();
        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    _unitOfWork.Rollback();
        //    //    _logger.LogError(ex, ex.Message);
        //    //    throw;
        //    //}
        //} 
        #endregion

        public async Task<PagedResponse<ResponsePackingInformationResponseDto>> SearchPackingInformationPaged(SearchPagedRequestDto request, FilterPackingInformationRequestDto filter)
        {
            var packingHeaderIDs = await _packingHeaderRepository.GetPackingHeaderId(x => x.asn_header_id == filter.asn_header_id && x.container_id == filter.container_id);

            if (packingHeaderIDs.Count == 0)
            {
                return new PagedResponse<ResponsePackingInformationResponseDto>();
            }

            var query = _packingHeaderRepository.BuildPackingListQuery(new FilterPackingListRequestModel()
            {
                PackingHeaderIds = packingHeaderIDs,
                Keyword = request.Keyword,
                AsnHeaderId = filter.asn_header_id,
                ContainerId = filter.container_id,
                PackageNo = filter.package_no
            });

            var listSort = new List<Sortable>
            {
                new()
                {
                    FieldName = request.SortBy ?? DefaultSortField.PackingList,
                    IsAscending = request.SortAscending
                }
            };

            var orderBy = ApplySort.GetOrderByFunction<PagedPackingInformationDetail>(listSort);

            var totalRows = query.Count();

            if (totalRows == 0)
            {
                return new PagedResponse<ResponsePackingInformationResponseDto>()
                {
                    Items = packingHeaderIDs.Select(x => new ResponsePackingInformationResponseDto()
                    {
                        packing_header_id = x,
                        details = []
                    }).ToList()
                };
            }

            var pageable = PagingUtilities.GetPageable(request.Page, request.PageSize);
            var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);
            var totalPage = (int)Math.Ceiling(totalRows / (double)pageable.Size);

            var pagedResponse = orderBy(query)
                .Skip(skipRow)
                .Take(pageable.Size)
                .ToList();

            var result = new List<ResponsePackingInformationResponseDto>();
            foreach (var packingHeaderId in packingHeaderIDs)
            {
                var packingDetails = pagedResponse.Where(x => x.packing_header_id == packingHeaderId).ToList();
                var packingDetailsResult = new ResponsePackingInformationResponseDto
                {
                    packing_header_id = packingHeaderId,
                    details = _mapper.Map<List<PagedPackingInformationResponseDto>>(packingDetails)
                };
                result.Add(packingDetailsResult);
            }

            return new PagedResponse<ResponsePackingInformationResponseDto>
            {
                Items = result,
                TotalItems = totalRows,
                TotalPage = totalPage,
                Page = pageable.Page,
                PageSize = pageable.Size
            };
        }

        public async Task<List<ContainerListForAsnResponseDto>> GetContainerListForAsnAsync(int asnHeaderId)
        {
            var containerQuery = await _containerRepository.GetContainerListForAsnAsync(asnHeaderId);

            var result = _mapper.Map<List<ContainerListForAsnResponseDto>>(containerQuery);

            return result;
        }

        public async Task AddInvoiceForAsnAsync(string userId, int asnHeaderId, InvoiceForAsnRequestDto request)
        {
            var invoiceHeadersToUpdate = await GetInvoiceHeaderAsync(request.invoice_id);
            var invalidInvoiceHeaderId = request.invoice_id.Except(invoiceHeadersToUpdate.Select(x => x.id)).ToArray();
            if (invalidInvoiceHeaderId.Length > 0)
            {
                throw new NotFoundException(string.Format(ErrorMessages.InvoiceHeaderNotFound, nameof(InvoiceHeader.id), string.Join(",", invalidInvoiceHeaderId)));
            }

            // - Invoice Header record asn_header_id is blank.
            var invalidInvoiceHeader = invoiceHeadersToUpdate.Where(x => x.asn_header_id.HasValue).ToArray();
            if (invalidInvoiceHeader.Length > 0)
            {
                throw new BadRequestException(ErrorMessages.CanNotAddInvoiceToAsn);
            }

            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.id == asnHeaderId);

            if (asnHeader is null)
            {
                throw new BadRequestException(string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound,
                    nameof(asnHeader.id), asnHeaderId));
            }

            var currentDateTime = DateTime.Now;
            // - Update asn_header_id in InvoiceHeader to asn_header_id indicated.
            foreach (var invoiceHeader in invoiceHeadersToUpdate)
            {
                if (asnHeader.supplier_id != invoiceHeader.supplier_id)
                {
                    throw new BadRequestException(ErrorMessages.InvoiceSupplierDifferentWithAsn);
                }

                invoiceHeader.asn_header_id = asnHeaderId;
                invoiceHeader.last_modified_by = userId;
                invoiceHeader.last_modified_on = currentDateTime;
            }

            var poDetailList = new List<PODetail>();
            var asnDetailToInsert = new List<ASNDetail>();
            var asnDetailToUpdate = new List<ASNDetail>();

            var invoiceDetails = await GetInvoiceDetailAsync(request.invoice_id);
            var asnDetails = await _asnDetailRepository.GetAsnDetailByAsnHeaderIdAsync(asnHeaderId);
            var lineNo = 0;
            if (asnDetails.Count > 0)
            {
                lineNo = asnDetails.Max(x => x.line_no);
            }

            if (invoiceDetails.Count > 0)
            {
                var poDetailIds = invoiceDetails.Select(x => x.po_detail_id).Distinct().ToList();
                poDetailList = await GetPoDetailListAsync(poDetailIds);
            }

            var invoiceDetailGrouped = invoiceDetails.GroupBy(x => new
            {
                x.po_detail_id,
                x.country_of_origin_id
            }, (key, details) => new
            {
                key.po_detail_id,
                key.country_of_origin_id,
                qty = details.Sum(x => x.qty)
            }).ToList();

            var poDetailToUpdate = new List<PODetail>();
            foreach (var invoice in invoiceDetailGrouped)
            {
                // - Get all invoice_details for ASN and group by po_detail_id, country_of_origin_id and get total qty.
                // Using this list, get the qty difference grouped by po_detail_id and country_of_origin_id
                // and update ASN Detail qty and PO Detail open_qty. If no difference, no update required.

                var poDetail = poDetailList.Find(x => x.id == invoice.po_detail_id);

                if (poDetail is null)
                {
                    _logger.LogError($"-po_detail_id: {invoice.po_detail_id}, country_of_origin_id: {invoice.country_of_origin_id}");
                    throw new NotFoundException(string.Format(ErrorMessages.PurchaseOrderNotFound, nameof(PODetail.id), invoice.po_detail_id));
                }

                var asnDetail = asnDetails.Find(x =>
                    x.po_detail_id == invoice.po_detail_id && x.country_of_origin_id == invoice.country_of_origin_id);

                if (asnDetail is null)
                {
                    // - Deduct open_qty of PO Line by invoice Qty
                    poDetail.open_qty -= invoice.qty;

                    // - Invoice Qty cannot be more than PO Line open_qty
                    if (poDetail.open_qty < 0)
                    {
                        throw new BadRequestException(string.Format(ErrorMessages.InvoiceQtyExceeds, poDetail.id));
                    }

                    poDetail.last_modified_by = userId;
                    poDetail.last_modified_on = currentDateTime;
                    poDetailToUpdate.Add(poDetail);

                    asnDetailToInsert.Add(new ASNDetail
                    {
                        id = 0,
                        created_on = currentDateTime,
                        created_by = userId,
                        asn_header_id = asnHeaderId,
                        line_no = ++lineNo,
                        po_detail_id = poDetail.po_header_id,
                        status_flag = DomainConstant.AdvancedShipmentNoticesDetail.StatusFlag.New,
                        item_id = poDetail.item_id,
                        qty = invoice.qty,
                        uom = poDetail.uom,
                        country_of_origin_id = invoice.country_of_origin_id,
                        notes_to_warehouse = string.Empty
                    });
                }
                else
                {
                    // - Get all invoice_details for ASN and group by po_detail_id, country_of_origin_id and get total qty.
                    // Using this list, get the qty difference grouped by po_detail_id and country_of_origin_id
                    // and update ASN Detail qty and PO Detail open_qty. If no difference, no update required.

                    // Old ASN Detail Qty - New ASN Detail Qty = 1
                    // 5 - 4 =1
                    // Add back to PO Open Qty +1
                    // 
                    // Old ASN Detail Qty - New ASN Detail Qty = 1
                    // 4 - 5 = -1
                    // Add back to PO Open Qty -1

                    var asnQtyChanged = asnDetail.qty - invoice.qty;

                    // no change
                    if (asnQtyChanged == 0)
                    {
                        continue;
                    }

                    poDetail.open_qty += asnQtyChanged;
                    asnDetail.qty = invoice.qty;

                    // - ASN Qty cannot be more than PO Line open_qty
                    if (poDetail.open_qty < 0)
                    {
                        throw new BadRequestException(string.Format(ErrorMessages.InvoiceQtyExceeds, poDetail.id));
                    }

                    asnDetail.last_modified_by = userId;
                    asnDetail.last_modified_on = currentDateTime;
                    asnDetailToUpdate.Add(asnDetail);

                    poDetail.last_modified_by = userId;
                    poDetail.last_modified_on = currentDateTime;
                    poDetailToUpdate.Add(poDetail);
                }

            }

            try
            {
                _unitOfWork.BeginTransaction();
                if (invoiceHeadersToUpdate.Count > 0)
                {
                    await _invoiceHeaderRepository.UpdateRangeAsync(invoiceHeadersToUpdate);
                    _logger.LogInformation($"Updated invoice header count: {invoiceHeadersToUpdate.Count}");
                }

                if (poDetailToUpdate.Count > 0)
                {
                    await _poDetailRepository.UpdateRangeAsync(poDetailToUpdate);
                    _logger.LogInformation($"Updated po detail count: {poDetailToUpdate.Count}");
                }

                if (asnDetailToUpdate.Count > 0)
                {
                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
                    _logger.LogInformation($"Updated asn detail count: {asnDetailToUpdate.Count}");
                }

                if (asnDetailToInsert.Count > 0)
                {
                    await _asnDetailRepository.CreateRangeAsync(asnDetailToInsert);
                    _logger.LogInformation($"Created asn detail count: {asnDetailToInsert.Count}");
                }

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.Message);
                throw;
            }
        }

        public async Task DeleteInvoiceForAsnAsync(string userId, int asnHeaderId, InvoiceForAsnRequestDto request)
        {
            var invoiceHeadersToUpdate = await GetInvoiceHeaderAsync(request.invoice_id);
            var invalidInvoiceHeaderId = request.invoice_id.Except(invoiceHeadersToUpdate.Select(x => x.id)).ToArray();
            if (invalidInvoiceHeaderId.Length > 0)
            {
                throw new NotFoundException(string.Format(ErrorMessages.InvoiceHeaderNotFound, nameof(InvoiceHeader.id), string.Join(",", invalidInvoiceHeaderId)));
            }

            // - Invoice Header record asn_header_id is not blank.
            var invalidInvoiceHeader = invoiceHeadersToUpdate.Where(x => !x.asn_header_id.HasValue).ToArray();
            if (invalidInvoiceHeader.Length > 0)
            {
                throw new BadRequestException(ErrorMessages.CanNotDeleteInvoiceToAsn);
            }

            var currentDateTime = DateTime.Now;
            // - Update asn_header_id in InvoiceHeader to null
            foreach (var invoiceHeader in invoiceHeadersToUpdate)
            {
                invoiceHeader.asn_header_id = null;
                invoiceHeader.last_modified_by = userId;
                invoiceHeader.last_modified_on = currentDateTime;
            }

            var poDetailList = new List<PODetail>();
            var asnDetailToDelete = new List<ASNDetail>();
            var asnDetailToUpdate = new List<ASNDetail>();
            var poDetailToUpdate = new List<PODetail>();

            var invoiceDetails = await GetInvoiceDetailAsync(request.invoice_id);
            var asnDetails = await _asnDetailRepository.GetAsnDetailByAsnHeaderIdAsync(asnHeaderId);

            if (invoiceDetails.Count > 0)
            {
                var poDetailIds = invoiceDetails.Select(x => x.po_detail_id).ToList();
                poDetailList = await GetPoDetailListAsync(poDetailIds);
            }

            var invoiceDetailGrouped = invoiceDetails.GroupBy(x => new
            {
                x.po_detail_id,
                x.country_of_origin_id
            }, (key, details) => new
            {
                key.po_detail_id,
                key.country_of_origin_id,
                qty = details.Sum(x => x.qty)
            }).ToList();

            foreach (var invoice in invoiceDetailGrouped)
            {
                var poDetail = poDetailList.Find(x => x.id == invoice.po_detail_id);

                if (poDetail is null)
                {
                    _logger.LogError($"Cannot find PO Detail: -po_detail_id: {invoice.po_detail_id}, country_of_origin_id: {invoice.country_of_origin_id}");
                    throw new NotFoundException(string.Format(ErrorMessages.PurchaseOrderNotFound, nameof(PODetail.id), invoice.po_detail_id));
                }

                // add back to PO Open Qty
                poDetail.open_qty += invoice.qty;
                poDetail.last_modified_by = userId;
                poDetail.last_modified_on = currentDateTime;
                poDetailToUpdate.Add(poDetail);

                var asnDetail = asnDetails.Find(x =>
                    x.po_detail_id == invoice.po_detail_id && x.country_of_origin_id == invoice.country_of_origin_id);

                if (asnDetail is null)
                {
                    _logger.LogError($"cannot find ASN Detail: -po_detail_id: {invoice.po_detail_id}, country_of_origin_id: {invoice.country_of_origin_id}");
                    continue;
                }

                // - Get all invoice_details for ASN and group by po_detail_id, country_of_origin_id and get total qty.
                // Using this list, get the qty difference grouped by po_detail_id and country_of_origin_id
                // and update ASN Detail qty and PO Detail open_qty. If no difference, no update required.

                // remove ASN Detail if ASN Detail Qty == Invoice Detail Qty
                if (asnDetail.qty == invoice.qty)
                {
                    asnDetailToDelete.Add(asnDetail);
                    continue;
                }

                // decrease ASN Detail Qty
                asnDetail.qty -= invoice.qty;

                asnDetail.last_modified_by = userId;
                asnDetail.last_modified_on = currentDateTime;
                asnDetailToUpdate.Add(asnDetail);
            }

            try
            {
                _unitOfWork.BeginTransaction();
                if (invoiceHeadersToUpdate.Count > 0)
                {
                    await _invoiceHeaderRepository.UpdateRangeAsync(invoiceHeadersToUpdate);
                    _logger.LogInformation($"Updated invoice header count: {invoiceHeadersToUpdate.Count}");
                }

                if (poDetailToUpdate.Count > 0)
                {
                    await _poDetailRepository.UpdateRangeAsync(poDetailToUpdate);
                    _logger.LogInformation($"Updated po detail count: {poDetailToUpdate.Count}");
                }

                if (asnDetailToUpdate.Count > 0)
                {
                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
                    _logger.LogInformation($"Updated asn detail count: {asnDetailToUpdate.Count}");
                }

                if (asnDetailToDelete.Count > 0)
                {
                    await _asnDetailRepository.DeleteRangeAsync(asnDetailToDelete);
                    _logger.LogInformation($"Deleted asn detail count: {asnDetailToDelete.Count}");
                }

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.Message);
                throw;
            }
        }

        public async Task<object> AddContainerForAsnAsync(string userId, int asnHeaderId, CreateContainerForAsnRequestDto request)
        {
            await ValidateCreateContainerAsync(asnHeaderId, request);
            // - Create container record with information given. Update asn_header_id in Container with the given asn_header_id
            int packingNumber = 0;
            Container? container = null;

            if (request.container_id.HasValue && request.container_id != 0)
            {
                container = await _containerRepository.GetByIdAsync(x => x.id == request.container_id!.Value);

                if (container is null)
                {
                    throw new NotFoundException(ErrorMessages.ContainerNotFound);
                }

                // container_id should exists with status 0:Incoming
                if (container.status_flag != DomainConstant.Containers.StatusFlag.Incoming)
                {
                    throw new BadRequestException(ErrorMessages.ContainerShouldIncoming);
                }
            }

            //- Only 1 Container with shipment_type of L: Loose is allowed in 1 ASN.
            var isValidShipmentType =
                await _containerAsnRepository.ValidateShipmentTypeInAsnAsync(0, asnHeaderId, request.shipment_type);

            if (!isValidShipmentType)
            {
                throw new BadRequestException(ErrorMessages.ContainerOnlyOneLooseInAsn);
            }

            var containerAsnMapping =
                await _containerAsnRepository.GetContainerAsnByConditionAsync(x => x.asn_header_id == asnHeaderId);

            var mode = Mode.Update;
            if (container is null)
            {
                mode = Mode.Insert;
                container = new Container
                {
                    container_no = request.container_no,
                    shipment_type = request.shipment_type,
                    container_type = request.container_type,
                    weight = request.weight,
                    last_modified_by = userId,
                    last_modified_on = DateTime.Now,
                    created_by = userId
                };
            }
            //  If container_id is not null, it is an existing container. Create just ContainerASN and PackingHeader record.
            else
            {
                var containerAsn = containerAsnMapping.Where(x => x.container_id == container.id);
                packingNumber = GetTheLastPackingNumber(containerAsn.ToList(), container.container_no);
            }

            PackingHeader packingHeader;
            try
            {
                _unitOfWork.BeginTransaction();
                if (mode == Mode.Insert)
                {
                    await _containerRepository.CreateAsync(container);
                    await _unitOfWork.SaveChangesAsync();
                }

                var containerAsn = new ContainerASN
                {
                    created_on = DateTime.Now,
                    created_by = userId,
                    asn_header_id = asnHeaderId,
                    container_id = container.id,
                    packing_list_no = $"PL-{container.container_no}-{++packingNumber:D2}"
                };
                await _containerAsnRepository.CreateAsync(containerAsn);

                packingHeader = new PackingHeader
                {
                    created_on = DateTime.Now,
                    created_by = userId,
                    asn_header_id = asnHeaderId,
                    container_id = container.id,
                };
                await _packingHeaderRepository.CreateAsync(packingHeader);
                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.Message);
                throw;
            }
            return new
            {
                container_id = container.id,
                packing_header_id = packingHeader.id
            };
        }

        public async Task UpdateContainerForAsnAsync(string userId, int asnHeaderId, UpdateContainerForAsnRequestDto request)
        {
            var container = await _containerRepository.GetByIdAsync(x => x.id == request.container_id);
            if (container is null)
            {
                throw new NotFoundException(ErrorMessages.ContainerNotFound);
            }

            //- Only 1 Container with shipment_type of L: Loose is allowed in 1 ASN.
            var isValidShipmentType =
                await _containerAsnRepository.ValidateShipmentTypeInAsnAsync(container.id, asnHeaderId, request.shipment_type);

            if (!isValidShipmentType)
            {
                throw new BadRequestException(ErrorMessages.ContainerOnlyOneLooseInAsn);
            }

            await ValidateUpdateContainerAsync(container.container_no, request);

            // - Update Container No, Shipment Type and Weight by Container ID.
            container.container_no = request.container_no;
            container.shipment_type = request.shipment_type;
            container.container_type = request.container_type;
            container.weight = request.weight;
            container.last_modified_by = userId;
            container.last_modified_on = DateTime.Now;
            await _containerRepository.UpdateAsync(container);
            await _unitOfWork.SaveChangesAsync();
        }

        public async Task DeleteContainerForAsnAsync(int containerId)
        {
            var containerToDelete = await _containerRepository.GetByIdAsync(x => x.id == containerId);
            if (containerToDelete is null)
            {
                throw new NotFoundException(ErrorMessages.ContainerNotFound);
            }

            // container record status is 0:Incoming
            if (containerToDelete.status_flag != DomainConstant.Containers.StatusFlag.Incoming)
            {
                throw new BadRequestException(ErrorMessages.ContainerShouldIncoming);
            }

            var packingHeaderToDelete = await _packingHeaderRepository.GetPackingListHeaderByConditionAsync(x => x.container_id == containerId);
            var packingDetailToDelete = new List<PackingDetail>();
            if (packingHeaderToDelete.Count > 0)
            {
                packingDetailToDelete = await _packingDetailRepository.GetPackingListDetailByConditionAsync(x => packingHeaderToDelete.Select(pkh => pkh.id).Contains(x.packing_header_id));
            }
            var containerAsnToDelete = await _containerAsnRepository.GetContainerAsnByConditionAsync(x => x.container_id == containerId);

            try
            {
                _unitOfWork.BeginTransaction();
                // - Delete Container, ContainerASN, PackingHeader and PackingDetail records for Container.
                await _containerRepository.DeleteAsync(containerToDelete);
                _logger.LogInformation($"Deleted container");

                if (containerAsnToDelete.Count > 0)
                {
                    await _containerAsnRepository.DeleteRangeAsync(containerAsnToDelete);
                    _logger.LogInformation("Deleted container asn count: {count}", containerAsnToDelete.Count);
                }

                if (packingHeaderToDelete.Count > 0)
                {
                    await _packingHeaderRepository.DeleteRangeAsync(packingHeaderToDelete);
                    _logger.LogInformation("Deleted packing header count: {count}", packingHeaderToDelete.Count);
                }

                if (packingDetailToDelete.Count > 0)
                {
                    await _packingDetailRepository.DeleteRangeAsync(packingDetailToDelete);
                    _logger.LogInformation("Deleted packing detail count: {count}", packingDetailToDelete.Count);
                }

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception e)
            {
                _unitOfWork.Rollback();
                _logger.LogError(e, e.Message);
                throw;
            }
        }

        #region Remove AddPackingForAsn, Create when insert new container asn
        //public async Task AddPackingForAsnAsync(string userId, int asnHeaderId, AddPackingForAsnRequestDto request)
        //{
        //    await ValidateAddPackingForAsnAsync(request);

        //    var packingListDetailToInsert = new List<PackingDetail>();
        //    var asnDetailToUpdate = new List<ASNDetail>();
        //    //var asnPackingListToInsert = new List<ASNPackingList>();
        //    //var asnPackingListToUpdate = new List<ASNPackingList>();
        //    //var asnPackingListToDelete = new List<ASNPackingList>();

        //    var asnDetailIdFromPackingList = request.items.Select(x => x.asn_detail_id).Distinct().ToList();
        //    var asnDetails = await GetAsnDetailListAsync(asnDetailIdFromPackingList);
        //    //var asnPackingListBelongToAsnHeader = await _asnPackingListRepository.GetAsnPackingListByAsnHeaderIdsAsync([asnHeaderId]);

        //    foreach (var packingInformation in request.items)
        //    {
        //        var packingListDetail = _mapper.Map<PackingDetail>(packingInformation);
        //        packingListDetail.packing_header_id = request.packing_header_id ?? 0;
        //        packingListDetail.created_by = userId;
        //        packingListDetailToInsert.Add(packingListDetail);

        //        // - Update ASNDetail.packing_list_qty based on packing_lists items.
        //        var asnDetail = asnDetails.Find(x => x.id == packingInformation.asn_detail_id);
        //        if (asnDetail is null)
        //        {
        //            throw new NotFoundException(string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(packingInformation.asn_detail_id), packingInformation.asn_detail_id));
        //        }
        //        asnDetail.packing_list_qty += packingInformation.qty;
        //        asnDetail.last_modified_by = userId;
        //        asnDetail.last_modified_on = DateTime.Now;
        //        asnDetailToUpdate.Add(asnDetail);
        //    }

        //    //HandleUpdatePackingListQtyForAsnPackingList(
        //    //    userId: userId,
        //    //    asnHeaderId: asnHeaderId,
        //    //    packingListBelongToAsnHeader: asnPackingListBelongToAsnHeader,
        //    //    packingListRecordToInsert: packingListDetailToInsert,
        //    //    packingListRecordToUpdate: null,
        //    //    packingListRecordToDelete: null,
        //    //    ref asnPackingListToInsert,
        //    //    ref asnPackingListToUpdate,
        //    //    ref asnPackingListToDelete);

        //    var packingListHeaderToInsert = new PackingHeader
        //    {
        //        created_by = userId,
        //        created_on = DateTime.Now,
        //        container_id = request.container_id,
        //    };

        //    try
        //    {
        //        _unitOfWork.BeginTransaction();
        //        if (!request.packing_header_id.HasValue || request.packing_header_id == 0)
        //        {
        //            await _packingHeaderRepository.CreateAsync(packingListHeaderToInsert);
        //            _logger.LogInformation($"Created packing list header");
        //            await _unitOfWork.SaveChangesAsync();

        //            // update packing_header_id for each packing_list_detail
        //            foreach (var packingListDetail in packingListDetailToInsert)
        //            {
        //                packingListDetail.packing_header_id = packingListHeaderToInsert.id;
        //            }
        //        }

        //        if (packingListDetailToInsert.Count > 0)
        //        {
        //            await _packingDetailRepository.CreateRangeAsync(packingListDetailToInsert);
        //            _logger.LogInformation($"Created packing list count: {packingListDetailToInsert.Count}");
        //        }

        //        //if (asnPackingListToInsert.Count > 0)
        //        //{
        //        //    await _asnPackingListRepository.CreateRangeAsync(asnPackingListToInsert);
        //        //    _logger.LogInformation($"Created {asnPackingListToInsert.Count} asn packing list");
        //        //}

        //        if (asnDetailToUpdate.Count > 0)
        //        {
        //            await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
        //            _logger.LogInformation($"Updated asn detail count: {asnDetailToUpdate.Count}");
        //        }

        //        await _unitOfWork.SaveChangesAsync();
        //        _unitOfWork.Commit();
        //    }
        //    catch (Exception ex)
        //    {
        //        _unitOfWork.Rollback();
        //        _logger.LogError(ex, ex.Message);
        //        throw;
        //    }
        //} 
        #endregion

        public async Task UpdatePackingForAsnAsync(string userId, int asnHeaderId, UpdatePackingForAsnRequestDto request)
        {
            await ValidateUpdatePackingForAsnAsync(request);

            var container = await _containerRepository.GetByIdAsync(x => x.id == request.container_id);
            if (container is null)
            {
                throw new NotFoundException(string.Format(ErrorMessages.ContainerNotFound));
            }

            // container record status is 0:Incoming
            if (container.status_flag != DomainConstant.Containers.StatusFlag.Incoming)
            {
                throw new BadRequestException(ErrorMessages.ContainerShouldIncoming);
            }

            var containerAsnToUpdate = await _containerAsnRepository.GetContainerAsnByConditionAsync(x => x.asn_header_id == asnHeaderId && x.container_id == request.container_id);
            int packingNumber = 0;
            if (containerAsnToUpdate.Count > 0)
            {
                packingNumber = GetTheLastPackingNumber(containerAsnToUpdate, container.container_no);
            }

            var packingListHeader = await _packingHeaderRepository.GetByIdAsync(x => x.id == request.packing_header_id);
            if (packingListHeader is null)
            {
                throw new BadRequestException(string.Format(ErrorMessages.PackingListHeaderNotFound, nameof(request.packing_header_id), request.packing_header_id));
            }

            var packingListDetailBelongToPackingHeader = await _packingDetailRepository.GetPackingListDetailByConditionAsync(x => x.packing_header_id == request.packing_header_id);
            var asnDetailToUpdate = new List<ASNDetail>();
            var packingListHeaderToDelete = new List<PackingHeader>();
            var packingListDetailToUpdate = new List<PackingDetail>();
            var packingListDetailToInsert = new List<PackingDetail>();
            var packingListDetailToDelete = new List<PackingDetail>();
            var asnPackingDiscrepancyToInsert = new List<ASNPackingDiscrepancy>();
            var asnPackingDiscrepancyToUpdate = new List<ASNPackingDiscrepancy>();
            var asnPackingDiscrepancyToDelete = new List<ASNPackingDiscrepancy>();

            var asnDetails = new List<ASNDetail>();
            if (request.items != null)
            {
                asnDetails = await GetAsnDetailListAsync(request.items.Select(x => x.asn_detail_id).Distinct().ToList());
            }

            var asnPackingListBelongToAsnHeader = await _asnPackingDiscrepancyRepository.GetAsnPackingDiscrepancytByAsnHeaderIdsAsync([asnHeaderId]);

            // update or create packing_list_detail
            if (request.items != null)
            {
                foreach (var packingDetailFromRequest in request.items)
                {
                    var asnDetail = asnDetails.Find(x => x.id == packingDetailFromRequest.asn_detail_id);

                    if (asnDetail is null)
                    {
                        throw new NotFoundException(string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(packingDetailFromRequest.asn_detail_id), packingDetailFromRequest.asn_detail_id));
                    }

                    var mode = Mode.Update;
                    var packingDetail = packingListDetailBelongToPackingHeader.Find(x => x.id == packingDetailFromRequest.id);
                    if (packingDetail is null)
                    {
                        mode = Mode.Insert;
                        packingDetail = new PackingDetail();
                    }
                    _mapper.Map(packingDetailFromRequest, packingDetail);

                    switch (mode)
                    {
                        case Mode.Insert:
                            {
                                packingDetail.qty = packingDetailFromRequest.qty;
                                packingDetail.packing_header_id = request.packing_header_id;
                                packingDetail.created_by = userId;
                                packingDetail.created_on = DateTime.Now;
                                packingListDetailToInsert.Add(packingDetail);

                                asnDetail.packing_list_qty += packingDetailFromRequest.qty;
                                asnDetail.last_modified_by = userId;
                                asnDetail.last_modified_on = DateTime.Now;
                                asnDetailToUpdate.Add(asnDetail);

                                // increase packing number for different Packing List in a container.
                                var containerAsn = containerAsnToUpdate.Find(x => x.container_id == request.container_id);
                                if (containerAsn is null)
                                {
                                    containerAsn = new ContainerASN
                                    {
                                        container_id = request.container_id,
                                        asn_header_id = asnHeaderId,
                                        packing_list_no = $"PL-{container.container_no}-{++packingNumber:D2}",
                                        created_by = userId,
                                        created_on = DateTime.Now,
                                    };
                                    containerAsnToUpdate.Add(containerAsn);
                                    continue;
                                }

                                containerAsn.packing_list_no = $"PL-{container.container_no}-{++packingNumber:D2}";
                                containerAsn.last_modified_by = userId;
                                containerAsn.last_modified_on = DateTime.Now;
                                containerAsnToUpdate.Add(containerAsn);
                                break;
                            }
                        case Mode.Update:
                            {
                                var diffQty = packingDetailFromRequest.qty - packingDetail.qty;
                                if (diffQty != 0)
                                {
                                    asnDetail.packing_list_qty += diffQty;
                                    asnDetail.last_modified_by = userId;
                                    asnDetail.last_modified_on = DateTime.Now;
                                    asnDetailToUpdate.Add(asnDetail);
                                }

                                packingDetail.qty = packingDetailFromRequest.qty;
                                packingDetail.last_modified_by = userId;
                                packingDetail.last_modified_on = DateTime.Now;
                                packingListDetailToUpdate.Add(packingDetail);
                                break;
                            }
                    }
                }

                HandleUpdatePackingListQtyForAsnPackingList(userId: userId,
                    asnHeaderId: asnHeaderId,
                    packingListBelongToAsnHeader: asnPackingListBelongToAsnHeader,
                    packingListRecordToInsert: packingListDetailToInsert,
                    packingListRecordToUpdate: packingListDetailToUpdate,
                    packingListRecordToDelete: null,
                    ref asnPackingDiscrepancyToInsert,
                    ref asnPackingDiscrepancyToUpdate,
                    ref asnPackingDiscrepancyToDelete);
            }

            // delete packing_list_detail
            if (request.delete_id is not null && request.delete_id.Count > 0)
            {
                packingListDetailToDelete.AddRange(packingListDetailBelongToPackingHeader.Where(x => request.delete_id.Contains(x.id)).ToList());

                // - If all records in packing_details for packing_header_id is deleted, delete PackingHeader record. 
                if (packingListDetailBelongToPackingHeader.Count == packingListDetailToDelete.Count)
                {
                    packingListHeaderToDelete.Add(packingListHeader);
                }

                HandleUpdatePackingListQtyForAsnPackingList(userId: userId,
                    asnHeaderId: asnHeaderId,
                    packingListBelongToAsnHeader: asnPackingListBelongToAsnHeader,
                    packingListRecordToInsert: null,
                    packingListRecordToUpdate: null,
                    packingListRecordToDelete: packingListDetailToDelete,
                    ref asnPackingDiscrepancyToInsert,
                    ref asnPackingDiscrepancyToUpdate,
                    ref asnPackingDiscrepancyToDelete);
            }

            try
            {
                _unitOfWork.BeginTransaction();

                if (packingListDetailToInsert.Count > 0)
                {
                    await _packingDetailRepository.CreateRangeAsync(packingListDetailToInsert);
                    _logger.LogInformation("Inserted {count} packing detail", packingListDetailToInsert.Count);
                }

                if (packingListDetailToUpdate.Count > 0)
                {
                    await _packingDetailRepository.UpdateRangeAsync(packingListDetailToUpdate);
                    _logger.LogInformation("Updated {count} packing detail", packingListDetailToUpdate.Count);
                }

                if (packingListDetailToDelete.Count > 0)
                {
                    await _packingDetailRepository.DeleteRangeAsync(packingListDetailToDelete);
                    _logger.LogInformation("Deleted {count} packing detail", packingListDetailToDelete.Count);
                }

                if (packingListHeaderToDelete.Count > 0)
                {
                    await _packingHeaderRepository.DeleteRangeAsync(packingListHeaderToDelete);
                    _logger.LogInformation("Deleted {count} packing header", packingListHeaderToDelete.Count);
                }

                if (asnDetailToUpdate.Count > 0)
                {
                    await _asnDetailRepository.UpdateRangeAsync(asnDetailToUpdate);
                    _logger.LogInformation("Updated {count} asn detail", asnDetailToUpdate.Count);
                }

                if (containerAsnToUpdate.Count > 0)
                {
                    await _containerAsnRepository.UpdateRangeAsync(containerAsnToUpdate);
                    _logger.LogInformation("Updated {count} container asn", containerAsnToUpdate.Count);
                }

                if (asnPackingDiscrepancyToInsert.Count > 0)
                {
                    await _asnPackingDiscrepancyRepository.CreateRangeAsync(asnPackingDiscrepancyToInsert);
                    _logger.LogInformation("Inserted {count} asn packing discrepancy", asnPackingDiscrepancyToInsert.Count);
                }

                if (asnPackingDiscrepancyToUpdate.Count > 0)
                {
                    await _asnPackingDiscrepancyRepository.UpdateRangeAsync(asnPackingDiscrepancyToUpdate);
                    _logger.LogInformation("Updated {count} asn packing discrepancy", asnPackingDiscrepancyToUpdate.Count);
                }

                if (asnPackingDiscrepancyToDelete.Count > 0)
                {
                    await _asnPackingDiscrepancyRepository.DeleteRangeAsync(asnPackingDiscrepancyToDelete);
                    _logger.LogInformation("Deleted {count} asn packing discrepancy", asnPackingDiscrepancyToDelete.Count);
                }

                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception ex)
            {
                _unitOfWork.Rollback();
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }

        public PagedResponse<PackingDiscrepancyListResponseDto> GetPackingDiscrepancyList(SearchPackingInfoRequestDto request)
        {
            var query = _asnPackingDiscrepancyRepository.BuildPackingDiscrepancyListQuery(new FilterPackingListRequestModel()
            {
                Keyword = request.Keyword,
                AsnHeaderId = request.asn_header_id,
            });

            var listSort = new List<Sortable>
            {
                new()
                {
                    FieldName = request.SortBy ?? DefaultSortField.PackingList,
                    IsAscending = request.SortAscending
                }
            };

            var orderBy = ApplySort.GetOrderByFunction<PackingDiscrepancyListResponseDetail>(listSort);

            var totalRows = query.Count();

            if (totalRows == 0)
            {
                return new PagedResponse<PackingDiscrepancyListResponseDto>();
            }

            var pageable = PagingUtilities.GetPageable(request.Page, request.PageSize);
            var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);
            var totalPage = (int)Math.Ceiling(totalRows / (double)pageable.Size);

            var pagedResponse = orderBy(query)
                .Skip(skipRow)
                .Take(pageable.Size)
                .ToList();

            var result = _mapper.Map<List<PackingDiscrepancyListResponseDto>>(pagedResponse);

            return new PagedResponse<PackingDiscrepancyListResponseDto>
            {
                Items = result,
                TotalItems = totalRows,
                TotalPage = totalPage,
                Page = pageable.Page,
                PageSize = pageable.Size
            };
        }

        public async Task UpdateShippingAsync(string userId, UpdateShippingInformationRequestDto request)
        {
            var asnHeader = await _asnHeaderRepository.GetByIdAsync(x => x.id == request.asn_header_id);
            if (asnHeader is null)
            {
                throw new NotFoundException(
                    string.Format(ErrorMessages.AdvancedShipmentNoticeNotFound, nameof(request.asn_header_id),
                        request.asn_header_id));
            }

            asnHeader.bl_awb_provided = request.shipping_information.bl_awb_provided;
            asnHeader.last_modified_by = userId;
            asnHeader.last_modified_on = DateTime.Now;

            switch (request.shipping_information.bl_awb_provided)
            {
                case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.NotAvailable:
                    {
                        // bl_awb_provided: "NA" 
                        // - If there are InboundShipment record for asn_header_id, update status_flag to 90: Cancelled
                        // - If there are InboundShipmentRequest for asn_header_id, update status_flag to 90: Cancelled
                        var inboundShipmentBelongToAsnHeader = await _inboundShipmentRepository.GetListInboundShipmentByAsnHeaderAsync(asnHeader.id);
                        var inboundShipmentRequestBelongToAsnHeader = await _inboundShipmentRequestRepository.GetByConditionAsync(x => x.asn_header_id == asnHeader.id);

                        foreach (var inboundShipmentRequest in inboundShipmentRequestBelongToAsnHeader)
                        {
                            inboundShipmentRequest.status_flag = DomainConstant.InboundShipmentsRequest.StatusFlag.Cancelled;
                            inboundShipmentRequest.last_modified_by = userId;
                            inboundShipmentRequest.last_modified_on = DateTime.Now;
                        }

                        foreach (var inboundShipment in inboundShipmentBelongToAsnHeader)
                        {
                            inboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.Cancelled;
                            inboundShipment.last_modified_by = userId;
                            inboundShipment.last_modified_on = DateTime.Now;
                        }

                        try
                        {
                            _unitOfWork.BeginTransaction();
                            await _asnHeaderRepository.UpdateAsync(asnHeader);

                            if (inboundShipmentBelongToAsnHeader.Count > 0)
                            {
                                await _inboundShipmentRepository.UpdateRangeAsync(inboundShipmentBelongToAsnHeader);
                                _logger.LogInformation("Updated {count} inbound shipment", inboundShipmentBelongToAsnHeader.Count);
                            }

                            if (inboundShipmentRequestBelongToAsnHeader.Count > 0)
                            {
                                await _inboundShipmentRequestRepository.UpdateRangeAsync(inboundShipmentRequestBelongToAsnHeader);
                                _logger.LogInformation("Updated {count} inbound shipment request", inboundShipmentRequestBelongToAsnHeader.Count);
                            }

                            await _unitOfWork.SaveChangesAsync();
                            _unitOfWork.Commit();
                        }
                        catch (Exception ex)
                        {
                            _unitOfWork.Rollback();
                            _logger.LogError(ex, ex.Message);
                            throw;
                        }
                        break;
                    }
                case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.Yes:
                    {
                        // bl_awb_provided: "Y"
                        // - If there are InboundShipmentRequest for asn_header_id, update status_flag to 90: Cancelled
                        var inboundShipmentRequestBelongToAsnHeader =
                            await _inboundShipmentRequestRepository.GetByConditionAsync(x => x.asn_header_id == asnHeader.id);

                        foreach (var inboundShipmentRequest in inboundShipmentRequestBelongToAsnHeader)
                        {
                            inboundShipmentRequest.status_flag = DomainConstant.InboundShipmentsRequest.StatusFlag.Cancelled;
                            inboundShipmentRequest.last_modified_by = userId;
                            inboundShipmentRequest.last_modified_on = DateTime.Now;
                        }

                        // - Insert/Update into InboundShipment, InboundShipmentASN
                        var inboundShipmentAsn = await _inboundShipmentAsnRepository.GetByIdAsync(x => x.asn_header_id == asnHeader.id);
                        if (inboundShipmentAsn is null)
                        {
                            try
                            {
                                if (inboundShipmentRequestBelongToAsnHeader.Count > 0)
                                {
                                    await _inboundShipmentRequestRepository.UpdateRangeAsync(inboundShipmentRequestBelongToAsnHeader);
                                    _logger.LogInformation("Updated {count} inbound shipment request", inboundShipmentRequestBelongToAsnHeader.Count);
                                }

                                var inboundShipment = _mapper.Map<InboundShipment>(request.shipping_information);
                                var seqIsh = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipment);
                                inboundShipment.inbound_shipment_no = $"{SequenceTracking.Type.InboundShipment}{DateTime.Now:yyMM}{seqIsh:00000}";
                                inboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.New;
                                inboundShipment.created_by = userId;

                                _unitOfWork.BeginTransaction();
                                await _asnHeaderRepository.UpdateAsync(asnHeader);
                                await _inboundShipmentRepository.CreateAsync(inboundShipment);
                                await _unitOfWork.SaveChangesAsync();

                                inboundShipmentAsn = new InboundShipmentASN
                                {
                                    asn_header_id = asnHeader.id,
                                    inbound_shipment_id = inboundShipment.id,
                                    created_by = userId
                                };

                                await _inboundShipmentAsnRepository.CreateAsync(inboundShipmentAsn);
                                await _unitOfWork.SaveChangesAsync();
                                _unitOfWork.Commit();
                            }
                            catch (Exception ex)
                            {
                                _unitOfWork.Rollback();
                                _logger.LogError(ex, ex.Message);
                                throw;
                            }
                        }
                        else
                        {
                            var inboundShipment = await _inboundShipmentRepository.GetByIdAsync(x => x.id == inboundShipmentAsn.inbound_shipment_id);

                            if (inboundShipment is null)
                            {
                                throw new NotFoundException(string.Format(ErrorMessages.InboundShipmentNotFound, nameof(InboundShipment.id), inboundShipmentAsn.inbound_shipment_id));
                            }

                            _mapper.Map(request.shipping_information, inboundShipment);
                            inboundShipment.last_modified_by = userId;
                            inboundShipment.last_modified_on = DateTime.Now;

                            try
                            {
                                _unitOfWork.BeginTransaction();
                                await _asnHeaderRepository.UpdateAsync(asnHeader);
                                if (inboundShipmentRequestBelongToAsnHeader.Count > 0)
                                {
                                    await _inboundShipmentRequestRepository.UpdateRangeAsync(
                                        inboundShipmentRequestBelongToAsnHeader);
                                    _logger.LogInformation("Updated {count} inbound shipment request",
                                        inboundShipmentRequestBelongToAsnHeader.Count);
                                }

                                await _inboundShipmentRepository.UpdateAsync(inboundShipment);
                                await _unitOfWork.SaveChangesAsync();
                                _unitOfWork.Commit();
                            }
                            catch (Exception ex)
                            {
                                _unitOfWork.Rollback();
                                _logger.LogError(ex, ex.Message);
                                throw;
                            }
                        }

                        break;
                    }
                case DomainConstant.AdvancedShipmentNotices.BlAwbProvider.No:
                    {
                        // bl_awb_provided: "N"
                        // - Insert/Update into InboundShipmentRequest
                        var mode = Mode.Update;
                        var inboundShipmentRequest = await _inboundShipmentRequestRepository.GetByIdAsync(x => x.asn_header_id == asnHeader.id);
                        if (inboundShipmentRequest is null)
                        {
                            mode = Mode.Insert;
                            var seqIsr = await _sequenceTrackingRepository.GetSequenceNoByType(SequenceTracking.Type.InboundShipmentRequest);
                            inboundShipmentRequest = _mapper.Map<InboundShipmentRequest>(request.shipping_information);
                            inboundShipmentRequest.inbound_shipment_request_no = $"{SequenceTracking.Type.InboundShipmentRequest}{DateTime.Now:yyMM}{seqIsr:00000}";
                            inboundShipmentRequest.status_flag = DomainConstant.InboundShipmentsRequest.StatusFlag.New;
                            inboundShipmentRequest.asn_header_id = asnHeader.id;
                            inboundShipmentRequest.created_by = userId;
                        }
                        else
                        {
                            _mapper.Map(request.shipping_information, inboundShipmentRequest);
                            inboundShipmentRequest.last_modified_by = userId;
                            inboundShipmentRequest.last_modified_on = DateTime.Now;
                        }

                        // - If there are InboundShipment record for asn_header_id, update status_flag to 90: Cancelled
                        var inboundShipmentBelongToAsnHeader = await _inboundShipmentRepository.GetListInboundShipmentByAsnHeaderAsync(asnHeader.id);
                        foreach (var inboundShipment in inboundShipmentBelongToAsnHeader)
                        {
                            inboundShipment.status_flag = DomainConstant.InboundShipments.StatusFlag.Cancelled;
                            inboundShipment.last_modified_by = userId;
                            inboundShipment.last_modified_on = DateTime.Now;
                        }

                        try
                        {
                            _unitOfWork.BeginTransaction();
                            await _asnHeaderRepository.UpdateAsync(asnHeader);
                            if (mode == Mode.Insert)
                            {
                                await _inboundShipmentRequestRepository.CreateAsync(inboundShipmentRequest);
                            }
                            else
                            {
                                await _inboundShipmentRequestRepository.UpdateAsync(inboundShipmentRequest);
                            }

                            if (inboundShipmentBelongToAsnHeader.Count > 0)
                            {
                                await _inboundShipmentRepository.UpdateRangeAsync(inboundShipmentBelongToAsnHeader);
                                _logger.LogInformation("Updated {count} inbound shipment", inboundShipmentBelongToAsnHeader.Count);
                            }
                            await _unitOfWork.SaveChangesAsync();
                            _unitOfWork.Commit();
                        }
                        catch (Exception e)
                        {
                            _unitOfWork.Rollback();
                            _logger.LogError(e, e.Message);
                            throw;
                        }
                        break;
                    }
            }
        }

        #region Private Methods
        private int GetTheLastPackingNumber(List<ContainerASN> containerAsnToUpdate, string containerNo)
        {
            if (containerAsnToUpdate.Count == 0)
            {
                return 0;
            }

            var lastPackingNumber = containerAsnToUpdate.OrderByDescending(x => x.id).First();
            // PL-[Container No]-99. 99 is a running number from 01 to 99 for different Packing List in a container.
            if (int.TryParse(lastPackingNumber.packing_list_no.Replace($"PL-{containerNo}", ""), out var number))
            {
                number = 0;
            }

            return number;
        }

        private async Task<List<ASNDetail>> GetAsnDetailListAsync(List<int> asnDetailIds)
        {
            if (asnDetailIds.Count == 0)
            {
                return [];
            }

            var asnDetails = await _asnDetailRepository.Find(x => asnDetailIds.Contains(x.id));
            return asnDetails.ToList();
        }

        /// <summary>
        /// Handle Update Asn Qty For AsnPackingList
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="asnHeaderId"></param>
        /// <param name="packingListBelongToAsnHeader"></param>
        /// <param name="asnDetailRecordToInsert"></param>
        /// <param name="asnDetailRecordToUpdate"></param>
        /// <param name="asnDetailRecordToDelete"></param>
        /// <param name="asnPackingListToInsert"></param>
        /// <param name="asnPackingListToUpdate"></param>
        /// <param name="asnPackingListToDelete"></param>
        private void HandleUpdateAsnQtyForAsnPackingList(
            string userId,
            int asnHeaderId,
            List<ASNPackingDiscrepancy> packingListBelongToAsnHeader,
            List<ASNDetail>? asnDetailRecordToInsert,
            List<ASNDetail>? asnDetailRecordToUpdate,
            List<ASNDetail>? asnDetailRecordToDelete,
            ref List<ASNPackingDiscrepancy> asnPackingListToInsert,
            ref List<ASNPackingDiscrepancy> asnPackingListToUpdate,
            ref List<ASNPackingDiscrepancy> asnPackingListToDelete)
        {
            var currentDateTime = DateTime.Now;
            // New Details record
            if (asnDetailRecordToInsert is not null && asnDetailRecordToInsert.Count > 0)
            {
                var asnQtyFromNewRecords = asnDetailRecordToInsert.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                    uom = x.FirstOrDefault(y => string.IsNullOrEmpty(y.uom) == false)?.uom ?? string.Empty
                }).ToList();

                foreach (var asnDetailData in asnQtyFromNewRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == asnDetailData.item_id &&
                        x.country_of_origin_id == asnDetailData.country_of_origin_id);

                    // - If item_id and country_of origin is not found in ASNPackingList,
                    // create record in ASNPackingList grouped by item_id and country_of_origin_id for asn_qty. 
                    if (asnPackingList is null)
                    {
                        asnPackingList = new ASNPackingDiscrepancy
                        {
                            asn_header_id = asnHeaderId,
                            item_id = asnDetailData.item_id,
                            country_of_origin_id = asnDetailData.country_of_origin_id,
                            asn_qty = asnDetailData.qty,
                            uom = asnDetailData.uom,
                            created_by = userId,
                            created_on = currentDateTime
                        };
                        asnPackingListToInsert.Add(asnPackingList);
                    }
                    // - If item_id and country_of origin is found in ASNPackingList,
                    // update record in ASNPackingList grouped by item_id and country_of_origin_id for asn_qty. 
                    else
                    {
                        if (asnDetailData.qty == asnPackingList.asn_qty)
                        {
                            continue;
                        }

                        asnPackingList.asn_qty = asnDetailData.qty;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }

            // Existing Details record
            if (asnDetailRecordToUpdate is not null && asnDetailRecordToUpdate.Count > 0)
            {
                var asnQtyFromExistingRecords = asnDetailRecordToUpdate.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                    uom = x.FirstOrDefault(y => string.IsNullOrEmpty(y.uom) == false)?.uom ?? string.Empty
                }).ToList();

                foreach (var asnDetailData in asnQtyFromExistingRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == asnDetailData.item_id &&
                        x.country_of_origin_id == asnDetailData.country_of_origin_id);

                    // - Get the difference in qty update and add to ASNPackingList.asn_qty
                    var asnQtyDiff = asnDetailData.qty - (asnPackingList?.asn_qty ?? 0);
                    if (asnQtyDiff == 0)
                    {
                        continue;
                    }

                    if (asnPackingList is null)
                    {
                        asnPackingList = new ASNPackingDiscrepancy
                        {
                            asn_header_id = asnHeaderId,
                            item_id = asnDetailData.item_id,
                            country_of_origin_id = asnDetailData.country_of_origin_id,
                            asn_qty = asnDetailData.qty,
                            uom = asnDetailData.uom,
                            created_by = userId,
                            created_on = currentDateTime
                        };
                        asnPackingListToInsert.Add(asnPackingList);
                    }
                    else
                    {
                        asnPackingList.asn_qty += asnQtyDiff;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }

            // Deleting Detail record
            if (asnDetailRecordToDelete is not null && asnDetailRecordToDelete.Count > 0)
            {
                // For deleted items, deduct asn_detail.qty from ASNPackingList.asn_qty 
                var asnQtyFromDeletedRecords = asnDetailRecordToDelete.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                }).ToList();

                foreach (var asnDetailData in asnQtyFromDeletedRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == asnDetailData.item_id &&
                        x.country_of_origin_id == asnDetailData.country_of_origin_id);

                    if (asnPackingList is null)
                    {
                        continue;
                    }

                    if (asnDetailData.qty == asnPackingList.asn_qty)
                    {
                        asnPackingListToDelete.Add(asnPackingList);
                    }
                    else
                    {
                        asnPackingList.asn_qty -= asnDetailData.qty;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }
        }

        /// <summary>
        /// Handle Update Packing List Qty for ASN Packing List
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="asnHeaderId"></param>
        /// <param name="packingListBelongToAsnHeader"></param>
        /// <param name="packingListRecordToInsert"></param>
        /// <param name="packingListRecordToUpdate"></param>
        /// <param name="packingListRecordToDelete"></param>
        /// <param name="asnPackingListToInsert"></param>
        /// <param name="asnPackingListToUpdate"></param>
        /// <param name="asnPackingListToDelete"></param>
        private void HandleUpdatePackingListQtyForAsnPackingList(
            string userId,
            int asnHeaderId,
            List<ASNPackingDiscrepancy> packingListBelongToAsnHeader,
            List<PackingDetail>? packingListRecordToInsert,
            List<PackingDetail>? packingListRecordToUpdate,
            List<PackingDetail>? packingListRecordToDelete,
            ref List<ASNPackingDiscrepancy> asnPackingListToInsert,
            ref List<ASNPackingDiscrepancy> asnPackingListToUpdate,
            ref List<ASNPackingDiscrepancy> asnPackingListToDelete)
        {
            var currentDateTime = DateTime.Now;
            // New Details record
            if (packingListRecordToInsert is not null && packingListRecordToInsert.Count > 0)
            {
                var packingListQtyFromNewRecords = packingListRecordToInsert.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                }).ToList();

                foreach (var packingListData in packingListQtyFromNewRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == packingListData.item_id &&
                        x.country_of_origin_id == packingListData.country_of_origin_id);

                    // - If item_id and country_of origin is not found in ASNPackingList,
                    // create record in ASNPackingList grouped by item_id and country_of_origin_id for packing_list_qty. 
                    if (asnPackingList is null)
                    {
                        asnPackingList = new ASNPackingDiscrepancy
                        {
                            asn_header_id = asnHeaderId,
                            item_id = packingListData.item_id,
                            country_of_origin_id = packingListData.country_of_origin_id,
                            packing_list_qty = packingListData.qty,
                            created_by = userId,
                            created_on = currentDateTime
                        };
                        asnPackingListToInsert.Add(asnPackingList);
                    }
                    // - If item_id and country_of origin is found in ASNPackingList,
                    // update record in ASNPackingList grouped by item_id and country_of_origin_id for packing_list_qty.
                    else
                    {
                        if (packingListData.qty == asnPackingList.packing_list_qty)
                        {
                            continue;
                        }

                        asnPackingList.packing_list_qty = packingListData.qty;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }

            // Existing Details record
            if (packingListRecordToUpdate is not null && packingListRecordToUpdate.Count > 0)
            {
                var packingListQtyFromExistingRecords = packingListRecordToUpdate.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                }).ToList();

                foreach (var asnDetailData in packingListQtyFromExistingRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == asnDetailData.item_id &&
                        x.country_of_origin_id == asnDetailData.country_of_origin_id);

                    // - Get the difference in qty update and add to ASNPackingList.packing_list_qty and ASNDetail.packing_list_qty
                    var pklQtyDiff = asnDetailData.qty - (asnPackingList?.packing_list_qty ?? 0);
                    if (pklQtyDiff == 0)
                    {
                        continue;
                    }

                    if (asnPackingList is null)
                    {
                        asnPackingList = new ASNPackingDiscrepancy
                        {
                            asn_header_id = asnHeaderId,
                            item_id = asnDetailData.item_id,
                            country_of_origin_id = asnDetailData.country_of_origin_id,
                            packing_list_qty = asnDetailData.qty,
                            created_by = userId,
                            created_on = currentDateTime
                        };
                        asnPackingListToInsert.Add(asnPackingList);
                    }
                    else
                    {
                        asnPackingList.packing_list_qty += pklQtyDiff;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }

            // Deleting Detail record
            if (packingListRecordToDelete is not null && packingListRecordToDelete.Count > 0)
            {
                // For deleted items, deduct asn_detail.qty from ASNPackingList.packing_list_qty 
                var packingListQtyFromDeletedRecords = packingListRecordToDelete.GroupBy(x => new
                {
                    x.item_id,
                    x.country_of_origin_id
                }).Select(x => new
                {
                    x.Key.item_id,
                    x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                }).ToList();

                foreach (var pklDetailData in packingListQtyFromDeletedRecords)
                {
                    var asnPackingList = packingListBelongToAsnHeader.Find(x =>
                        x.item_id == pklDetailData.item_id &&
                        x.country_of_origin_id == pklDetailData.country_of_origin_id);

                    if (asnPackingList is null)
                    {
                        continue;
                    }

                    if (pklDetailData.qty == asnPackingList.packing_list_qty)
                    {
                        asnPackingListToDelete.Add(asnPackingList);
                    }
                    else
                    {
                        asnPackingList.packing_list_qty -= pklDetailData.qty;
                        asnPackingList.last_modified_by = userId;
                        asnPackingList.last_modified_on = currentDateTime;
                        asnPackingListToUpdate.Add(asnPackingList);
                    }
                }
            }
        }

        private async Task ValidateAddPackingForAsnAsync(AddPackingForAsnRequestDto request)
        {
            // - Container record status is 0:Incoming
            var container = await _containerRepository.Find(x => x.id == request.container_id && x.status_flag == DomainConstant.Containers.StatusFlag.Incoming);
            if (!container.Any())
            {
                throw new BadRequestException(ErrorMessages.ContainerFileNotFound);
            }
        }

        private async Task ValidateUpdatePackingForAsnAsync(UpdatePackingForAsnRequestDto request)
        {
            // - Container record status is 0:Incoming
            var container = await _containerRepository.Find(x => x.id == request.container_id && x.status_flag == DomainConstant.Containers.StatusFlag.Incoming);
            if (!container.Any())
            {
                throw new BadRequestException(ErrorMessages.ContainerFileNotFound);
            }
        }

        private async Task ValidateUpdateContainerAsync(string containerNo, UpdateContainerForAsnRequestDto request)
        {
            // - Container No can be blank if shipment_type is L: Loose
            if (request.shipment_type != DomainConstant.Containers.ShipmentType.Loose && string.IsNullOrEmpty(request.container_no))
            {
                throw new BadRequestException(ErrorMessages.ContainerNoBlank);
            }

            // - If Container No is updated, Container No does not exists in Container table with status that is not 4: Completed.
            if (!containerNo.Equals(request.container_no))
            {
                var invalidContainer = await _containerRepository.Find(x => x.container_no == containerNo
                                                                            && x.status_flag == DomainConstant.Containers.StatusFlag.Completed);
                if (invalidContainer.Any())
                {
                    throw new BadRequestException(ErrorMessages.CanAddCreateUpdateContainerToAsn);
                }
            }
        }

        private async Task ValidateCreateContainerAsync(int asnHeaderId, CreateContainerForAsnRequestDto request)
        {
            // - Container No can be blank if shipment_type is L: Loose
            if (request.shipment_type != DomainConstant.Containers.ShipmentType.Loose && string.IsNullOrEmpty(request.container_no))
            {
                throw new BadRequestException(ErrorMessages.ContainerNoBlank);
            }

            // - Container No does not exist in Container table with status that is not 4: Completed.
            var invalidContainer = await _containerRepository.GetContainerByConditionAsync(x =>
                x.container_no == request.container_no &&
                x.status_flag == DomainConstant.Containers.StatusFlag.Completed);
            if (invalidContainer.Any())
            {
                throw new BadRequestException(ErrorMessages.CanAddCreateUpdateContainerToAsn);
            }

            // do not allow container_id if already in ContainerASN
            if (request.container_id.HasValue && request.container_id != 0)
            {
                var containerAsn = await _containerAsnRepository.GetContainerAsnByConditionAsync(x => x.container_id == request.container_id.Value && x.asn_header_id == asnHeaderId);
                if (containerAsn.Any())
                {
                    throw new BadRequestException(ErrorMessages.DoesNotAllowToAddContainerAlreadyMapped);
                }
            }
        }

        private void DeductQtyAndRemoveAsnDetail(
            string userId,
            List<InvoiceDetail> invoiceDetails,
            List<ASNDetail> asnDetails,
            List<ASNDetail> asnDetailToDelete,
            List<ASNDetail> asnDetailToUpdate)
        {
            // - Update ASNDetail by grouping invoiceDetail record by item_id and country_of_origin_id. Qty is sum.
            var affectedAnsDetails = invoiceDetails
                .GroupBy(x => new { x.po_detail_id, x.country_of_origin_id })
                .Select(x => new ASNDetail
                {
                    po_detail_id = x.Key.po_detail_id,
                    country_of_origin_id = x.Key.country_of_origin_id,
                    qty = x.Sum(y => y.qty),
                }).ToList();

            // calculate for all asn detail belong to asn_header_id
            foreach (var asnDetailFromInvoice in affectedAnsDetails)
            {
                var asnFromDb = asnDetails.Find(x => x.item_id == asnDetailFromInvoice.item_id &&
                                                     x.country_of_origin_id == asnDetailFromInvoice.country_of_origin_id);

                if (asnFromDb is null) continue;

                if (asnDetailFromInvoice.qty == asnFromDb.qty)
                {
                    asnDetailToDelete.Add(asnFromDb);
                    continue;
                }

                asnFromDb.qty -= asnDetailFromInvoice.qty;
                asnFromDb.last_modified_by = userId;
                asnFromDb.last_modified_on = DateTime.Now;
                asnDetailToUpdate.Add(asnFromDb);
            }
        }

        private async Task<List<InvoiceHeader>> GetInvoiceHeaderByAsnHeaderId(int asnHeaderId)
        {
            var invoiceHeaders = await _invoiceHeaderRepository.Find(x => x.asn_header_id == asnHeaderId);
            return invoiceHeaders.ToList();
        }

        private async Task<List<InvoiceDetail>> GetInvoiceDetailListByInvoiceHeaderId(List<int> invoiceHeaderIds)
        {
            var invoiceDetails = await _invoiceDetailRepository.Find(x => invoiceHeaderIds.Contains(x.invoice_header_id));
            return invoiceDetails.ToList();
        }

        private async Task<List<InvoiceDetail>> GetInvoiceDetailList(List<int> listInvoiceDetailId)
        {
            var invoiceDetails = await _invoiceDetailRepository.Find(x => listInvoiceDetailId.Contains(x.id));
            return invoiceDetails.ToList();
        }

        private async Task<List<ASNFile>> GetAsnFileByAsnHeaderId(int asnHeaderId, List<int> asnFileIDs)
        {
            var asnFile = await _asnFileRepository.Find(x => x.asn_header_id == asnHeaderId && asnFileIDs.Contains(x.id));

            return asnFile.ToList();
        }

        private async Task ValidateFileUpload(string[] fileNames)
        {
            var duplicateFileName = fileNames
                .GroupBy(fileName => fileName)
                .Where(x => x.Count() > 1)
                .Select(x => x.Key)
                .ToArray();

            if (duplicateFileName.Length > 0)
            {
                throw new BadRequestException(ErrorCodes.FileNameDuplicated, ErrorMessages.FileNameDuplicated,
                    duplicateFileName);
            }

            // validate duplicate item-name in database
            var fileNameAlreadyExistedInDatabase = await _fileTrackingRepository.ValidateFileNameInDatabase(fileNames);
            if (fileNameAlreadyExistedInDatabase.Length > 0)
            {
                throw new BadRequestException(ErrorCodes.FileNameDuplicated, ErrorMessages.FileNameDuplicated,
                    fileNameAlreadyExistedInDatabase);
            }
        }

        private async Task<List<ASNDetail>> GetAsnDetail(DeleteAsnLineRequestDto request)
        {
            var asnDetails = await _asnDetailRepository.Find(x =>
                x.asn_header_id == request.AsnHeaderId && request.AsnDetailIDs.Contains(x.id));

            return asnDetails.ToList();
        }

        private void GiveBackQtyToPoDetail(string userId, InvoiceDetail invoiceDetail, List<PODetail> poDetailList)
        {
            var poDetail = poDetailList.FirstOrDefault(x => x.id == invoiceDetail.po_detail_id);
            if (poDetail is null)
            {
                _logger.LogError("Cannot find PO Detail by ID: {0}", invoiceDetail.po_detail_id);
                return;
            }
            poDetail.open_qty += invoiceDetail.qty;
            poDetail.last_modified_by = userId;
            poDetail.last_modified_on = DateTime.Now;
        }

        private async Task<List<ASNDetail>> GetAsnDetailByAsnHeaderId(int asnHeaderId)
        {
            var asnDetails = await _asnDetailRepository.Find(x => x.asn_header_id == asnHeaderId);

            return asnDetails.ToList();
        }

        private async Task<List<PODetail>> GetPoDetailList(HashSet<int> poDetailIds)
        {
            if (poDetailIds.Count == 0)
            {
                return [];
            }

            var query = await _poDetailRepository.Find(x => poDetailIds.Contains(x.id));

            return query.ToList();
        }

        private void UpdateAsnHeader(ASNHeader asn, UpdateASNInfoRequestDto infoRequest)
        {
            // - total_asn_amt calculated by sum of all line in asn detail of asn_detail.qty * asn_detail.unit_cost
            //asn.total_asn_amt = infoRequest.asn_detail.Sum(pkh => pkh.qty * pkh.unit_cost);

            // Header (Update if not null)
            // - issuing_branch_plant_id exisits in BranchPlant table with status flag of E
            // - inbound_shipment_id exists in InboundShipment table with status flag of 0:New
            // - ship_to_branch_plant_id exists in BranchPlant table with status flag of E
            // - supplier_id exists in Supplier table with status flag of E
            // - invoice_currency_id exists in Currency table with status flag of E

        }

        private void UpdateAsnDetail(ASNDetail asnDetail, UpdateASNDetailRequestDto detailRequest)
        {
            // Detail (Update if not null or new records)
            // - item_id exists in Item table with status flag of E
            // - po_detail_id exists in PODetail table with status flag that is not 30:Closed or 90:Cancelled
            // - country_of_origin_id exists in Country table with status flag of E
        }

        private async Task ValidateAsnRequest(List<ValidateASNRequest> request)
        {
            // 'Header
            // - company_id exists in Company table with status flag of E
            // - inbound_shipment_id exists in InboundShipment table with status flag of 0:New
            //var inboundShipmentIDs = request.Where(pkh => pkh.header.inbound_shipment_id.HasValue)
            //    .Select(pkh => pkh.header.inbound_shipment_id!.Value).Distinct().ToHashSet();

            //var inboundShipmentExisted = await _inboundShipmentRepository.GetQuery()
            //    .Where(pkh => inboundShipmentIDs.Contains(pkh.asnDetailId) &&
            //                pkh.status_flag == SERPConstant.InboundShipments.StatusFlag.New)
            //    .Select(pkh => pkh.asnDetailId).ToArrayAsync();

            //var invalidInboundShipmentIDs = inboundShipmentIDs.Except(inboundShipmentExisted).ToArray();

            //if (invalidInboundShipmentIDs.Length > 0)
            //{
            //    throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
            //        nameof(ASNHeader.inbound_shipment_id),
            //        string.Join(", ", invalidInboundShipmentIDs),
            //        nameof(InboundShipment),
            //        nameof(SERPConstant.InboundShipments.StatusFlag.New)));
            //}

            // - issuing_branch_plant_id exists in BranchPlant table with status flag of E
            // - ship_to_branch_plant_id exists in BranchPlant table with status flag of E
            var issuingBranchPlantIDs = request.Select(x => x.header.branch_plant_id).Distinct().ToHashSet();
            var shipToBranchPlantIDs = request.Select(x => x.header.ship_to_branch_plant_id).Distinct().ToHashSet();

            if (issuingBranchPlantIDs.Count > 0 && shipToBranchPlantIDs.Count > 0)
            {
                var branchPlantIDs = issuingBranchPlantIDs.Union(shipToBranchPlantIDs).ToHashSet();
                var branchPlantExisted = await _branchPlantRepository.GetBranchPlantAvailable(branchPlantIDs);

                var invalidIssuingBranchPlantIDs = issuingBranchPlantIDs.Except(branchPlantExisted).ToArray();
                if (invalidIssuingBranchPlantIDs.Length > 0)
                {
                    throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
                        nameof(ASNHeader.branch_plant_id), string.Join(", ", invalidIssuingBranchPlantIDs),
                        nameof(BranchPlant), nameof(ApplicationConstant.StatusFlag.Enabled)));
                }

                var invalidShipToBranchPlantIDs = shipToBranchPlantIDs.Except(branchPlantExisted).ToArray();
                if (invalidShipToBranchPlantIDs.Length > 0)
                {
                    throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
                        nameof(ASNHeader.ship_to_branch_plant_id), string.Join(", ", invalidShipToBranchPlantIDs),
                        nameof(BranchPlant), nameof(ApplicationConstant.StatusFlag.Enabled)));
                }
            }

            // - supplier_id exists in Supplier table with status flag of E
            var supplierIDs = request.Select(x => x.header.supplier_id).Distinct().ToHashSet();

            List<Supplier> supplierExisted = [];
            if (supplierIDs.Count > 0)
            {
                supplierExisted = await _supplierRepository.GetSupplierNo(supplierIDs);

                var invalidSupplierIDs = supplierIDs.Except(supplierExisted.Select(x => x.id)).ToArray();
                if (invalidSupplierIDs.Length > 0)
                {
                    throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
                        nameof(ASNHeader.supplier_id), string.Join(", ", invalidSupplierIDs),
                        nameof(Supplier), nameof(ApplicationConstant.StatusFlag.Enabled)));
                }
            }

            //// - invoice_currency_id exists in Currency table with status flag of E
            //var currencyIDs = request.Select(pkh => pkh.header.invoice_currency_id).Distinct().ToHashSet();

            //if (currencyIDs.Count > 0)
            //{
            //    var currencyExisted = await _currencyRepository.GetCurrencyAvailable(currencyIDs);

            //    var invalidCurrencyIDs = currencyIDs.Except(currencyExisted).ToArray();
            //    if (invalidCurrencyIDs.Length > 0)
            //    {
            //        throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
            //            nameof(ASNHeader.invoice_currency_id), string.Join(", ", invalidCurrencyIDs),
            //            nameof(Currency), nameof(StatusFlag.Enabled)));
            //    }
            //}

            // - Status Flag can only be 01: Draft or 02:New
            // 
            // Detail
            // - item_id exists in Item table with status flag of E
            var itemIDs = request.SelectMany(x => x.details).Select(x => x.item_id).Distinct().ToHashSet();

            if (itemIDs.Count > 0)
            {
                var itemExisted = await _itemRepository.GetItemAvailable(itemIDs);

                var invalidItemIDs = itemIDs.Except(itemExisted).ToArray();
                if (invalidItemIDs.Length > 0)
                {
                    throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
                        nameof(ASNDetail.item_id), string.Join(", ", invalidItemIDs),
                        nameof(Item), nameof(ApplicationConstant.StatusFlag.Enabled)));
                }
            }
            //// - po_detail_id exists in PODetail table with status flag that is not 30:Closed or 90:Cancelled
            //var poDetailIDs = request.SelectMany(pkh => pkh.details).Select(pkh => pkh.po_detail_id).Distinct().ToHashSet();

            //if (poDetailIDs.Count > 0)
            //{
            //    var poDetailExisted = await _poDetailRepository.GetPoDetailAvailable(poDetailIDs);

            //    var invalidPoDetailIDs = poDetailIDs.Except(poDetailExisted).ToArray();
            //    if (invalidPoDetailIDs.Length > 0)
            //    {
            //        throw new BadRequestException(string.Format(ErrorMessages.InvalidDataFromRequest,
            //            nameof(ASNDetail.po_detail_id), string.Join(", ", invalidPoDetailIDs), nameof(PODetail),
            //            $" that is not {nameof(PurchaseOrder.StatusFlag.Closed)} or {nameof(PurchaseOrder.StatusFlag.Cancelled)}"));
            //    }
            //}

            // - country_of_origin_id exists in Country table with status flag of E
            // [SE-105]: Do not allow PO to be added to ASN if Supplier is different.
            if (supplierExisted.Count > 0)
            {
                // get supplier ids from po detail asnDetailId
                var poDetailIds = request.SelectMany(x => x.details).Select(x => x.po_detail_id).Distinct().ToHashSet();
                var dicSupplierIdsFromPoDetail = await _poDetailRepository.GetSupplierIdsAsync(poDetailIds);
                if (dicSupplierIdsFromPoDetail.Count > 0)
                {
                    var invalidSupplier = supplierIDs.Where(supplierId => !dicSupplierIdsFromPoDetail.ContainsKey(supplierId));
                    foreach (var supplierId in invalidSupplier)
                    {
                        //if (dicSupplier.TryGetValue(supplierId, out var supplierInfo))
                        var supplierInfo = supplierExisted.FirstOrDefault(x => x.id == supplierId);

                        if (supplierInfo != null)
                        {
                            throw new BadRequestException(string.Format(ErrorMessages.SupplierNotMatch, supplierInfo.supplier_no));
                        }

                        throw new BadRequestException(string.Format(ErrorMessages.SupplierNotMatch, $"Id: {supplierId}"));
                    }
                }
            }

            #region Validate Container
            var containerFromRequest = request.SelectMany(x => x.container).ToList();
            // - Only 1 Container with shipment_type of L: Loose is allowed in 1 ASN.
            if (containerFromRequest.Count(x => x.shipment_type == DomainConstant.Containers.ShipmentType.Loose) > 1)
            {
                throw new BadRequestException(ErrorMessages.ContainerOnlyOneLooseInAsn);
            }

            // - If shipment_type is F: Full, Container No should not exist in Container table with status that is not 4: Completed
            var fullContainers = containerFromRequest.Where(c => c.shipment_type == DomainConstant.Containers.ShipmentType.Full).ToList();
            var containerNosInRequest = fullContainers.Select(c => c.container_no).Distinct().ToList();
            var containerAlreadyCompleted = await _containerRepository.GetContainerNoCompletedAsync(containerNosInRequest);
            var invalidContainerNo = fullContainers.Where(c => containerAlreadyCompleted.Any(existingContainer => existingContainer == c.container_no)).ToList();
            if (invalidContainerNo.Count > 0)
            {
                throw new BadRequestException(ErrorMessages.ContainerShouldNotHasStatusCompleted);
            }

            // - If container_id is given, record must be found with status_flag must be 0: Incoming or 1: Received
            var containerIdsInRequest = containerFromRequest
                .Where(c => c.container_id.HasValue)
                .Select(c => c.container_id!.Value)
                .Distinct()
                .ToList();

            var validExistingContainersById = await _containerRepository.GetExistingContainersWithAvailableByIdAsync(containerIdsInRequest);
            var invalidContainerId = containerIdsInRequest.Except(validExistingContainersById).ToList();

            if (invalidContainerId.Count > 0)
            {
                throw new BadRequestException(ErrorMessages.ContainerIdInvalidStatus);
            }
            #endregion
        }

        private async Task<AsnDetailResponseDto> GetAdvanceShipmentNoticeInfo(ASNHeader asnHeader)
        {
            var result = new AsnDetailResponseDto
            {
                asn_header = new AsnHeaderResponse(),
                asn_details = [],
                asn_files = [],
                //containers = [],
                //inbound_shipments = null,
            };

            var responseHeader = _mapper.Map<AsnHeaderResponse>(asnHeader);
            var responseDetails = await _asnDetailRepository.GetAsnDetailDataAsync(asnHeader);
            var asnInvoice = await _asnHeaderRepository.GetAsnInvoiceAsync(asnHeader.id);
            var poDetailIds = responseDetails.Select(x => x.po.po_detail_id).Distinct().ToHashSet();
            var purchaseOrderResponse = await _poDetailRepository.GetDictionaryPoDataAsync(poDetailIds); ;
            //var responseInboundShipments = await GetInboundShipmentData(asnHeader.inbound_shipment_id);
            //var blAwb = await _inboundShipmentBlAwbRepository.GetByIdAsync(pkh => pkh.asn_header_id == asnHeader.asnDetailId);
            //_mapper.Map(blAwb, responseInboundShipments);

            #region asn_detail
            foreach (var poDetail in responseDetails)
            {
                if (purchaseOrderResponse.TryGetValue(poDetail.po.po_detail_id, out var poResponse))
                {
                    poDetail.po = poResponse;
                }
            }
            #endregion

            result.asn_header = responseHeader;
            result.asn_details = _mapper.Map<List<AsnDetailResponse>>(responseDetails);
            result.invoices = _mapper.Map<List<InvoiceResponse>>(asnInvoice);
            result.asn_files = _mapper.Map<List<AsnFileResponse>>(await _asnFileRepository.GetFileInfoAsync(asnHeader.id));
            result.shipping_information =
                _mapper.Map<InboundShipmentResponseDto>(
                    await _inboundShipmentRepository.GetInboundShipmentByAsnHeaderAsync(asnHeader.id, asnHeader.bl_awb_provided));
            //result.inbound_shipments = responseInboundShipments;
            //result.inbound_shipment_request = await GetInboundShipmentRequestData(asnHeader.inbound_shipment_request_id);
            //result.asn_header.inbound_shipment_request_group_no = result.inbound_shipment_request?.inbound_shipment_request_group_no;
            //if (blAwb is not null)
            //{
            //    result.containers = await GetContainerData(blAwb.asnDetailId);
            //}

            return result;
        }

        private async Task<InboundShipmentRequestResponseDto?> GetInboundShipmentRequestData(int? inboundShipmentRequestId)
        {
            var inboundShipmentRequest = await _inboundShipmentRequestRepository.GetByIdAsync(x => x.id == inboundShipmentRequestId);
            if (inboundShipmentRequest is null)
            {
                return null;
            }

            var result = _mapper.Map<InboundShipmentRequestResponseDto>(inboundShipmentRequest);
            return result;
        }

        private async Task<InboundShipmentResponseDto?> GetInboundShipmentData(int? inboundShipmentId)
        {
            if (inboundShipmentId is null)
            {
                return null;
            }

            var ish = await _inboundShipmentRepository.GetByIdAsync(x => x.id == inboundShipmentId);

            return _mapper.Map<InboundShipmentResponseDto>(ish);
        }

        //private async Task<List<PagedAsnResponseDto>?> GetDataForFilterAsn(List<PageAsnResponseDetail> pagedResponse)
        //{
        //    var asnHeaderIds = pagedResponse.Select(pkh => pkh.asnDetailId).Distinct().ToList();
        //    var dicContainers = await _containerRepository.GetContainerByAsnHeaderIds(asnHeaderIds);
        //    var result = new List<PagedAsnResponseDto>();

        //    foreach (var item in pagedResponse)
        //    {
        //        var response = _mapper.Map<PagedAsnResponseDto>(item);

        //        if (item.inbound_shipment_id.HasValue)
        //        {
        //            if (dicContainers.TryGetValue(item.inbound_shipment_id!.Value, out var containers))
        //            {
        //                response.containers = _mapper.Map<List<ContainerResponseDto>>(containers);
        //            }
        //        }

        //        result.Add(response);
        //    }

        //    return result;
        //}

        private async Task<List<InboundShipment>> GetInboundShipment(HashSet<int?> inboundShipmentIds)
        {
            if (!inboundShipmentIds.Any())
            {
                return [];
            }

            var inboundShipments = await _inboundShipmentRepository.Find(x => inboundShipmentIds.Contains(x.id));
            return inboundShipments.ToList();
        }

        private async Task<List<InboundShipmentBLAWB>> GetInboundShipmentBlAwbList(HashSet<int?> inboundShipmentIds)
        {
            if (inboundShipmentIds.Count == 0)
            {
                return [];
            }
            var inboundShipmentBlAwbList =
                await _inboundShipmentBlAwbRepository.Find(x => inboundShipmentIds.Contains(x.inbound_shipment_id));

            return inboundShipmentBlAwbList.ToList();
        }

        private async Task<List<InboundShipmentRequest>> GetInboundShipmentRequest(HashSet<int?> inboundShipmentRequestIds)
        {
            if (!inboundShipmentRequestIds.Any())
            {
                return [];
            }

            var inboundShipmentRequests = await _inboundShipmentRequestRepository
                .Find(x => inboundShipmentRequestIds.Contains(x.id));

            return inboundShipmentRequests.ToList();
        }

        private async Task<List<InvoiceHeader>> GetInvoiceHeaderAsync(List<int> invoiceHeaderId)
        {
            if (invoiceHeaderId.Count == 0)
            {
                return [];
            }

            var invoiceHeaders = await _invoiceHeaderRepository.Find(x => invoiceHeaderId.Contains(x.id));
            return invoiceHeaders.ToList();
        }

        private async Task<List<InvoiceDetail>> GetInvoiceDetailAsync(List<int> invoiceHeaderIds)
        {
            if (invoiceHeaderIds.Count == 0)
            {
                return [];
            }

            var invoiceDetails = await _invoiceDetailRepository.Find(x => invoiceHeaderIds.Contains(x.invoice_header_id));
            return invoiceDetails.ToList();
        }

        private async Task<List<PODetail>> GetPoDetailListAsync(List<int> poDetailIds)
        {
            if (poDetailIds.Count == 0)
            {
                return [];
            }

            var query = await _poDetailRepository.Find(x => poDetailIds.Contains(x.id));

            return query.ToList();
        }
        #endregion
    }
}
