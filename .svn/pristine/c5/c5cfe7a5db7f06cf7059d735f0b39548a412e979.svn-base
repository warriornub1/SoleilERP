using Microsoft.EntityFrameworkCore;
using SERP.Application.Transactions.AdvancedShipmentNotices.Interfaces;
using SERP.Domain.Masters.Countries.Models;
using SERP.Domain.Masters.Items.Model;
using SERP.Domain.Transactions.AdvancedShipmentNotices;
using SERP.Domain.Transactions.AdvancedShipmentNotices.Model;
using SERP.Domain.Transactions.Containers.Model;
using SERP.Infrastructure.Common;
using SERP.Infrastructure.Common.DBContexts;
using static SERP.Domain.Common.Constants.DomainConstant;

namespace SERP.Infrastructure.Transactions.AdvancedShipmentNotices
{
    internal class ASNDetailRepository : GenericRepository<ASNDetail>, IASNDetailRepository
    {
        public ASNDetailRepository(ApplicationDbContext dbContext) : base(dbContext)
        {
        }

        public HashSet<int> GetAsnHeaderContainItem(List<int> requestItems)
        {
            var query = (from asn in _dbContext.AsnDetails
                         where requestItems.Contains(asn.item_id)
                         select asn.asn_header_id).Distinct();

            return query.ToHashSet();
        }

        public IQueryable<PageAsnResponseDetail> BuildFilterAsnQuery(PagedFilterAsnRequestModel request, out int totalRows)
        {
            var asnHeaderQuery = _dbContext.AsnHeaders.AsNoTracking();
            // item
            if (request.Items is not null && request.Items.Count > 0)
            {
                var asnHeaderIdsContainItem = GetAsnHeaderContainItem(request.Items);
                asnHeaderQuery = asnHeaderQuery.Where(x => asnHeaderIdsContainItem.Contains(x.id));
            }

            // status
            if (request.Statuses is not null && request.Statuses.Count > 0)
            {
                asnHeaderQuery = asnHeaderQuery.Where(x => request.Statuses.Contains(x.status_flag));
            }

            // create date from
            if (request.create_date_from.HasValue)
            {
                asnHeaderQuery = asnHeaderQuery.Where(x => x.created_on >= request.create_date_from);
            }

            // create date to
            if (request.create_date_to.HasValue)
            {
                asnHeaderQuery = asnHeaderQuery.Where(x => x.created_on <= request.create_date_to);
            }

            // - Filter by Branch Plant No, keywords from parameter and filters in body.
            var issuingBranchPlantQuery = _dbContext.BranchPlant.AsNoTracking();

            // bpNo
            if (request.BranchPlants is not null && request.BranchPlants.Count > 0)
            {
                issuingBranchPlantQuery = issuingBranchPlantQuery.Where(x => request.BranchPlants.Contains(x.id));
            }

            // supplier
            var supplierQuery = _dbContext.Supplier.AsNoTracking();

            if (request.suppliers is not null && request.suppliers.Count > 0)
            {
                supplierQuery = supplierQuery.Where(x => request.suppliers.Contains(x.id));
            }

            var containerQuery = from container in _dbContext.Containers.AsNoTracking()
                                 join containerAsn in _dbContext.ContainerASNs.AsNoTracking() on container.id equals containerAsn
                                     .container_id
                                 select new
                                 {
                                     asn_header_id = containerAsn.asn_header_id,
                                     id = container.id,
                                     status_flag = container.status_flag,
                                     container_no = container.container_no,
                                     shipment_type = container.shipment_type,
                                     weight = container.weight
                                 };

            // shipment type
            if (request.shipment_type is not null && request.shipment_type.Count > 0)
            {
                containerQuery = containerQuery.Where(x => x.shipment_type != null && request.shipment_type.Contains(x.shipment_type));
                var asnHeaderIds = containerQuery.Select(x => x.asn_header_id).Distinct().ToList();
                asnHeaderQuery = asnHeaderQuery.Where(x => asnHeaderIds.Contains(x.id));
            }

            var mainQuery = from asnHeader in asnHeaderQuery
                            join issuingBranchPlant in issuingBranchPlantQuery on asnHeader.branch_plant_id equals issuingBranchPlant.id
                            join shipToBranchPlant in _dbContext.BranchPlant.AsNoTracking() on asnHeader.ship_to_branch_plant_id equals shipToBranchPlant.id
                            join supplier in supplierQuery on asnHeader.supplier_id equals supplier.id
                            select new
                            {
                                id = asnHeader.id,
                                asn_no = asnHeader.asn_no,
                                status_flag = asnHeader.status_flag,
                                branch_plant_no = issuingBranchPlant.branch_plant_no,
                                branch_plant_name = issuingBranchPlant.branch_plant_name,
                                ship_to_branch_plant_no = shipToBranchPlant.branch_plant_no,
                                ship_to_branch_plant_name = shipToBranchPlant.branch_plant_name,
                                supplier_no = supplier.supplier_no,
                                supplier_name = supplier.supplier_name,
                                forecast_ex_wh_date = asnHeader.forecast_ex_wh_date,
                                estimated_putaway_date = asnHeader.estimated_putaway_date,
                                received_date = asnHeader.received_date,
                                internal_remarks = asnHeader.internal_remarks,
                                notes_to_cargo_team = asnHeader.notes_to_cargo_team,
                                attachment_flag = asnHeader.attachment_flag,
                                notes_to_warehouse_flag = asnHeader.notes_to_warehouse_flag,
                                created_on = asnHeader.created_on,
                                created_by = asnHeader.created_by,
                                last_modified_on = asnHeader.last_modified_on,
                                last_modified_by = asnHeader.last_modified_by,
                            };

            totalRows = mainQuery.Count();

            var query = from asnData in mainQuery
                        select new PageAsnResponseDetail()
                        {
                            id = asnData.id,
                            asn_no = asnData.asn_no,
                            status_flag = asnData.status_flag,
                            branch_plant_no = asnData.branch_plant_no,
                            branch_plant_name = asnData.branch_plant_name,
                            ship_to_branch_plant_no = asnData.ship_to_branch_plant_no,
                            ship_to_branch_plant_name = asnData.ship_to_branch_plant_name,
                            supplier_no = asnData.supplier_no,
                            supplier_name = asnData.supplier_name,
                            forecast_ex_wh_date = asnData.forecast_ex_wh_date,
                            estimated_putaway_date = asnData.estimated_putaway_date,
                            received_date = asnData.received_date,
                            internal_remarks = asnData.internal_remarks,
                            notes_to_cargo_team = asnData.notes_to_cargo_team,
                            attachment_flag = asnData.attachment_flag,
                            notes_to_warehouse_flag = asnData.notes_to_warehouse_flag,
                            containers = containerQuery.Where(x => x.asn_header_id == asnData.id).
                                Select(x => new ContainerDetail()
                                {
                                    id = x.id,
                                    status_flag = x.status_flag,
                                    container_no = x.container_no,
                                    shipment_type = x.shipment_type,
                                    weight = x.weight
                                }).ToList(),
                            created_on = asnData.created_on,
                            created_by = asnData.created_by,
                            last_modified_on = asnData.last_modified_on,
                            last_modified_by = asnData.last_modified_by,
                        };

            // - Keywords are ASN No, Supplier No, Supplier Name
            if (!string.IsNullOrEmpty(request.Keyword))
            {
                query = query.Where(x =>
                    x.asn_no.Contains(request.Keyword) ||
                    x.supplier_no.Contains(request.Keyword) ||
                    x.supplier_name.Contains(request.Keyword));
            }

            return query;
        }

        public async Task<List<AsnDetailResponseDetail>> GetAsnDetailDataAsync(ASNHeader asnHeader)
        {
            var result = await (from asnDetail in _dbContext.AsnDetails
                                join item in _dbContext.Item on asnDetail.item_id equals item.id
                                join country in _dbContext.Country on asnDetail.country_of_origin_id equals country.id into lstGroup
                                from country in lstGroup.DefaultIfEmpty()
                                where asnDetail.asn_header_id == asnHeader.id
                                select new AsnDetailResponseDetail()
                                {
                                    id = asnDetail.id,
                                    line_no = asnDetail.line_no,
                                    status_flag = asnDetail.status_flag,
                                    item = new ItemResponseDetail()
                                    {
                                        item_id = asnDetail.item_id,
                                        item_no = item.item_no,
                                        description_1 = item.description_1,
                                        primary_uom = item.primary_uom
                                    },
                                    po = new AsnPoResponseDetail()
                                    {
                                        po_detail_id = asnDetail.po_detail_id,
                                    },
                                    qty = asnDetail.qty,
                                    uom = asnDetail.uom,
                                    country_of_origin = country.country_name,
                                    notes_to_warehouse = asnDetail.notes_to_warehouse,
                                    created_by = asnDetail.created_by,
                                    created_on = asnDetail.created_on,
                                    last_modified_by = asnDetail.last_modified_by,
                                    last_modified_on = asnDetail.last_modified_on,
                                }).ToListAsync();

            return result;
        }

        public IQueryable<PageAsnDetailResponseDetail> BuildAsnDetailQuery(PagedFilterAsnDetailRequestModel request)
        {
            var poHeaderQuery = _dbContext.PoHeaders.AsNoTracking();
            if (request.po_header_id is not null && request.po_header_id.Count > 0)
            {
                poHeaderQuery = poHeaderQuery.Where(x => request.po_header_id.Contains(x.id));
            }

            var asnDetailQuery = _dbContext.AsnDetails.AsNoTracking();

            if (request.asn_header_id is not null && request.asn_header_id.Count > 0)
            {
                asnDetailQuery = asnDetailQuery.Where(x => request.asn_header_id.Contains(x.asn_header_id));
            }

            if (request.create_date_from.HasValue)
            {
                asnDetailQuery = asnDetailQuery.Where(x => x.created_on >= request.create_date_from);
            }

            if (request.create_date_to.HasValue)
            {
                asnDetailQuery = asnDetailQuery.Where(x => x.created_on <= request.create_date_to);
            }

            if (request.statuses is not null && request.statuses.Count > 0)
            {
                asnDetailQuery = asnDetailQuery.Where(x => request.statuses.Contains(x.status_flag));
            }

            var query = from asnDetail in asnDetailQuery
                        join asnHeader in _dbContext.AsnHeaders on asnDetail.asn_header_id equals asnHeader.id
                        join item in _dbContext.Item.AsNoTracking() on asnDetail.item_id equals item.id
                        join poDetail in _dbContext.PoDetails.AsNoTracking() on asnDetail.po_detail_id equals poDetail.id
                        join poHeader in poHeaderQuery on poDetail.po_header_id equals poHeader.id
                        join countryOfOrigin in _dbContext.Country.AsNoTracking() on asnDetail.country_of_origin_id equals countryOfOrigin.id into lstCountryOfOrigin
                        from countryOfOrigin in lstCountryOfOrigin.DefaultIfEmpty()
                        select new PageAsnDetailResponseDetail
                        {
                            detail_id = asnDetail.id,
                            asn_no = asnHeader.asn_no,
                            asn_line_no = asnDetail.line_no,
                            po_no = poHeader.po_no,
                            po_line_no = poDetail.line_no,
                            status_flag = asnDetail.status_flag,
                            item_id = item.id,
                            item_no = item.item_no,
                            description_1 = item.description_1,
                            qty = asnDetail.qty,
                            packing_qty = asnDetail.packing_list_qty,
                            uom = asnDetail.uom,
                            po_open_qty = poDetail.open_qty,
                            po_uom = poDetail.uom,
                            notes_to_warehouse = asnDetail.notes_to_warehouse,
                            country_of_origin = countryOfOrigin != null ? new CountryBasicDetail
                            {
                                id = countryOfOrigin.id,
                                country_name = countryOfOrigin.country_name,
                                country_alpha_code_two = countryOfOrigin.country_alpha_code_two,
                                country_alpha_code_three = countryOfOrigin.country_alpha_code_three
                            } : null,
                            created_on = asnDetail.created_on,
                            created_by = asnDetail.created_by,
                            last_modified_on = asnDetail.last_modified_on,
                            last_modified_by = asnDetail.last_modified_by,
                        };

            // Keywords are Item No, Description 1, Supplier Part No
            if (!string.IsNullOrEmpty(request.Keyword))
            {
                query = query.Where(x =>
                    x.item_no.Contains(request.Keyword) ||
                    x.description_1.Contains(request.Keyword) ||
                    x.po_no.Contains(request.Keyword));
            }

            return query;

        }

        public async Task<List<ASNDetail>> GetASNDetailList(int asnHeaderId, List<int> poDetailIDs)
        {
            return await _dbContext.AsnDetails
                .Where(x => x.asn_header_id == asnHeaderId && poDetailIDs.Contains(x.id)
                            && x.status_flag != AdvancedShipmentNoticesDetail.StatusFlag.Closed ||
                            x.status_flag != AdvancedShipmentNoticesDetail.StatusFlag.Cancelled)
                .Select(x => new ASNDetail
                {
                    id = x.id,
                    item_id = x.item_id,
                    uom = x.uom,
                }).ToListAsync();
        }

        public async Task<bool> IsAsnDetailWithStatusNotNew(int asnHeaderId)
        {
            return (_dbContext.AsnDetails.Where(x => x.asn_header_id == asnHeaderId
            && x.status_flag != AdvancedShipmentNoticesDetail.StatusFlag.New
            && x.status_flag != AdvancedShipmentNoticesDetail.StatusFlag.Cancelled).Count()) > 0;
        }

        public async Task<List<ASNDetail>> GetAsnDetailByAsnHeaderIdAsync(int asnHeaderId)
        {
            return await _dbContext.AsnDetails.Where(x => x.asn_header_id == asnHeaderId).ToListAsync();
        }
    }
}
