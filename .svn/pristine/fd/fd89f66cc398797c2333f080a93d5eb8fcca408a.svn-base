using AutoMapper;
using ExcelDataReader;
using SERP.Application.Common;
using SERP.Application.Common.Constants;
using SERP.Application.Common.Exceptions;
using SERP.Application.Common.Helper;
using SERP.Application.Finance.Groups.Interfaces;
using SERP.Application.Finance.RevenueCenterCompanyMappings;
using SERP.Application.Finance.RevenueCenters.DTOs;
using SERP.Application.Finance.RevenueCenters.DTOs.Request;
using SERP.Application.Finance.RevenueCenters.DTOs.Response;
using SERP.Application.Finance.RevenueCenters.Interface;
using SERP.Application.Masters.Companies.DTOs;
using SERP.Application.Masters.Companies.DTOs.Request;
using SERP.Application.Masters.Companies.Interfaces;
using SERP.Domain.Common.Constants;
using SERP.Domain.Common.Model;
using SERP.Domain.Finance.RevenueCenterCompanyMapping;
using SERP.Domain.Finance.RevenueCenters;
using SERP.Domain.Masters.Companies;
using System.Text;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace SERP.Application.Finance.RevenueCenters.Services
{
    public class RevenueCenterService : IRevenueCenterService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IRevenueCenterRepository _revenueCenterRepository;
        private readonly IRevenueCenterCompanyMappingRepository _revenueCenterCompanyMappingRepository;
        private readonly IGroupRepository _groupRepository;
        private readonly ICompanyRepository _companyRepository;
        private readonly IMapper _mapper;
        public RevenueCenterService(IUnitOfWork unitOfWork, IRevenueCenterRepository revenueCenterRepository, IRevenueCenterCompanyMappingRepository revenueCenterCompanyMappingRepository,
            IGroupRepository groupRepository, ICompanyRepository companyRepository, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _revenueCenterRepository = revenueCenterRepository;
            _revenueCenterCompanyMappingRepository = revenueCenterCompanyMappingRepository;
            _groupRepository = groupRepository;
            _companyRepository = companyRepository;
            _mapper = mapper;
        }


        public async Task<PagedResponse<RevenueCenterResponseModel>> GetAllPagedAsync(int page, int pageSize)
        {
            try
            {

                var pageable = PagingUtilities.GetPageable(page, pageSize);
                var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);
                var revenueCenters = await _revenueCenterRepository.FindAllCompanyMapping();
                List<RevenueCenterResponseModel> revenueCenterCenterResponse = _mapper.Map<List<RevenueCenterResponseModel>>(revenueCenters);
                int totalRows = revenueCenters.Count();
                if (totalRows == 0)
                    return new PagedResponse<RevenueCenterResponseModel>();

                var totalPage = (int)Math.Ceiling(totalRows / (double)pageable.Size);
                var pagedResponse = revenueCenterCenterResponse.Skip(skipRow).Take(pageable.Size).ToList();

                return new PagedResponse<RevenueCenterResponseModel>
                {
                    Items = pagedResponse,
                    TotalItems = totalRows,
                    TotalPage = totalPage,
                    Page = pageable.Page,
                    PageSize = pageable.Size,
                };
            }
            catch
            {
                throw;
            }
        }

        public async Task<PagedResponse<RevenueCenterResponseModel>> SearchPagedAsync(int page, int pageSize, string keyword, SearchRevenueCenterRequestModel request)
        {
            var groupList = request.parentGroupList == null ? null : request.parentGroupList.Select(x => x.group_id).ToList();
            var companyList = request.companyList == null ? null : request.companyList.Select(x => x.company_id).ToList();
            var statusList = request.statusList == null ? null : request.statusList.Select(x => x.status).ToList();

            var sortedCostCenters = await _revenueCenterRepository.RevenueCenterFilterPaged(request.create_date_from, request.create_date_to, groupList, companyList, statusList, keyword);

            List<RevenueCenterResponseModel> revenueCenterrResponse = _mapper.Map<List<RevenueCenterResponseModel>>(sortedCostCenters);
            int totalRows = revenueCenterrResponse.Count();
            if (totalRows == 0)
                return new PagedResponse<RevenueCenterResponseModel>();

            var pageable = PagingUtilities.GetPageable(page, pageSize);
            var skipRow = PagingUtilities.GetSkipRow(pageable.Page, pageable.Size);

            var totalPage = (int)Math.Ceiling(totalRows / (double)pageable.Size);
            var pagedResponse = revenueCenterrResponse.Skip(skipRow).Take(pageable.Size).ToList();

            return new PagedResponse<RevenueCenterResponseModel>
            {
                Items = revenueCenterrResponse,
                TotalItems = totalRows,
                TotalPage = totalPage,
                Page = pageable.Page,
                PageSize = pageable.Size,
            };
        }

        public async Task<IEnumerable<RevenueCenterTreeResponseModel>> GetRevenueCenterTreeViewAsync()
        {
            var levelFourGroups = await _groupRepository.GetLevelFourGroup(DomainConstant.Group.GroupTypeMaxLevel.RevenueCenter, DomainConstant.Group.GroupType.RevenueCenter);

            List<RevenueCenterTreeResponseModel> response = new List<RevenueCenterTreeResponseModel>();

            foreach (var levelFourGroup in levelFourGroups)
            {
                response.Add(new RevenueCenterTreeResponseModel
                {
                    group_id = levelFourGroup.id,
                    group_code = levelFourGroup.group_code,
                    group_description = levelFourGroup.group_description,
                    status_flag = levelFourGroup.status_flag,
                    level = levelFourGroup.level,
                    child_group_list = await GetSubRevenueCenter(levelFourGroup.id, DomainConstant.Group.GroupTypeMaxLevel.RevenueCenter)
                });
            }
            return response;
        }

        private async Task<List<RevenueCenterTreeResponseModel>> GetSubRevenueCenter(int parentId, int level)
        {
            var groups = await _groupRepository.GetChild(parentId, DomainConstant.Group.GroupType.RevenueCenter);

            if (groups.Count() == 0)
                return null;

            var result = new List<RevenueCenterTreeResponseModel>();

            foreach (var group in groups)
            {
                RevenueCenterTreeResponseModel costcenterResponse = new RevenueCenterTreeResponseModel
                {
                    group_id = group.id,
                    group_code = group.group_code,
                    group_description = group.group_description,
                    status_flag = group.status_flag,
                    level = group.level,
                    child_group_list = await GetSubRevenueCenter(group.id, level - 1)
                };

                if (group.level == 1)
                {
                    var revenueCenters = await _revenueCenterRepository.GetRevenueCenterViaParentID(parentId);
                    List<RevenueCenterList> revenueCenterLists = new List<RevenueCenterList>();
                    foreach (var revenueCenter in revenueCenters)
                    {
                        revenueCenterLists.Add(new RevenueCenterList
                        {
                            id = revenueCenter.id,
                            revenue_center_code = revenueCenter.revenue_center_code,
                            revenue_center_description = revenueCenter.revenue_center_description,
                            status_flag = revenueCenter.status_flag,
                        });
                    }
                    if (revenueCenterLists.Count > 0)
                        costcenterResponse.revenue_center_list = revenueCenterLists;
                }
                result.Add(costcenterResponse);

            }

            return result;
        }

        public async Task<RevenueCenterResponseModel> GetByIdAsync(int id)
        {
            try
            {
                var revenueCenter = await _revenueCenterRepository.FindCompanyMapping(id);

                if (revenueCenter == null)
                    throw new BadRequestException(ErrorCodes.RevenueCenterIdNotFound, string.Format(ErrorMessages.RevenueCenterIdNotFound, id));


                var response = _mapper.Map<RevenueCenterResponseModel>(revenueCenter);

                return response;
            }
            catch
            {
                throw;
            }

        }

        public async Task CreateRevenueCenterAsync(CreateRevenueCenterRequestModel request, string userId)
        {
            try
            {
                if (request.company_List != null)
                {
                    // check for duplicated company_id
                    var company_id_list = request.company_List.Where(x => x.company_id != null)
                                                              .Select(x => x.company_id)
                                                              .ToList();

                    var duplicated_CompanyId = company_id_list.GroupBy(x => x)
                                                               .Where(x => x.Count() > 1)
                                                               .Select(x => x.Key)
                                                               .ToList();
                    if (duplicated_CompanyId.Count() > 0)
                        throw new BadRequestException(ErrorCodes.DuplicatedCompanyId, string.Format(ErrorMessages.DuplicatedValues, "Company Id", string.Join(", ", duplicated_CompanyId)));


                    // Reject if company_id is not exist in Company table with status_flag = E
                    if (company_id_list != null)
                    {
                        var companyIdsInDB = await _companyRepository.GetCompanyIdList(company_id_list);
                        var notFound = company_id_list.Except(companyIdsInDB).ToList();
                        if (notFound.Any())
                            throw new BadRequestException(ErrorCodes.ParentGroupIDDontExist, string.Format(ErrorMessages.CompanyNotFound, "Id", string.Join(", ", notFound)));

                    }
                }



                // Reject if code is exists in CostCenter table
                var revenueCenterCode = request.revenue_center_code;
                var costCenter = await _revenueCenterRepository.GetByIdAsync(x => x.revenue_center_code == revenueCenterCode);
                if (costCenter != null)
                    throw new BadRequestException(ErrorCodes.RevenueCenterCodeAlreadyExist, string.Format(ErrorMessages.RevenueCenterCodeAlreadyExist, revenueCenterCode));


                // Reject if parent_group_id is not exist in Group table with group_type = CC, status_flag = E
                int parentGroupId = request.parent_group_id;
                var group = await _groupRepository.GetByIdAsync(x => x.id == parentGroupId && x.group_type == DomainConstant.Group.GroupType.RevenueCenter && x.status_flag == DomainConstant.StatusFlag.Enabled);
                if (group == null)
                    throw new BadRequestException(ErrorCodes.ParentGroupIDDontExist, string.Format(ErrorMessages.ParentGroupIDDontExist, parentGroupId));


                RevenueCenter cc = new RevenueCenter
                {
                    revenue_center_code = request.revenue_center_code,
                    revenue_center_description = request.revenue_center_description,
                    parent_group_id = request.parent_group_id,
                    status_flag = request.status_flag,
                    created_by = userId,
                    created_on = DateTime.Now
                };
                await _revenueCenterRepository.CreateAsync(cc);
                await _unitOfWork.SaveChangesAsync();

                if (request.company_List != null)
                {
                    List<RevenueCenterCompanyMapping> mappings = request.company_List.Select(x => new RevenueCenterCompanyMapping
                    {
                        revenue_center_id = cc.id,
                        company_id = x.company_id,
                        created_by = userId,
                        created_on = DateTime.Now
                    }).ToList();
                    await _revenueCenterCompanyMappingRepository.CreateRangeAsync(mappings);
                    await _unitOfWork.SaveChangesAsync();
                }

            }

            catch
            {
                throw;
            }
        }

        public async Task UpdateRevenueCenterAsync(List<UpdateRevenueCenterRequestModel> requests, string userId)
        {
            try
            {
                _unitOfWork.BeginTransaction();

                // Reject if code (modified) is exists in CostCenter table
                var revenueCenterCodes = requests.Select(x => (x.revenue_center_code, x.id)).ToList();
                var revenueCodesFoundDB = await _revenueCenterRepository.GetCode(revenueCenterCodes);

                if (revenueCodesFoundDB.Any())
                    throw new BadRequestException(ErrorCodes.RevenueCenterCodeAlreadyExist, string.Format(ErrorMessages.RevenueCenterCodeAlreadyExist, string.Join(", ", revenueCodesFoundDB.ToList())));

                // Reject if parent_group_id (modified) is not exist in Group table with group_type=RC, status_flag=E
                var parentGroupIds = requests.Select(x => x.parent_group_id).ToList();
                var groupsInDB = (await _groupRepository.FindMultiple(x => parentGroupIds.Contains(x.id) && x.group_type == DomainConstant.Group.GroupType.RevenueCenter && x.status_flag == DomainConstant.StatusFlag.Enabled))
                                .Select(x => x.id)
                                .ToList();

                var parentIdNotFound = parentGroupIds.Except(groupsInDB);
                if (parentIdNotFound.Any())
                    throw new BadRequestException(ErrorCodes.ParentGroupIDDontExist, string.Format(ErrorMessages.ParentGroupIDDontExist, string.Join(", ", parentIdNotFound)));

                var company_List = requests.SelectMany(x => x.company_List);

                List<int> createMapping = new List<int>();
                List<int> deleteMapping = new List<int>();
                if (company_List != null)
                {
                    // Reject if action_flag=C and company_id is not exist in Company table with status_flag=E
                    var company_id_flag_C = company_List.Where(x => x.action_flag == DomainConstant.ActionFlag.Create)
                                                        .Select(x => x.company_id)
                                                        .ToList();
                    var companiesIdInDb = (await _companyRepository.FindMultiple(x => company_id_flag_C.Contains(x.id) && x.status_flag == DomainConstant.StatusFlag.Enabled)).Select(x => x.id);

                    var IdNotFound = company_id_flag_C.Except(companiesIdInDb);
                    if (IdNotFound.Any())
                        throw new BadRequestException(ErrorCodes.CompanyNotFound, string.Format(ErrorMessages.CompanyNotFound, "Company ID :", string.Join(", ", IdNotFound)));


                    // Reject if action_flag=D and company_id is exist in COA table (Chart of accounts)
                    //var company_id_flag_D = company_List.Where(x => x.action_flag == DomainConstant.ActionFlag.Delete)
                    //                                    .Select(x => x.company_id)
                    //                                    .ToList();

                    //var COAIdInDb = (await _companyRepository.FindMultiple(x => company_id_flag_C.Contains(x.id) && x.status_flag == DomainConstant.StatusFlag.Enabled)).Select(x => x.id);

                    var company_list_flatten = requests.SelectMany(x => x.company_List?.Select(y => (x.id, y.company_id, y.action_flag)));
                    var company_list_flatten_ids = company_list_flatten.Select(x => (x.id, x.company_id)).ToList();

                    List<RevenueCenterCompanyMapping> createList = company_list_flatten.Where(x => x.action_flag == DomainConstant.ActionFlag.Create)
                                                                                        .Select(x => new RevenueCenterCompanyMapping
                                                                                        {
                                                                                            revenue_center_id = x.id,
                                                                                            company_id = x.company_id,
                                                                                            created_by = userId,
                                                                                            created_on = DateTime.Now
                                                                                        }).ToList();

                    List<RevenueCenterCompanyMapping> deleteList = company_list_flatten.Where(x => x.action_flag == DomainConstant.ActionFlag.Delete)
                                                                                        .Select(x => new RevenueCenterCompanyMapping
                                                                                        {
                                                                                            revenue_center_id = x.id,
                                                                                            company_id = x.company_id,
                                                                                        }).ToList();

                    var rcMapping = await _revenueCenterCompanyMappingRepository.GetMappingHits(company_list_flatten_ids);
                    var rcMappingHashset = new HashSet<(int, int)>(rcMapping);

                    var duplicatedCreateList = createList.Where(x => rcMappingHashset.Contains((x.company_id, x.revenue_center_id)));
                    if (duplicatedCreateList.Any())
                        throw new BadRequestException(ErrorCodes.MappingAlreadyExist, string.Format(ErrorMessages.MappingAlreadyExist, string.Join(", ", duplicatedCreateList.Select(x => x.company_id).ToList()), string.Join(", ", duplicatedCreateList.Select(x => x.revenue_center_id).ToList())));

                    var missingDeleteList = deleteList.Where(x => !rcMappingHashset.Contains((x.company_id, x.revenue_center_id)));
                    if (missingDeleteList.Any())
                        throw new BadRequestException(ErrorCodes.CompanyNotFound, string.Format(ErrorMessages.MappingNotFound, string.Join(", ", missingDeleteList.Select(x => x.company_id).ToList()), string.Join(", ", missingDeleteList.Select(x => x.revenue_center_id).ToList())));

                    if (createList.Any())
                    {
                        await _revenueCenterCompanyMappingRepository.CreateRangeAsync(createList);
                        await _unitOfWork.SaveChangesAsync();
                    }

                    var deleteListDB = deleteList.Where(x => rcMappingHashset.Contains((x.company_id, x.revenue_center_id)));
                    if (deleteListDB.Any())
                    {
                        var toDelete = await _revenueCenterCompanyMappingRepository.GetDeleteList(deleteList.Select(x => (x.revenue_center_id, x.company_id)).ToList());
                        await _revenueCenterCompanyMappingRepository.DeleteRangeAsync(toDelete);
                        await _unitOfWork.SaveChangesAsync();
                    }

                }


                // Update Data base
                var requestIds = requests.Select(x => x.id);
                var revenueCenters = await _revenueCenterRepository.FindMultiple(x => requestIds.Contains(x.id));
                var missingId = requestIds.Except(revenueCenters.Select(x => x.id));
                if (missingId.Any())
                    throw new BadRequestException(ErrorCodes.CompanyNotFound, string.Format(ErrorMessages.RevenueCenterIdNotFound, string.Join(", ", missingId)));

                List<RevenueCenter> updateList = new List<RevenueCenter>();
                foreach (var request in requests)
                {
                    var revenueCenter = revenueCenters.Where(x => x.id == request.id).FirstOrDefault();

                    revenueCenter.revenue_center_code = request.revenue_center_code;
                    revenueCenter.revenue_center_description = request.revenue_center_description;
                    revenueCenter.parent_group_id = request.parent_group_id;
                    revenueCenter.status_flag = request.status_flag;
                    revenueCenter.last_modified_by = userId;
                    revenueCenter.last_modified_on = DateTime.Now;

                    updateList.Add(revenueCenter);
                }

                await _revenueCenterRepository.UpdateRangeAsync(updateList);
                await _unitOfWork.SaveChangesAsync();
                _unitOfWork.Commit();
            }
            catch (Exception ex)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task DeleteRevenueCenterAsync(DeleteRevenueCenterRequestDto request)
        {
            try
            {
                var duplicated_CompanyId = request.revenueCenterList.Select(x => x)
                                                            .GroupBy(x => x.id)
                                                            .Where(x => x.Count() > 1)
                                                            .Select(x => x.Key)
                                                            .ToList();
                if (duplicated_CompanyId.Count() > 0)
                    throw new BadRequestException(ErrorCodes.DuplicatedCompanyId, string.Format(ErrorMessages.DuplicatedValues, "Company Id", string.Join(", ", duplicated_CompanyId)));

                var companyId = request.revenueCenterList.Select(y => y.id).ToList();
                var revenueCenters = await _revenueCenterRepository.FindMultiple(x => companyId.Contains(x.id));
                var idNotFound = duplicated_CompanyId.Except(revenueCenters.Select(x => x.id).ToList());
                if (idNotFound.Any())
                    throw new BadRequestException(ErrorCodes.RevenueCenterIdNotFound, string.Format(ErrorMessages.RevenueCenterIdNotFound, string.Join(", ", idNotFound)));


                await _revenueCenterRepository.DeleteRangeAsync(revenueCenters);
                await _unitOfWork.SaveChangesAsync();

            }
            catch
            {
                throw;
            }
        }

        public async Task ImportRevenueCenterAsync(string userId, ImportRevenueCenterRequestModel request)
        {
            string localFilePath = "";

            try
            {
                if (!FileHelper.IsExcelFile(request.File.ContentType))
                    throw new BadRequestException(ErrorCodes.NotExcelFile, ErrorMessages.NotExcelFile);

                var currentTime = DateTime.Now;
                localFilePath = $"App_Data/file-uploads/{currentTime.Year}/{currentTime.Month}/{currentTime.Day}/";
                await FileHelper.SaveFileToTemporaryFolder(request.File, request.File.FileName, localFilePath);
                var inputFilePath = Path.Combine(localFilePath, request.File.FileName);
                List<RevenueCenterDto> excelData = await ReadExcelDataGroup(inputFilePath);
                await validateExcelData(userId, excelData);

            }
            catch (Exception e)
            {
                throw;
            }
            finally
            {
                if (!string.IsNullOrEmpty(localFilePath))
                    Directory.Delete(localFilePath, true);
            }
        }

        public async Task<byte[]> GetRevenueCenterTemplate(string webRootPath)
        {
            try
            {
                string filePath = Path.Combine(webRootPath, ApplicationConstant.wwwRootFileName.RevenueCenter);
                if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
                    throw new BadRequestException(ErrorCodes.FileNotFound, ErrorMessages.FileNotFound);

                byte[] fileBytes = await File.ReadAllBytesAsync(filePath);
                return fileBytes;

            }
            catch
            {
                throw;
            }
        }

        private async Task<List<RevenueCenterDto>> ReadExcelDataGroup(string inputFilePath)
        {
            List<RevenueCenterDto> excelData = new List<RevenueCenterDto>();

            await using (var stream = File.Open(inputFilePath, FileMode.Open, FileAccess.Read))
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var rowIndex = 1;
                    reader.Read();
                    while (reader.Read())
                    {
                        if (rowIndex != 0)
                        {
                            RevenueCenterDto rowData = new RevenueCenterDto();
                            rowData.code = reader.IsDBNull(0) ? null : reader.GetValue(0).ToString();
                            rowData.description = reader.IsDBNull(1) ? null : reader.GetValue(1).ToString();
                            rowData.parentGroup = reader.IsDBNull(2) ? null : reader.GetValue(2).ToString();
                            rowData.company = reader.IsDBNull(3) ? null : reader.GetValue(3).ToString();
                            rowData.status = reader.IsDBNull(4) ? null : reader.GetValue(4).ToString();
                            excelData.Add(rowData);
                        }
                    }
                }
            }
            return excelData;

        }

        private async Task validateExcelData(string userId, List<RevenueCenterDto> excelData)
        {
            try
            {
                int row = 1;
                StringBuilder sb = new StringBuilder();
                HashSet<int> missingDataRow = new HashSet<int>();
                HashSet<int> invalidStatusFlag = new HashSet<int>();
                HashSet<int> parentGroupError = new HashSet<int>();
                HashSet<int> companyError = new HashSet<int>();


                List<RevenueCenter> createList = new List<RevenueCenter>();
                List<RevenueCenter> updateList = new List<RevenueCenter>();
                List<RevenueCenterCompanyMapping> createMappingList = new List<RevenueCenterCompanyMapping>();

                var parentGroupList = excelData.Where(x => x.parentGroup != null)
                               .Select(x => x.parentGroup)
                               .ToList();

                var company_No_List = excelData.Where(x => x.company != null)
                               .Select(x => x.company)
                               .ToList();

                var rcCode = excelData.Where(x => x.code != null)
                               .Select(x => x.code)
                               .Distinct()
                               .ToList();

                var getIDByParentGroupNo = await _groupRepository.GetIDByParentGroupNo(parentGroupList, DomainConstant.Group.GroupType.RevenueCenter);
                var companyDictionary = await _companyRepository.GetCompanyNoDictionary(company_No_List);
                var rcDictionary = await _revenueCenterRepository.GetDictionary(rcCode);


                foreach (var data in excelData)
                {
                    if (data.code is null || data.code == null ||
                        data.description is null || data.description == null ||
                        data.parentGroup is null || data.parentGroup == null ||
                        data.company is null || data.company == null ||
                        data.status is null || data.status == null)
                    {
                        missingDataRow.Add(row);
                    }

                    if (!(data.status == DomainConstant.StatusFlag.Enabled || data.status == DomainConstant.StatusFlag.Disabled))
                    {
                        invalidStatusFlag.Add(row);
                    }

                    // Reject if parent_group_no is not exist in Group table with group_type=RC, status_flag=E
                    if (!getIDByParentGroupNo.Keys.Contains(data.parentGroup))
                        parentGroupError.Add(row);

                    if (data.company == null || !companyDictionary.Keys.Contains(data.company))
                        companyError.Add(row);
                    row++;
                }

                if (missingDataRow.Count > 0)
                    sb.Append(string.Format(ErrorMessages.MissingDataRow, string.Join(", ", missingDataRow)));

                if (parentGroupError.Count > 0)
                    sb.Append(string.Format(ErrorMessages.ParentGroupError, string.Join(", ", parentGroupError)));

                if (companyError.Count > 0)
                    sb.Append(string.Format(ErrorMessages.CompanyNotFound, "company_no", string.Join(", ", companyError)));

                if(invalidStatusFlag.Count > 0)
                    sb.Append(string.Format(ErrorMessages.StatusFlagNotSupportInLine, string.Join(", ", invalidStatusFlag)));


                if (sb.Length != 0)
                    throw new BadRequestException(ErrorCodes.ImportError, sb.ToString());

                else
                {
                    foreach (var data in excelData)
                    {
                        if (!rcDictionary.Keys.Contains(data.code))
                        {
                            createList.Add(new RevenueCenter
                            {
                                revenue_center_code = data.code,
                                revenue_center_description = data.description,
                                parent_group_id = getIDByParentGroupNo.GetValueOrDefault(data.parentGroup, 0),
                                status_flag = data.status,
                                created_by = userId,
                                created_on = DateTime.Now
                            });

                            createMappingList.Add(new RevenueCenterCompanyMapping
                            {
                                company_id = companyDictionary[data.company].id
                            });

                        }
                        else
                        {
                            rcDictionary[data.code].revenue_center_code = data.code;
                            rcDictionary[data.code].revenue_center_description = data.description;
                            rcDictionary[data.code].parent_group_id = getIDByParentGroupNo.GetValueOrDefault(data.parentGroup, 0);
                            rcDictionary[data.code].status_flag = data.status;
                            rcDictionary[data.code].last_modified_by = userId;
                            rcDictionary[data.code].last_modified_on = DateTime.Now;
                            updateList.Add(rcDictionary[data.code]);

                        }
                    }
                    
                    if (createList.Count > 0)
                        await _revenueCenterRepository.CreateRangeAsync(createList);

                    if (updateList.Count > 0)
                        await _revenueCenterRepository.UpdateRangeAsync(updateList);

                    await _unitOfWork.SaveChangesAsync();

                    int i = 0;
                    foreach (var revenueCenter in createList)
                    {
                        createMappingList[i].revenue_center_id = revenueCenter.id;
                        createMappingList[i].created_by = userId;
                        createMappingList[i].created_on = DateTime.Now;
                        i++;
                    }
                    if (createMappingList.Count > 0)
                    {
                        await _revenueCenterCompanyMappingRepository.CreateRangeAsync(createMappingList);
                        await _unitOfWork.SaveChangesAsync();
                    }
                }

            }
            catch
            {
                throw;
            }
        }
    }
}
