using Microsoft.EntityFrameworkCore;
using SERP.Infrastructure.Common.DBContexts;
using SERP.Infrastructure.Common;
using SERP.Domain.Finance.CostCenterCompanyMapping;
using SERP.Application.Finance.CostCenterCompanyMappings;
using System.Security.Cryptography;
using SERP.Domain.Finance.CostCenters;
using SERP.Domain.Finance.RevenueCenterCompanyMapping;


namespace SERP.Infrastructure.Finance.CostCenterMappings
{
    public class CostCenterCompanyMappingRepository : GenericRepository<CostCenterCompanyMapping>, ICostCenterCompanyMappingRepository
    {
        public CostCenterCompanyMappingRepository(ApplicationDbContext dbContext) : base(dbContext)
        {
        }

        public async Task<IEnumerable<int>> FindMapping(List<int> ids)
        {
            return await _dbContext.CostCenterCompanyMapping.Where(x => ids.Contains(x.company_id))
                                                            .Select(x => x.company_id)
                              .ToListAsync();
        }

        public async Task<IEnumerable<(int, int)>> GetMappingHits(List<(int, int)> flattenList)
        {
            //var query = _dbContext.RevenueCenterCompanyMapping.AsQueryable();

            //foreach (var request in flattenList)
            //{
            //    var revenue_center_id = request.Item1;
            //    var company_id = request.Item2;

            //    query = query.Where(x => x.revenue_center_id == revenue_center_id && x.company_id == company_id);
            //}

            var costCenterIds = flattenList.Select(x => x.Item1).Distinct().ToList();
            var companyIds = flattenList.Select(x => x.Item2).Distinct().ToList();


            var query = await _dbContext.CostCenterCompanyMapping
                .Where(x => costCenterIds.Contains(x.cost_center_id) &&
                            companyIds.Contains(x.company_id))
                .ToListAsync();


            return query.Select(x => (x.company_id, x.cost_center_id));

        }

        public async Task<IEnumerable<CostCenterCompanyMapping>> GetDeleteList(List<(int, int)> flattenList)
        {
            var costCenterIds = flattenList.Select(x => x.Item1).Distinct().ToList();
            var companyIds = flattenList.Select(x => x.Item2).Distinct().ToList();


            return await _dbContext.CostCenterCompanyMapping
                .Where(x => costCenterIds.Contains(x.cost_center_id) &&
                            companyIds.Contains(x.company_id)).ToListAsync();


        }
    }
}
