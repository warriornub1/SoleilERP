using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using SERP.Api.Common;
using SERP.Application.Common.Constants;
using SERP.Application.Common.Services;
using SERP.Application.Finance.CostCenters.DTOs.Request;
using SERP.Application.Finance.RevenueCenters.DTOs.Request;
using SERP.Application.Finance.RevenueCenters.Services;
using SERP.Application.Masters.Companies.DTOs.Request;
using static SERP.Application.Common.Constants.ApplicationConstant;

namespace SERP.Api.Controllers
{
    [Route("[controller]/[action]")]
    [ApiController]
    public class RevenueCenterController : Controller
    {
        private IRevenueCenterService _revenueCenterService;
        private readonly HttpContextService _httpContextService;
        private readonly IDataRetrievalService _dataRetrievalService;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public RevenueCenterController(IRevenueCenterService revenueCenterService, HttpContextService httpContextService, IDataRetrievalService dataRetrievalService,
            IWebHostEnvironment webHostEnvironment)
        {
            _revenueCenterService = revenueCenterService;
            _httpContextService = httpContextService;
            _dataRetrievalService = dataRetrievalService;
            _webHostEnvironment = webHostEnvironment;
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpGet("{page:int}/{pageSize:int}")]
        public async Task<IActionResult> GetAllPaged(int page, int pageSize)
        {
            var revenueCenters = await _revenueCenterService.GetAllPagedAsync(page, pageSize);
            return Ok(revenueCenters);
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost]
        public async Task<IActionResult> SearchPaged(int page, int pageSize, string? keyword, [FromBody] SearchRevenueCenterRequestModel filter)
        {
            var costCenters = await _revenueCenterService.SearchPagedAsync(page, pageSize, keyword, filter);
            return Ok(costCenters);
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpGet("{id:int}")]
        public async Task<IActionResult> GetById([FromRoute]int id)
        {
            var result = await _revenueCenterService.GetByIdAsync(id);
            return Ok(result);
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpGet]
        public async Task<IActionResult> GetRevenueCenterTreeView()
        {
            var result = await _revenueCenterService.GetRevenueCenterTreeViewAsync();
            return Ok(result);
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost]
        public async Task<IActionResult> CreateRevenueCenter(CreateRevenueCenterRequestModel request)
        {
            await _revenueCenterService.CreateRevenueCenterAsync(request, _httpContextService.GetCurrentUserId());
            return Ok();
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPut]
        public async Task<IActionResult> UpdateRevenueCenter(List<UpdateRevenueCenterRequestModel> requests)
        {
            await _revenueCenterService.UpdateRevenueCenterAsync(requests, _httpContextService.GetCurrentUserId());
            return Ok();
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpGet]
        public async Task<IActionResult> GetRevenueCenterTemplate()
        {
            var file = await _revenueCenterService.GetRevenueCenterTemplate(_webHostEnvironment.WebRootPath);
            Response.Headers.Add("Content-Disposition", "Content-Disposition");
            return new FileStreamResult(new MemoryStream(file), HttpMediaType.Excel)
            {
                FileDownloadName = ApplicationConstant.FileName.RevenueCenter
            };
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost]
        public async Task<IActionResult> ImportRevenueCenter([FromForm] ImportRevenueCenterRequestModel request)
        {
            await _revenueCenterService.ImportRevenueCenterAsync(_httpContextService.GetCurrentUserId(), request);
            return Ok();
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost]
        public async Task<IActionResult> DeleteRevenueCenter(DeleteRevenueCenterRequestDto request)
        {
            await _revenueCenterService.DeleteRevenueCenterAsync(request);
            return Ok();
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpGet]
        public async Task<IActionResult> GetCompanyStructureRevenueCenter()
        {
            var result = await _revenueCenterService.GetCompanyStructureRevenueCenter();
            return Ok(result);
        }
    }
}
