using FluentValidation;
using SERP.Application.Common.Constants;
using SERP.Application.Finance.Company_Structures.Interface;
using SERP.Application.Finance.CostCenters.DTOs.Request;
using SERP.Application.Finance.CostCenters.Interface;
using SERP.Application.Finance.Groups.Interfaces;
using SERP.Domain.Common.Constants;

namespace SERP.Application.Finance.CostCenters.DTOs.Validator
{
    public class ICostCenterDtoValidator : AbstractValidator<CostCenterBaseDto>
    {
        private readonly ICompanyStructureRepository _companyStructureRepository;
        private readonly ICostCenterRepository _costCenterRepository;
        private readonly IGroupRepository _groupRepository;
        public ICostCenterDtoValidator(ICompanyStructureRepository companyStructureRepository, ICostCenterRepository costCenterRepository, IGroupRepository groupRepository)
        {
            _companyStructureRepository = companyStructureRepository;
            _costCenterRepository = costCenterRepository;
            _groupRepository = groupRepository;

           RuleFor(x => x.company_structure_id)
                .MustAsync(async (company_structure_id, token) =>
                {
                    var companyStruct = await _companyStructureRepository.GetByIdAsync(x => x.id == company_structure_id);
                    return companyStruct != null;
                })
                .When(x => x.company_structure_id.HasValue)
                .WithMessage("{PropertyName}: {PropertyValue} not found.");

            // Reject if code is exists in CostCenter table
            RuleFor(x => x.cost_center_code)
                .MustAsync(async (costCenterCode, token) =>
                {
                    var costCenter = await _costCenterRepository.GetByIdAsync(x => x.cost_center_code == costCenterCode);
                    return costCenter == null;
                })
                .WithMessage(string.Format(ErrorMessages.CostCenterCodeAlreadyExist, "{PropertyValue}"));


            // Reject if parent_group_id is not exist in Group table with group_type = CC, status_flag = E
            RuleFor(x => x.parent_group_id)
                .MustAsync(async (parentGroupId, token) =>
                {
                    var group = await _groupRepository.GetByIdAsync(x => x.id == parentGroupId && x.group_type == DomainConstant.Group.GroupType.CostCenter && x.status_flag == DomainConstant.StatusFlag.Enabled);
                    return group != null;
                })
                .WithMessage(string.Format(ErrorMessages.ParentGroupIDDontExist, "{PropertyValue}"));

        }
    }
}
